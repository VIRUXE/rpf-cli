std/keyword.loop
-----------------------------------------------------------
Keyword loop
Loop indefinitely. loop is used to define the simplest kind of loop supported in Rust. It runs the code inside it until the code uses break or the program exits. loop {
    println!("hello world forever!");
}
let mut i = 1;
loop {
    println!("i is {i}");
    if i > 100 {
        break;
    }
    i *= 2;
}
assert_eq!(i, 128); Unlike the other kinds of loops in Rust (while, while let, and for), loops can be used as expressions that return values via break. let mut i = 1;
let something = loop {
    i *= 2;
    if i > 100 {
        break i;
    }
};
assert_eq!(something, 128); Every break in a loop has to have the same type. When itâ€™s not explicitly giving something, break; returns (). For more information on loop and loops in general, see the Reference. See also, for, while.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/keyword.loop.html


std/ffi/c_str/struct.nulerror
-----------------------------------------------------------
Struct NulError
pub struct NulError(/* private fields */);
ðŸ”¬This is a nightly-only experimental API. (c_str_module #112134)
An error indicating that an interior nul byte was found. While Rust strings may contain nul bytes in the middle, C strings canâ€™t, as that byte would effectively truncate the string. This error is created by the new method on CString. See its documentation for more. Examples use std::ffi::{CString, NulError};
let _: NulError = CString::new(b"f\0oo".to_vec()).unwrap_err(); Implementations
sourceimpl NulError
1.0.0sourcepub fn nul_position(&self) -> usize
Returns the position of the nul byte in the slice that caused CString::new to fail. Examples use std::ffi::CString;
let nul_error = CString::new("foo\0bar").unwrap_err();
assert_eq!(nul_error.nul_position(), 3);
let nul_error = CString::new("foo bar\0").unwrap_err();
assert_eq!(nul_error.nul_position(), 7); 
1.0.0sourcepub fn into_vec(self) -> Vec<u8> â“˜
Consumes this error, returning the underlying vector of bytes which generated the error in the first place. Examples use std::ffi::CString;
let nul_error = CString::new("foo\0bar").unwrap_err();
assert_eq!(nul_error.into_vec(), b"foo\0bar"); 

Trait Implementations
1.64.0sourceimpl Clone for NulError
sourcefn clone(&self) -> NulErrorReturns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.64.0sourceimpl Debug for NulError
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.0.0sourceimpl Display for NulError
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.0.0sourceimpl Error for NulError
sourcefn description(&self) -> &str
ðŸ‘ŽDeprecated since 1.42.0: use the Display impl or to_string()
 Read more
1.30.0sourcefn source(&self) -> Option<&(dyn Error + 'static)>Returns the lower-level source of this error, if any. Read more
1.0.0sourcefn cause(&self) -> Option<&dyn Error>
ðŸ‘ŽDeprecated since 1.33.0: replaced by Error::source, which can support downcasting
sourcefn provide<'a>(&'a self, request: &mut Request<'a>)
ðŸ”¬This is a nightly-only experimental API. (error_generic_member_access #99301)
Provides type-based access to context intended for error reports. Read more

1.0.0sourceimpl From<NulError> for Error
sourcefn from(_: NulError) -> Error
Converts a alloc::ffi::NulError into a Error. 
1.64.0sourceimpl PartialEq for NulError
sourcefn eq(&self, other: &NulError) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.64.0sourceimpl Eq for NulError1.64.0sourceimpl StructuralPartialEq for NulError
Auto Trait Implementations
impl Freeze for NulErrorimpl RefUnwindSafe for NulErrorimpl Send for NulErrorimpl Sync for NulErrorimpl Unpin for NulErrorimpl UnwindSafe for NulError
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T> ToString for Twhere
    T: Display + ?Sized,
sourcedefault fn to_string(&self) -> StringConverts the given value to a String. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/ffi/c_str/struct.NulError.html


std/slice/struct.splitinclusive
-----------------------------------------------------------
Struct SplitInclusive
pub struct SplitInclusive<'a, T, P>where
    T: 'a,
    P: FnMut(&T) -> bool,{ /* private fields */ }
An iterator over subslices separated by elements that match a predicate function. Unlike Split, it contains the matched part as a terminator of the subslice. This struct is created by the split_inclusive method on slices. Example let slice = [10, 40, 33, 20];
let mut iter = slice.split_inclusive(|num| num % 3 == 0);
assert_eq!(iter.next(), Some(&[10, 40, 33][..]));
assert_eq!(iter.next(), Some(&[20][..]));
assert_eq!(iter.next(), None); Trait Implementations
1.51.0sourceimpl<T, P> Clone for SplitInclusive<'_, T, P>where
    P: Clone + FnMut(&T) -> bool,
sourcefn clone(&self) -> SplitInclusive<'_, T, P> â“˜Returns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.51.0sourceimpl<T, P> Debug for SplitInclusive<'_, T, P>where
    T: Debug,
    P: FnMut(&T) -> bool,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.51.0sourceimpl<'a, T, P> DoubleEndedIterator for SplitInclusive<'a, T, P>where
    P: FnMut(&T) -> bool,
sourcefn next_back(&mut self) -> Option<&'a [T]>Removes and returns an element from the end of the iterator. Read more
sourcefn advance_back_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator from the back by n elements. Read more
1.37.0sourcefn nth_back(&mut self, n: usize) -> Option<Self::Item>Returns the nth element from the end of the iterator. Read more
1.27.0sourcefn try_rfold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> R,
    R: Try<Output = B>,This is the reverse version of Iterator::try_fold(): it takes elements starting from the back of the iterator. Read more
1.27.0sourcefn rfold<B, F>(self, init: B, f: F) -> Bwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> B,An iterator method that reduces the iteratorâ€™s elements to a single, final value, starting from the back. Read more
1.27.0sourcefn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator from the back that satisfies a predicate. Read more

1.51.0sourceimpl<'a, T, P> Iterator for SplitInclusive<'a, T, P>where
    P: FnMut(&T) -> bool,
sourcetype Item = &'a [T]The type of the elements being iterated over.
sourcefn next(&mut self) -> Option<&'a [T]>Advances the iterator and returns the next value. Read more
sourcefn size_hint(&self) -> (usize, Option<usize>)Returns the bounds on the remaining length of the iterator. Read more
sourcefn next_chunk<const N: usize>(
    &mut self,
) -> Result<[Self::Item; N], IntoIter<Self::Item, N>>where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_next_chunk #98326)
Advances the iterator and returns an array containing the next N values. Read more
1.0.0sourcefn count(self) -> usizewhere
    Self: Sized,Consumes the iterator, counting the number of iterations and returning it. Read more
1.0.0sourcefn last(self) -> Option<Self::Item>where
    Self: Sized,Consumes the iterator, returning the last element. Read more
sourcefn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator by n elements. Read more
1.0.0sourcefn nth(&mut self, n: usize) -> Option<Self::Item>Returns the nth element of the iterator. Read more
1.28.0sourcefn step_by(self, step: usize) -> StepBy<Self> â“˜where
    Self: Sized,Creates an iterator starting at the same point, but stepping by the given amount at each iteration. Read more
1.0.0sourcefn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator<Item = Self::Item>,Takes two iterators and creates a new iterator over both in sequence. Read more
1.0.0sourcefn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator,â€˜Zips upâ€™ two iterators into a single iterator of pairs. Read more
sourcefn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G> â“˜where
    Self: Sized,
    G: FnMut() -> Self::Item,
ðŸ”¬This is a nightly-only experimental API. (iter_intersperse #79524)
Creates a new iterator which places an item generated by separator between adjacent items of the original iterator. Read more
1.0.0sourcefn map<B, F>(self, f: F) -> Map<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> B,Takes a closure and creates an iterator which calls that closure on each element. Read more
1.21.0sourcefn for_each<F>(self, f: F)where
    Self: Sized,
    F: FnMut(Self::Item),Calls a closure on each element of an iterator. Read more
1.0.0sourcefn filter<P>(self, predicate: P) -> Filter<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator which uses a closure to determine if an element should be yielded. Read more
1.0.0sourcefn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Creates an iterator that both filters and maps. Read more
1.0.0sourcefn enumerate(self) -> Enumerate<Self> â“˜where
    Self: Sized,Creates an iterator which gives the current iteration count as well as the next value. Read more
1.0.0sourcefn peekable(self) -> Peekable<Self> â“˜where
    Self: Sized,Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information. Read more
1.0.0sourcefn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that skips elements based on a predicate. Read more
1.0.0sourcefn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that yields elements based on a predicate. Read more
1.57.0sourcefn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(Self::Item) -> Option<B>,Creates an iterator that both yields elements based on a predicate and maps. Read more
1.0.0sourcefn skip(self, n: usize) -> Skip<Self> â“˜where
    Self: Sized,Creates an iterator that skips the first n elements. Read more
1.0.0sourcefn take(self, n: usize) -> Take<Self> â“˜where
    Self: Sized,Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner. Read more
1.0.0sourcefn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> â“˜where
    Self: Sized,
    F: FnMut(&mut St, Self::Item) -> Option<B>,An iterator adapter which, like fold, holds internal state, but unlike fold, produces a new iterator. Read more
1.0.0sourcefn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F> â“˜where
    Self: Sized,
    U: IntoIterator,
    F: FnMut(Self::Item) -> U,Creates an iterator that works like map, but flattens nested structure. Read more
sourcefn map_windows<F, R, const N: usize>(self, f: F) -> MapWindows<Self, F, N> â“˜where
    Self: Sized,
    F: FnMut(&[Self::Item; N]) -> R,
ðŸ”¬This is a nightly-only experimental API. (iter_map_windows #87155)
Calls the given function f for each contiguous window of size N over self and returns an iterator over the outputs of f. Like slice::windows(), the windows during mapping overlap as well. Read more
1.0.0sourcefn fuse(self) -> Fuse<Self> â“˜where
    Self: Sized,Creates an iterator which ends after the first None. Read more
1.0.0sourcefn inspect<F>(self, f: F) -> Inspect<Self, F> â“˜where
    Self: Sized,
    F: FnMut(&Self::Item),Does something with each element of an iterator, passing the value on. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Borrows an iterator, rather than consuming it. Read more
1.0.0sourcefn collect<B>(self) -> Bwhere
    B: FromIterator<Self::Item>,
    Self: Sized,Transforms an iterator into a collection. Read more
sourcefn collect_into<E>(self, collection: &mut E) -> &mut Ewhere
    E: Extend<Self::Item>,
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_collect_into #94780)
Collects all the items from an iterator into a collection. Read more
1.0.0sourcefn partition<B, F>(self, f: F) -> (B, B)where
    Self: Sized,
    B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool,Consumes an iterator, creating two collections from it. Read more
sourcefn partition_in_place<'a, T, P>(self, predicate: P) -> usizewhere
    T: 'a,
    Self: Sized + DoubleEndedIterator<Item = &'a mut T>,
    P: FnMut(&T) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_partition_in_place #62543)
Reorders the elements of this iterator in-place according to the given predicate, such that all those that return true precede all those that return false. Returns the number of true elements found. Read more
sourcefn is_partitioned<P>(self, predicate: P) -> boolwhere
    Self: Sized,
    P: FnMut(Self::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_is_partitioned #62544)
Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false. Read more
1.27.0sourcefn try_fold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> R,
    R: Try<Output = B>,An iterator method that applies a function as long as it returns successfully, producing a single, final value. Read more
1.27.0sourcefn try_for_each<F, R>(&mut self, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(Self::Item) -> R,
    R: Try<Output = ()>,An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. Read more
1.0.0sourcefn fold<B, F>(self, init: B, f: F) -> Bwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> B,Folds every element into an accumulator by applying an operation, returning the final result. Read more
1.51.0sourcefn reduce<F>(self, f: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(Self::Item, Self::Item) -> Self::Item,Reduces the elements to a single one, by repeatedly applying a reducing operation. Read more
sourcefn try_reduce<R>(
    &mut self,
    f: impl FnMut(Self::Item, Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = Self::Item>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (iterator_try_reduce #87053)
Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. Read more
1.0.0sourcefn all<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if every element of the iterator matches a predicate. Read more
1.0.0sourcefn any<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if any element of the iterator matches a predicate. Read more
1.0.0sourcefn find<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator that satisfies a predicate. Read more
1.30.0sourcefn find_map<B, F>(&mut self, f: F) -> Option<B>where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Applies function to the elements of iterator and returns the first non-none result. Read more
sourcefn try_find<R>(
    &mut self,
    f: impl FnMut(&Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = bool>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (try_find #63178)
Applies function to the elements of iterator and returns the first true result or the first error. Read more
1.0.0sourcefn position<P>(&mut self, predicate: P) -> Option<usize>where
    Self: Sized,
    P: FnMut(Self::Item) -> bool,Searches for an element in an iterator, returning its index. Read more
1.6.0sourcefn max_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the maximum value from the specified function. Read more
1.15.0sourcefn max_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the maximum value with respect to the specified comparison function. Read more
1.6.0sourcefn min_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the minimum value from the specified function. Read more
1.15.0sourcefn min_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the minimum value with respect to the specified comparison function. Read more
1.0.0sourcefn rev(self) -> Rev<Self> â“˜where
    Self: Sized + DoubleEndedIterator,Reverses an iteratorâ€™s direction. Read more
1.0.0sourcefn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)where
    FromA: Default + Extend<A>,
    FromB: Default + Extend<B>,
    Self: Sized + Iterator<Item = (A, B)>,Converts an iterator of pairs into a pair of containers. Read more
1.36.0sourcefn copied<'a, T>(self) -> Copied<Self> â“˜where
    T: 'a + Copy,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which copies all of its elements. Read more
1.0.0sourcefn cloned<'a, T>(self) -> Cloned<Self> â“˜where
    T: 'a + Clone,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which clones all of its elements. Read more
sourcefn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N> â“˜where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_array_chunks #100450)
Returns an iterator over N elements of the iterator at a time. Read more
1.11.0sourcefn sum<S>(self) -> Swhere
    Self: Sized,
    S: Sum<Self::Item>,Sums the elements of an iterator. Read more
1.11.0sourcefn product<P>(self) -> Pwhere
    Self: Sized,
    P: Product<Self::Item>,Iterates over the entire iterator, multiplying all the elements Read more
sourcefn cmp_by<I, F>(self, other: I, cmp: F) -> Orderingwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn partial_cmp<I>(self, other: I) -> Option<Ordering>where
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,
Lexicographically compares the PartialOrd elements of this Iterator with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. Read more
sourcefn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering>where
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Option<Ordering>,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn eq<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are equal to those of another. Read more
sourcefn eq_by<I, F>(self, other: I, eq: F) -> boolwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function. Read more
1.5.0sourcefn ne<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are not equal to those of another. Read more
1.5.0sourcefn lt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less than those of another. Read more
1.5.0sourcefn le<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less or equal to those of another. Read more
1.5.0sourcefn gt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than those of another. Read more
1.5.0sourcefn ge<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than or equal to those of another. Read more
1.82.0sourcefn is_sorted_by<F>(self, compare: F) -> boolwhere
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> bool,Checks if the elements of this iterator are sorted using the given comparator function. Read more
1.82.0sourcefn is_sorted_by_key<F, K>(self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> K,
    K: PartialOrd,Checks if the elements of this iterator are sorted using the given key extraction function. Read more

1.51.0sourceimpl<T, P> FusedIterator for SplitInclusive<'_, T, P>where
    P: FnMut(&T) -> bool,
Auto Trait Implementations
impl<'a, T, P> Freeze for SplitInclusive<'a, T, P>where
    P: Freeze,impl<'a, T, P> RefUnwindSafe for SplitInclusive<'a, T, P>where
    P: RefUnwindSafe,
    T: RefUnwindSafe,impl<'a, T, P> Send for SplitInclusive<'a, T, P>where
    P: Send,
    T: Sync,impl<'a, T, P> Sync for SplitInclusive<'a, T, P>where
    P: Sync,
    T: Sync,impl<'a, T, P> Unpin for SplitInclusive<'a, T, P>where
    P: Unpin,impl<'a, T, P> UnwindSafe for SplitInclusive<'a, T, P>where
    P: UnwindSafe,
    T: RefUnwindSafe,
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<I> IntoIterator for Iwhere
    I: Iterator,
sourcetype Item = <I as Iterator>::ItemThe type of the elements being iterated over.
sourcetype IntoIter = IWhich kind of iterator are we turning this into?
sourcefn into_iter(self) -> ICreates an iterator from a value. Read more

sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/slice/struct.SplitInclusive.html


std/error/fn.request_ref
-----------------------------------------------------------
Function request_ref
pub fn request_ref<'a, T>(err: &'a (impl Error + ?Sized)) -> Option<&'a T>where
    T: 'static + ?Sized,
ðŸ”¬This is a nightly-only experimental API. (error_generic_member_access #99301)
Requests a reference of type T from the given impl Error. Examples Get a string reference from an error. #![feature(error_generic_member_access)]
use core::error::Error;
use core::error::request_ref;
fn get_str(err: &impl Error) -> &str {
    request_ref::<str>(err).unwrap()
}
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/error/fn.request_ref.html


std/intrinsics/fn.atomic_cxchg_acquire_seqcst
-----------------------------------------------------------
Function atomic_cxchg_acquire_seqcst
pub unsafe extern "rust-intrinsic" fn atomic_cxchg_acquire_seqcst<T>(
    dst: *mut T,
    old: T,
    src: T,
) -> (T, bool)where
    T: Copy,
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Stores a value if the current value is the same as the old value. The stabilized version of this intrinsic is available on the atomic types via the compare_exchange method by passing Ordering::Acquire and Ordering::SeqCst as the success and failure parameters. For example, AtomicBool::compare_exchange.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.atomic_cxchg_acquire_seqcst.html


std/intrinsics/fn.atomic_or_release
-----------------------------------------------------------
Function atomic_or_release
pub unsafe extern "rust-intrinsic" fn atomic_or_release<T>(
    dst: *mut T,
    src: T,
) -> Twhere
    T: Copy,
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the atomic types via the fetch_or method by passing Ordering::Release as the order. For example, AtomicBool::fetch_or.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.atomic_or_release.html


std/macro.trace_macros
-----------------------------------------------------------
Macro trace_macros
macro_rules! trace_macros {
    (true) => { ... };
    (false) => { ... };
}
ðŸ”¬This is a nightly-only experimental API. (trace_macros #29598)
Enables or disables tracing functionality used for debugging other macros.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/macro.trace_macros.html


std/simd/type.u16x64
-----------------------------------------------------------
Type Alias u16x64
pub type u16x64 = Simd<u16, 64>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with 64 elements of type u16. Aliased Type
struct u16x64(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/type.u16x64.html


std/pipe/fn.pipe
-----------------------------------------------------------
Function pipe
pub fn pipe() -> Result<(PipeReader, PipeWriter)>
ðŸ”¬This is a nightly-only experimental API. (anonymous_pipe #127154)
Create anonymous pipe that is close-on-exec and blocking.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/pipe/fn.pipe.html


std/intrinsics/simd/fn.simd_bswap
-----------------------------------------------------------
Function simd_bswap
pub unsafe extern "rust-intrinsic" fn simd_bswap<T>(x: T) -> T
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Swaps bytes of each element. T must be a vector of integers.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/simd/fn.simd_bswap.html


std/intrinsics/fn.atomic_max_acqrel
-----------------------------------------------------------
Function atomic_max_acqrel
pub unsafe extern "rust-intrinsic" fn atomic_max_acqrel<T>(
    dst: *mut T,
    src: T,
) -> Twhere
    T: Copy,
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Maximum with the current value using a signed comparison. The stabilized version of this intrinsic is available on the atomic signed integer types via the fetch_max method by passing Ordering::AcqRel as the order. For example, AtomicI32::fetch_max.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.atomic_max_acqrel.html


std/panic/fn.take_hook
-----------------------------------------------------------
Function take_hook
pub fn take_hook() -> Box<dyn Fn(&PanicHookInfo<'_>) + Sync + Send + 'static>
Unregisters the current panic hook and returns it, registering the default hook in its place. See also the function set_hook. If the default hook is registered it will be returned, but remain registered. Panics Panics if called from a panicking thread. Examples The following will print â€œNormal panicâ€: â“˜use std::panic;
panic::set_hook(Box::new(|_| {
    println!("Custom panic hook");
}));
let _ = panic::take_hook();
panic!("Normal panic");

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/panic/fn.take_hook.html


reference/visibility-and-privacy
-----------------------------------------------------------
Visibility and Privacy [vis] [vis.syntax]  Syntax Visibility : pub | pub ( crate ) | pub ( self ) | pub ( super ) | pub ( in SimplePath )  [vis.intro] These two terms are often used interchangeably, and what they are attempting to convey is the answer to the question â€œCan this item be used at this location?â€ [vis.name-hierarchy] Rustâ€™s name resolution operates on a global hierarchy of namespaces. Each level in the hierarchy can be thought of as some item. The items are one of those mentioned above, but also include external crates. Declaring or defining a new module can be thought of as inserting a new tree into the hierarchy at the location of the definition. [vis.privacy] To control whether interfaces can be used across modules, Rust checks each use of an item to see whether it should be allowed or not. This is where privacy warnings are generated, or otherwise â€œyou used a private item of another module and werenâ€™t allowed to.â€ [vis.default] By default, everything is private, with two exceptions: Associated items in a pub Trait are public by default; Enum variants in a pub enum are also public by default. When an item is declared as pub, it can be thought of as being accessible to the outside world. For example: fn main() {}
// Declare a private struct
struct Foo;
// Declare a public struct with a private field
pub struct Bar {
    field: i32,
}
// Declare a public enum with two public variants
pub enum State {
    PubliclyAccessibleState,
    PubliclyAccessibleState2,
} [vis.access] With the notion of an item being either public or private, Rust allows item accesses in two cases:  If an item is public, then it can be accessed externally from some module m if you can access all the itemâ€™s ancestor modules from m. You can also potentially be able to name the item through re-exports. See below. If an item is private, it may be accessed by the current module and its descendants.  These two cases are surprisingly powerful for creating module hierarchies exposing public APIs while hiding internal implementation details. To help explain, hereâ€™s a few use cases and what they would entail:   A library developer needs to expose functionality to crates which link against their library. As a consequence of the first case, this means that anything which is usable externally must be pub from the root down to the destination item. Any private item in the chain will disallow external accesses.   A crate needs a global available â€œhelper moduleâ€ to itself, but it doesnâ€™t want to expose the helper module as a public API. To accomplish this, the root of the crateâ€™s hierarchy would have a private module which then internally has a â€œpublic APIâ€. Because the entire crate is a descendant of the root, then the entire local crate can access this private module through the second case.   When writing unit tests for a module, itâ€™s often a common idiom to have an immediate child of the module to-be-tested named mod test. This module could access any items of the parent module through the second case, meaning that internal implementation details could also be seamlessly tested from the child module.   In the second case, it mentions that a private item â€œcan be accessedâ€ by the current module and its descendants, but the exact meaning of accessing an item depends on what the item is. [vis.usage] Accessing a module, for example, would mean looking inside of it (to import more items). On the other hand, accessing a function would mean that it is invoked. Additionally, path expressions and import statements are considered to access an item in the sense that the import/expression is only valid if the destination is in the current visibility scope. Hereâ€™s an example of a program which exemplifies the three cases outlined above: // This module is private, meaning that no external crate can access this
// module. Because it is private at the root of this current crate, however, any
// module in the crate may access any publicly visible item in this module.
mod crate_helper_module {
    // This function can be used by anything in the current crate
    pub fn crate_helper() {}
    // This function *cannot* be used by anything else in the crate. It is not
    // publicly visible outside of the `crate_helper_module`, so only this
    // current module and its descendants may access it.
    fn implementation_detail() {}
}
// This function is "public to the root" meaning that it's available to external
// crates linking against this one.
pub fn public_api() {}
// Similarly to 'public_api', this module is public so external crates may look
// inside of it.
pub mod submodule {
    use crate::crate_helper_module;
    pub fn my_method() {
        // Any item in the local crate may invoke the helper module's public
        // interface through a combination of the two rules above.
        crate_helper_module::crate_helper();
    }
    // This function is hidden to any module which is not a descendant of
    // `submodule`
    fn my_implementation() {}
    #[cfg(test)]
    mod test {
        #[test]
        fn test_my_implementation() {
            // Because this module is a descendant of `submodule`, it's allowed
            // to access private items inside of `submodule` without a privacy
            // violation.
            super::my_implementation();
        }
    }
}
fn main() {} For a Rust program to pass the privacy checking pass, all paths must be valid accesses given the two rules above. This includes all use statements, expressions, types, etc. 
pub(in path), pub(crate), pub(super), and pub(self)
 [vis.scoped] [vis.scoped.intro] In addition to public and private, Rust allows users to declare an item as visible only within a given scope. The rules for pub restrictions are as follows: [vis.scoped.in]  
pub(in path) makes an item visible within the provided path. path must be a simple path which resolves to an ancestor module of the item whose visibility is being declared. Each identifier in path must refer directly to a module (not to a name introduced by a use statement).  [vis.scoped.crate]  
pub(crate) makes an item visible within the current crate.  [vis.scoped.super]  
pub(super) makes an item visible to the parent module. This is equivalent to pub(in super).  [vis.scoped.self]  
pub(self) makes an item visible to the current module. This is equivalent to pub(in self) or not using pub at all.  [vis.scoped.edition2018]  Edition differences: Starting with the 2018 edition, paths for pub(in path) must start with crate, self, or super. The 2015 edition may also use paths starting with :: or modules from the crate root.  Hereâ€™s an example: pub mod outer_mod {
    pub mod inner_mod {
        // This function is visible within `outer_mod`
        pub(in crate::outer_mod) fn outer_mod_visible_fn() {}
        // Same as above, this is only valid in the 2015 edition.
        pub(in outer_mod) fn outer_mod_visible_fn_2015() {}
        // This function is visible to the entire crate
        pub(crate) fn crate_visible_fn() {}
        // This function is visible within `outer_mod`
        pub(super) fn super_mod_visible_fn() {
            // This function is visible since we're in the same `mod`
            inner_mod_visible_fn();
        }
        // This function is visible only within `inner_mod`,
        // which is the same as leaving it private.
        pub(self) fn inner_mod_visible_fn() {}
    }
    pub fn foo() {
        inner_mod::outer_mod_visible_fn();
        inner_mod::crate_visible_fn();
        inner_mod::super_mod_visible_fn();
        // This function is no longer visible since we're outside of `inner_mod`
        // Error! `inner_mod_visible_fn` is private
        //inner_mod::inner_mod_visible_fn();
    }
}
fn bar() {
    // This function is still visible since we're in the same crate
    outer_mod::inner_mod::crate_visible_fn();
    // This function is no longer visible since we're outside of `outer_mod`
    // Error! `super_mod_visible_fn` is private
    //outer_mod::inner_mod::super_mod_visible_fn();
    // This function is no longer visible since we're outside of `outer_mod`
    // Error! `outer_mod_visible_fn` is private
    //outer_mod::inner_mod::outer_mod_visible_fn();
    outer_mod::foo();
}
fn main() { bar() }  Note: This syntax only adds another restriction to the visibility of an item. It does not guarantee that the item is visible within all parts of the specified scope. To access an item, all of its parent items up to the current scope must still be visible as well.  Re-exporting and Visibility [vis.reexports] [vis.reexports.intro] Rust allows publicly re-exporting items through a pub use directive. Because this is a public directive, this allows the item to be used in the current module through the rules above. It essentially allows public access into the re-exported item. For example, this program is valid: pub use self::implementation::api;
mod implementation {
    pub mod api {
        pub fn f() {}
    }
}
fn main() {} This means that any external crate referencing implementation::api::f would receive a privacy violation, while the path api::f would be allowed. [vis.reexports.private-item] When re-exporting a private item, it can be thought of as allowing the â€œprivacy chainâ€ being short-circuited through the reexport instead of passing through the namespace hierarchy as it normally would.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/reference/visibility-and-privacy.html?highlight=pub


std/time/struct.tryfromfloatsecserror
-----------------------------------------------------------
Struct TryFromFloatSecsError
pub struct TryFromFloatSecsError { /* private fields */ }
An error which can be returned when converting a floating-point value of seconds into a Duration. This error is used as the error type for Duration::try_from_secs_f32 and Duration::try_from_secs_f64. Example use std::time::Duration;
if let Err(e) = Duration::try_from_secs_f32(-1.0) {
    println!("Failed conversion to Duration: {e}");
} Trait Implementations
1.66.0sourceimpl Clone for TryFromFloatSecsError
sourcefn clone(&self) -> TryFromFloatSecsErrorReturns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.66.0sourceimpl Debug for TryFromFloatSecsError
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.66.0sourceimpl Display for TryFromFloatSecsError
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.66.0sourceimpl Error for TryFromFloatSecsError
1.30.0sourcefn source(&self) -> Option<&(dyn Error + 'static)>Returns the lower-level source of this error, if any. Read more
1.0.0sourcefn description(&self) -> &str
ðŸ‘ŽDeprecated since 1.42.0: use the Display impl or to_string()
 Read more
1.0.0sourcefn cause(&self) -> Option<&dyn Error>
ðŸ‘ŽDeprecated since 1.33.0: replaced by Error::source, which can support downcasting
sourcefn provide<'a>(&'a self, request: &mut Request<'a>)
ðŸ”¬This is a nightly-only experimental API. (error_generic_member_access #99301)
Provides type-based access to context intended for error reports. Read more

1.66.0sourceimpl PartialEq for TryFromFloatSecsError
sourcefn eq(&self, other: &TryFromFloatSecsError) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.66.0sourceimpl Eq for TryFromFloatSecsError1.66.0sourceimpl StructuralPartialEq for TryFromFloatSecsError
Auto Trait Implementations
impl Freeze for TryFromFloatSecsErrorimpl RefUnwindSafe for TryFromFloatSecsErrorimpl Send for TryFromFloatSecsErrorimpl Sync for TryFromFloatSecsErrorimpl Unpin for TryFromFloatSecsErrorimpl UnwindSafe for TryFromFloatSecsError
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T> ToString for Twhere
    T: Display + ?Sized,
sourcedefault fn to_string(&self) -> StringConverts the given value to a String. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/time/struct.TryFromFloatSecsError.html


std/f32/consts/constant.frac_1_pi
-----------------------------------------------------------
Constant FRAC_1_PI
pub const FRAC_1_PI: f32 = 0.318309886183790671537767526745028724_f32; // 0.318309873f32
1/Ï€
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/f32/consts/constant.FRAC_1_PI.html


std/simd/type.f32x32
-----------------------------------------------------------
Type Alias f32x32
pub type f32x32 = Simd<f32, 32>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with 32 elements of type f32. Aliased Type
struct f32x32(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/type.f32x32.html


std/keyword.await
-----------------------------------------------------------
Keyword await
Suspend execution until the result of a Future is ready. .awaiting a future will suspend the current functionâ€™s execution until the executor has run the future to completion. Read the async book for details on how async/await and executors work. Editions await is a keyword from the 2018 edition onwards. It is available for use in stable Rust from version 1.39 onwards.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/keyword.await.html


std/collections/linked_list/struct.extractif
-----------------------------------------------------------
Struct ExtractIf
pub struct ExtractIf<'a, T, F, A = Global>where
    T: 'a,
    F: 'a + FnMut(&mut T) -> bool,
    A: Allocator,{ /* private fields */ }
ðŸ”¬This is a nightly-only experimental API. (extract_if #43244)
An iterator produced by calling extract_if on LinkedList. Trait Implementations
sourceimpl<T, F> Debug for ExtractIf<'_, T, F>where
    T: Debug,
    F: FnMut(&mut T) -> bool,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

sourceimpl<T, F, A> Iterator for ExtractIf<'_, T, F, A>where
    A: Allocator,
    F: FnMut(&mut T) -> bool,
sourcetype Item = TThe type of the elements being iterated over.
sourcefn next(&mut self) -> Option<T>Advances the iterator and returns the next value. Read more
sourcefn size_hint(&self) -> (usize, Option<usize>)Returns the bounds on the remaining length of the iterator. Read more
sourcefn next_chunk<const N: usize>(
    &mut self,
) -> Result<[Self::Item; N], IntoIter<Self::Item, N>>where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_next_chunk #98326)
Advances the iterator and returns an array containing the next N values. Read more
1.0.0sourcefn count(self) -> usizewhere
    Self: Sized,Consumes the iterator, counting the number of iterations and returning it. Read more
1.0.0sourcefn last(self) -> Option<Self::Item>where
    Self: Sized,Consumes the iterator, returning the last element. Read more
sourcefn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator by n elements. Read more
1.0.0sourcefn nth(&mut self, n: usize) -> Option<Self::Item>Returns the nth element of the iterator. Read more
1.28.0sourcefn step_by(self, step: usize) -> StepBy<Self> â“˜where
    Self: Sized,Creates an iterator starting at the same point, but stepping by the given amount at each iteration. Read more
1.0.0sourcefn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator<Item = Self::Item>,Takes two iterators and creates a new iterator over both in sequence. Read more
1.0.0sourcefn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator,â€˜Zips upâ€™ two iterators into a single iterator of pairs. Read more
sourcefn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G> â“˜where
    Self: Sized,
    G: FnMut() -> Self::Item,
ðŸ”¬This is a nightly-only experimental API. (iter_intersperse #79524)
Creates a new iterator which places an item generated by separator between adjacent items of the original iterator. Read more
1.0.0sourcefn map<B, F>(self, f: F) -> Map<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> B,Takes a closure and creates an iterator which calls that closure on each element. Read more
1.21.0sourcefn for_each<F>(self, f: F)where
    Self: Sized,
    F: FnMut(Self::Item),Calls a closure on each element of an iterator. Read more
1.0.0sourcefn filter<P>(self, predicate: P) -> Filter<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator which uses a closure to determine if an element should be yielded. Read more
1.0.0sourcefn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Creates an iterator that both filters and maps. Read more
1.0.0sourcefn enumerate(self) -> Enumerate<Self> â“˜where
    Self: Sized,Creates an iterator which gives the current iteration count as well as the next value. Read more
1.0.0sourcefn peekable(self) -> Peekable<Self> â“˜where
    Self: Sized,Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information. Read more
1.0.0sourcefn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that skips elements based on a predicate. Read more
1.0.0sourcefn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that yields elements based on a predicate. Read more
1.57.0sourcefn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(Self::Item) -> Option<B>,Creates an iterator that both yields elements based on a predicate and maps. Read more
1.0.0sourcefn skip(self, n: usize) -> Skip<Self> â“˜where
    Self: Sized,Creates an iterator that skips the first n elements. Read more
1.0.0sourcefn take(self, n: usize) -> Take<Self> â“˜where
    Self: Sized,Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner. Read more
1.0.0sourcefn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> â“˜where
    Self: Sized,
    F: FnMut(&mut St, Self::Item) -> Option<B>,An iterator adapter which, like fold, holds internal state, but unlike fold, produces a new iterator. Read more
1.0.0sourcefn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F> â“˜where
    Self: Sized,
    U: IntoIterator,
    F: FnMut(Self::Item) -> U,Creates an iterator that works like map, but flattens nested structure. Read more
sourcefn map_windows<F, R, const N: usize>(self, f: F) -> MapWindows<Self, F, N> â“˜where
    Self: Sized,
    F: FnMut(&[Self::Item; N]) -> R,
ðŸ”¬This is a nightly-only experimental API. (iter_map_windows #87155)
Calls the given function f for each contiguous window of size N over self and returns an iterator over the outputs of f. Like slice::windows(), the windows during mapping overlap as well. Read more
1.0.0sourcefn fuse(self) -> Fuse<Self> â“˜where
    Self: Sized,Creates an iterator which ends after the first None. Read more
1.0.0sourcefn inspect<F>(self, f: F) -> Inspect<Self, F> â“˜where
    Self: Sized,
    F: FnMut(&Self::Item),Does something with each element of an iterator, passing the value on. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Borrows an iterator, rather than consuming it. Read more
1.0.0sourcefn collect<B>(self) -> Bwhere
    B: FromIterator<Self::Item>,
    Self: Sized,Transforms an iterator into a collection. Read more
sourcefn collect_into<E>(self, collection: &mut E) -> &mut Ewhere
    E: Extend<Self::Item>,
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_collect_into #94780)
Collects all the items from an iterator into a collection. Read more
1.0.0sourcefn partition<B, F>(self, f: F) -> (B, B)where
    Self: Sized,
    B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool,Consumes an iterator, creating two collections from it. Read more
sourcefn is_partitioned<P>(self, predicate: P) -> boolwhere
    Self: Sized,
    P: FnMut(Self::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_is_partitioned #62544)
Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false. Read more
1.27.0sourcefn try_fold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> R,
    R: Try<Output = B>,An iterator method that applies a function as long as it returns successfully, producing a single, final value. Read more
1.27.0sourcefn try_for_each<F, R>(&mut self, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(Self::Item) -> R,
    R: Try<Output = ()>,An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. Read more
1.0.0sourcefn fold<B, F>(self, init: B, f: F) -> Bwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> B,Folds every element into an accumulator by applying an operation, returning the final result. Read more
1.51.0sourcefn reduce<F>(self, f: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(Self::Item, Self::Item) -> Self::Item,Reduces the elements to a single one, by repeatedly applying a reducing operation. Read more
sourcefn try_reduce<R>(
    &mut self,
    f: impl FnMut(Self::Item, Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = Self::Item>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (iterator_try_reduce #87053)
Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. Read more
1.0.0sourcefn all<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if every element of the iterator matches a predicate. Read more
1.0.0sourcefn any<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if any element of the iterator matches a predicate. Read more
1.0.0sourcefn find<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator that satisfies a predicate. Read more
1.30.0sourcefn find_map<B, F>(&mut self, f: F) -> Option<B>where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Applies function to the elements of iterator and returns the first non-none result. Read more
sourcefn try_find<R>(
    &mut self,
    f: impl FnMut(&Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = bool>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (try_find #63178)
Applies function to the elements of iterator and returns the first true result or the first error. Read more
1.0.0sourcefn position<P>(&mut self, predicate: P) -> Option<usize>where
    Self: Sized,
    P: FnMut(Self::Item) -> bool,Searches for an element in an iterator, returning its index. Read more
1.6.0sourcefn max_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the maximum value from the specified function. Read more
1.15.0sourcefn max_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the maximum value with respect to the specified comparison function. Read more
1.6.0sourcefn min_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the minimum value from the specified function. Read more
1.15.0sourcefn min_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the minimum value with respect to the specified comparison function. Read more
1.0.0sourcefn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)where
    FromA: Default + Extend<A>,
    FromB: Default + Extend<B>,
    Self: Sized + Iterator<Item = (A, B)>,Converts an iterator of pairs into a pair of containers. Read more
1.36.0sourcefn copied<'a, T>(self) -> Copied<Self> â“˜where
    T: 'a + Copy,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which copies all of its elements. Read more
1.0.0sourcefn cloned<'a, T>(self) -> Cloned<Self> â“˜where
    T: 'a + Clone,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which clones all of its elements. Read more
sourcefn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N> â“˜where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_array_chunks #100450)
Returns an iterator over N elements of the iterator at a time. Read more
1.11.0sourcefn sum<S>(self) -> Swhere
    Self: Sized,
    S: Sum<Self::Item>,Sums the elements of an iterator. Read more
1.11.0sourcefn product<P>(self) -> Pwhere
    Self: Sized,
    P: Product<Self::Item>,Iterates over the entire iterator, multiplying all the elements Read more
sourcefn cmp_by<I, F>(self, other: I, cmp: F) -> Orderingwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn partial_cmp<I>(self, other: I) -> Option<Ordering>where
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,
Lexicographically compares the PartialOrd elements of this Iterator with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. Read more
sourcefn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering>where
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Option<Ordering>,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn eq<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are equal to those of another. Read more
sourcefn eq_by<I, F>(self, other: I, eq: F) -> boolwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function. Read more
1.5.0sourcefn ne<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are not equal to those of another. Read more
1.5.0sourcefn lt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less than those of another. Read more
1.5.0sourcefn le<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less or equal to those of another. Read more
1.5.0sourcefn gt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than those of another. Read more
1.5.0sourcefn ge<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than or equal to those of another. Read more
1.82.0sourcefn is_sorted_by<F>(self, compare: F) -> boolwhere
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> bool,Checks if the elements of this iterator are sorted using the given comparator function. Read more
1.82.0sourcefn is_sorted_by_key<F, K>(self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> K,
    K: PartialOrd,Checks if the elements of this iterator are sorted using the given key extraction function. Read more

Auto Trait Implementations
impl<'a, T, F, A> Freeze for ExtractIf<'a, T, F, A>where
    F: Freeze,impl<'a, T, F, A> RefUnwindSafe for ExtractIf<'a, T, F, A>where
    F: RefUnwindSafe,
    A: RefUnwindSafe,
    T: RefUnwindSafe,impl<'a, T, F, A = Global> !Send for ExtractIf<'a, T, F, A>impl<'a, T, F, A = Global> !Sync for ExtractIf<'a, T, F, A>impl<'a, T, F, A> Unpin for ExtractIf<'a, T, F, A>where
    F: Unpin,impl<'a, T, F, A = Global> !UnwindSafe for ExtractIf<'a, T, F, A>
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<I> IntoIterator for Iwhere
    I: Iterator,
sourcetype Item = <I as Iterator>::ItemThe type of the elements being iterated over.
sourcetype IntoIter = IWhich kind of iterator are we turning this into?
sourcefn into_iter(self) -> ICreates an iterator from a value. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/collections/linked_list/struct.ExtractIf.html


std/intrinsics/fn.ptr_guaranteed_cmp
-----------------------------------------------------------
Function ptr_guaranteed_cmp
pub const fn ptr_guaranteed_cmp<T>(ptr: *const T, other: *const T) -> u8
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
See documentation of <*const T>::guaranteed_eq for details. Returns 2 if the result is unknown. Returns 1 if the pointers are guaranteed equal Returns 0 if the pointers are guaranteed inequal
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.ptr_guaranteed_cmp.html


std/i32/constant.min
-----------------------------------------------------------
Constant MIN
pub const MIN: i32 = i32::MIN; // -2_147_483_648i32
ðŸ‘ŽDeprecating in a future version: replaced by the MIN associated constant on this type
The smallest value that can be represented by this integer type. Use i32::MIN instead. Examples // deprecated way
let min = std::i32::MIN;
// intended way
let min = i32::MIN;
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/i32/constant.MIN.html


std/future/trait.future
-----------------------------------------------------------
Trait Future
pub trait Future {
    type Output;
    // Required method
    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;
}
A future represents an asynchronous computation obtained by use of async. A future is a value that might not have finished computing yet. This kind of â€œasynchronous valueâ€ makes it possible for a thread to continue doing useful work while it waits for the value to become available. The poll method The core method of future, poll, attempts to resolve the future into a final value. This method does not block if the value is not ready. Instead, the current task is scheduled to be woken up when itâ€™s possible to make further progress by polling again. The context passed to the poll method can provide a Waker, which is a handle for waking up the current task. When using a future, you generally wonâ€™t call poll directly, but instead .await the value. Required Associated Types
1.36.0sourcetype Output
The type of value produced on completion. 
Required Methods
1.36.0sourcefn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>
Attempts to resolve the future to a final value, registering the current task for wakeup if the value is not yet available. Return value This function returns:  
Poll::Pending if the future is not ready yet 
Poll::Ready(val) with the result val of this future if it finished successfully.  Once a future has finished, clients should not poll it again. When a future is not ready yet, poll returns Poll::Pending and stores a clone of the Waker copied from the current Context. This Waker is then woken once the future can make progress. For example, a future waiting for a socket to become readable would call .clone() on the Waker and store it. When a signal arrives elsewhere indicating that the socket is readable, Waker::wake is called and the socket futureâ€™s task is awoken. Once a task has been woken up, it should attempt to poll the future again, which may or may not produce a final value. Note that on multiple calls to poll, only the Waker from the Context passed to the most recent call should be scheduled to receive a wakeup. Runtime characteristics Futures alone are inert; they must be actively polled to make progress, meaning that each time the current task is woken up, it should actively re-poll pending futures that it still has an interest in. The poll function is not called repeatedly in a tight loop â€“ instead, it should only be called when the future indicates that it is ready to make progress (by calling wake()). If youâ€™re familiar with the poll(2) or select(2) syscalls on Unix itâ€™s worth noting that futures typically do not suffer the same problems of â€œall wakeups must poll all eventsâ€; they are more like epoll(4). An implementation of poll should strive to return quickly, and should not block. Returning quickly prevents unnecessarily clogging up threads or event loops. If it is known ahead of time that a call to poll may end up taking a while, the work should be offloaded to a thread pool (or something similar) to ensure that poll can return quickly. Panics Once a future has completed (returned Ready from poll), calling its poll method again may panic, block forever, or cause other kinds of problems; the Future trait places no requirements on the effects of such a call. However, as the poll method is not marked unsafe, Rustâ€™s usual rules apply: calls must never cause undefined behavior (memory corruption, incorrect use of unsafe functions, or the like), regardless of the futureâ€™s state. 
Implementors
1.36.0sourceimpl<F> Future for &mut Fwhere
    F: Future + Unpin + ?Sized,sourcetype Output = <F as Future>::Output
1.36.0sourceimpl<F> Future for AssertUnwindSafe<F>where
    F: Future,sourcetype Output = <F as Future>::Output
1.36.0sourceimpl<F, A> Future for Box<F, A>where
    F: Future + Unpin + ?Sized,
    A: Allocator,sourcetype Output = <F as Future>::Output
1.36.0sourceimpl<P> Future for Pin<P>where
    P: DerefMut,
    <P as Deref>::Target: Future,sourcetype Output = <<P as Deref>::Target as Future>::Output
sourceimpl<T> Future for Exclusive<T>where
    T: Future + ?Sized,sourcetype Output = <T as Future>::Output
sourceimpl<T> Future for AsyncDropInPlace<T>where
    T: ?Sized,sourcetype Output = ()
1.48.0sourceimpl<T> Future for Pending<T>sourcetype Output = T
1.48.0sourceimpl<T> Future for Ready<T>sourcetype Output = T
1.64.0sourceimpl<T, F> Future for PollFn<F>where
    F: FnMut(&mut Context<'_>) -> Poll<T>,sourcetype Output = T

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/future/trait.Future.html


std/ffi/os_str/struct.osstring
-----------------------------------------------------------
Struct OsString
pub struct OsString { /* private fields */ }
ðŸ”¬This is a nightly-only experimental API. (os_str_display #120048)
A type that can represent owned, mutable platform-native strings, but is cheaply inter-convertible with Rust strings. The need for this type arises from the fact that:   On Unix systems, strings are often arbitrary sequences of non-zero bytes, in many cases interpreted as UTF-8.   On Windows, strings are often arbitrary sequences of non-zero 16-bit values, interpreted as UTF-16 when it is valid to do so.   In Rust, strings are always valid UTF-8, which may contain zeros.   OsString and OsStr bridge this gap by simultaneously representing Rust and platform-native string values, and in particular allowing a Rust string to be converted into an â€œOSâ€ string with no cost if possible. A consequence of this is that OsString instances are not NUL terminated; in order to pass to e.g., Unix system call, you should create a CStr. OsString is to &OsStr as String is to &str: the former in each pair are owned strings; the latter are borrowed references. Note, OsString and OsStr internally do not necessarily hold strings in the form native to the platform; While on Unix, strings are stored as a sequence of 8-bit values, on Windows, where strings are 16-bit value based as just discussed, strings are also actually stored as a sequence of 8-bit values, encoded in a less-strict variant of UTF-8. This is useful to understand when handling capacity and length values. Capacity of OsString
 Capacity uses units of UTF-8 bytes for OS strings which were created from valid unicode, and uses units of bytes in an unspecified encoding for other contents. On a given target, all OsString and OsStr values use the same units for capacity, so the following will work: use std::ffi::{OsStr, OsString};
fn concat_os_strings(a: &OsStr, b: &OsStr) -> OsString {
    let mut ret = OsString::with_capacity(a.len() + b.len()); // This will allocate
    ret.push(a); // This will not allocate further
    ret.push(b); // This will not allocate further
    ret
} Creating an OsString
 From a Rust string: OsString implements From<String>, so you can use my_string.into() to create an OsString from a normal Rust string. From slices: Just like you can start with an empty Rust String and then String::push_str some &str sub-string slices into it, you can create an empty OsString with the OsString::new method and then push string slices into it with the OsString::push method. Extracting a borrowed reference to the whole OS string You can use the OsString::as_os_str method to get an &OsStr from an OsString; this is effectively a borrowed reference to the whole string. Conversions See the moduleâ€™s toplevel documentation about conversions for a discussion on the traits which OsString implements for conversions from/to native representations. Implementations
sourceimpl OsString
1.0.0sourcepub fn new() -> OsString
Constructs a new empty OsString. Examples use std::ffi::OsString;
let os_string = OsString::new(); 
1.74.0sourcepub unsafe fn from_encoded_bytes_unchecked(bytes: Vec<u8>) -> Self
Converts bytes to an OsString without checking that the bytes contains valid OsStr-encoded data. The byte encoding is an unspecified, platform-specific, self-synchronizing superset of UTF-8. By being a self-synchronizing superset of UTF-8, this encoding is also a superset of 7-bit ASCII. See the moduleâ€™s toplevel documentation about conversions for safe, cross-platform conversions from/to native representations. Safety As the encoding is unspecified, callers must pass in bytes that originated as a mixture of validated UTF-8 and bytes from OsStr::as_encoded_bytes from within the same Rust version built for the same target platform. For example, reconstructing an OsString from bytes sent over the network or stored in a file will likely violate these safety rules. Due to the encoding being self-synchronizing, the bytes from OsStr::as_encoded_bytes can be split either immediately before or immediately after any valid non-empty UTF-8 substring. Example use std::ffi::OsStr;
let os_str = OsStr::new("Mary had a little lamb");
let bytes = os_str.as_encoded_bytes();
let words = bytes.split(|b| *b == b' ');
let words: Vec<&OsStr> = words.map(|word| {
    // SAFETY:
    // - Each `word` only contains content that originated from `OsStr::as_encoded_bytes`
    // - Only split with ASCII whitespace which is a non-empty UTF-8 substring
    unsafe { OsStr::from_encoded_bytes_unchecked(word) }
}).collect(); 
1.0.0sourcepub fn as_os_str(&self) -> &OsStr
Converts to an OsStr slice. Examples use std::ffi::{OsString, OsStr};
let os_string = OsString::from("foo");
let os_str = OsStr::new("foo");
assert_eq!(os_string.as_os_str(), os_str); 
1.74.0sourcepub fn into_encoded_bytes(self) -> Vec<u8> â“˜
Converts the OsString into a byte slice. To convert the byte slice back into an OsString, use the OsStr::from_encoded_bytes_unchecked function. The byte encoding is an unspecified, platform-specific, self-synchronizing superset of UTF-8. By being a self-synchronizing superset of UTF-8, this encoding is also a superset of 7-bit ASCII. Note: As the encoding is unspecified, any sub-slice of bytes that is not valid UTF-8 should be treated as opaque and only comparable within the same Rust version built for the same target platform. For example, sending the bytes over the network or storing it in a file will likely result in incompatible data. See OsString for more encoding details and std::ffi for platform-specific, specified conversions. 
1.0.0sourcepub fn into_string(self) -> Result<String, OsString>
Converts the OsString into a String if it contains valid Unicode data. On failure, ownership of the original OsString is returned. Examples use std::ffi::OsString;
let os_string = OsString::from("foo");
let string = os_string.into_string();
assert_eq!(string, Ok(String::from("foo"))); 
1.0.0sourcepub fn push<T: AsRef<OsStr>>(&mut self, s: T)
Extends the string with the given &OsStr slice. Examples use std::ffi::OsString;
let mut os_string = OsString::from("foo");
os_string.push("bar");
assert_eq!(&os_string, "foobar"); 
1.9.0sourcepub fn with_capacity(capacity: usize) -> OsString
Creates a new OsString with at least the given capacity. The string will be able to hold at least capacity length units of other OS strings without reallocating. This method is allowed to allocate for more units than capacity. If capacity is 0, the string will not allocate. See the main OsString documentation information about encoding and capacity units. Examples use std::ffi::OsString;
let mut os_string = OsString::with_capacity(10);
let capacity = os_string.capacity();
// This push is done without reallocating
os_string.push("foo");
assert_eq!(capacity, os_string.capacity()); 
1.9.0sourcepub fn clear(&mut self)
Truncates the OsString to zero length. Examples use std::ffi::OsString;
let mut os_string = OsString::from("foo");
assert_eq!(&os_string, "foo");
os_string.clear();
assert_eq!(&os_string, ""); 
1.9.0sourcepub fn capacity(&self) -> usize
Returns the capacity this OsString can hold without reallocating. See the main OsString documentation information about encoding and capacity units. Examples use std::ffi::OsString;
let os_string = OsString::with_capacity(10);
assert!(os_string.capacity() >= 10); 
1.9.0sourcepub fn reserve(&mut self, additional: usize)
Reserves capacity for at least additional more capacity to be inserted in the given OsString. Does nothing if the capacity is already sufficient. The collection may reserve more space to speculatively avoid frequent reallocations. See the main OsString documentation information about encoding and capacity units. Examples use std::ffi::OsString;
let mut s = OsString::new();
s.reserve(10);
assert!(s.capacity() >= 10); 
1.63.0sourcepub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError>
Tries to reserve capacity for at least additional more length units in the given OsString. The string may reserve more space to speculatively avoid frequent reallocations. After calling try_reserve, capacity will be greater than or equal to self.len() + additional if it returns Ok(()). Does nothing if capacity is already sufficient. This method preserves the contents even if an error occurs. See the main OsString documentation information about encoding and capacity units. Errors If the capacity overflows, or the allocator reports a failure, then an error is returned. Examples use std::ffi::{OsStr, OsString};
use std::collections::TryReserveError;
fn process_data(data: &str) -> Result<OsString, TryReserveError> {
    let mut s = OsString::new();
    // Pre-reserve the memory, exiting if we can't
    s.try_reserve(OsStr::new(data).len())?;
    // Now we know this can't OOM in the middle of our complex work
    s.push(data);
    Ok(s)
} 
1.9.0sourcepub fn reserve_exact(&mut self, additional: usize)
Reserves the minimum capacity for at least additional more capacity to be inserted in the given OsString. Does nothing if the capacity is already sufficient. Note that the allocator may give the collection more space than it requests. Therefore, capacity can not be relied upon to be precisely minimal. Prefer reserve if future insertions are expected. See the main OsString documentation information about encoding and capacity units. Examples use std::ffi::OsString;
let mut s = OsString::new();
s.reserve_exact(10);
assert!(s.capacity() >= 10); 
1.63.0sourcepub fn try_reserve_exact(
    &mut self,
    additional: usize,
) -> Result<(), TryReserveError>
Tries to reserve the minimum capacity for at least additional more length units in the given OsString. After calling try_reserve_exact, capacity will be greater than or equal to self.len() + additional if it returns Ok(()). Does nothing if the capacity is already sufficient. Note that the allocator may give the OsString more space than it requests. Therefore, capacity can not be relied upon to be precisely minimal. Prefer try_reserve if future insertions are expected. See the main OsString documentation information about encoding and capacity units. Errors If the capacity overflows, or the allocator reports a failure, then an error is returned. Examples use std::ffi::{OsStr, OsString};
use std::collections::TryReserveError;
fn process_data(data: &str) -> Result<OsString, TryReserveError> {
    let mut s = OsString::new();
    // Pre-reserve the memory, exiting if we can't
    s.try_reserve_exact(OsStr::new(data).len())?;
    // Now we know this can't OOM in the middle of our complex work
    s.push(data);
    Ok(s)
} 
1.19.0sourcepub fn shrink_to_fit(&mut self)
Shrinks the capacity of the OsString to match its length. See the main OsString documentation information about encoding and capacity units. Examples use std::ffi::OsString;
let mut s = OsString::from("foo");
s.reserve(100);
assert!(s.capacity() >= 100);
s.shrink_to_fit();
assert_eq!(3, s.capacity()); 
1.56.0sourcepub fn shrink_to(&mut self, min_capacity: usize)
Shrinks the capacity of the OsString with a lower bound. The capacity will remain at least as large as both the length and the supplied value. If the current capacity is less than the lower limit, this is a no-op. See the main OsString documentation information about encoding and capacity units. Examples use std::ffi::OsString;
let mut s = OsString::from("foo");
s.reserve(100);
assert!(s.capacity() >= 100);
s.shrink_to(10);
assert!(s.capacity() >= 10);
s.shrink_to(0);
assert!(s.capacity() >= 3); 
1.20.0sourcepub fn into_boxed_os_str(self) -> Box<OsStr>
Converts this OsString into a boxed OsStr. Examples use std::ffi::{OsString, OsStr};
let s = OsString::from("hello");
let b: Box<OsStr> = s.into_boxed_os_str(); 
sourcepub fn leak<'a>(self) -> &'a mut OsStr
ðŸ”¬This is a nightly-only experimental API. (os_string_pathbuf_leak #125965)
Consumes and leaks the OsString, returning a mutable reference to the contents, &'a mut OsStr. The caller has free choice over the returned lifetime, including â€™static. Indeed, this function is ideally used for data that lives for the remainder of the programâ€™s life, as dropping the returned reference will cause a memory leak. It does not reallocate or shrink the OsString, so the leaked allocation may include unused capacity that is not part of the returned slice. If you want to discard excess capacity, call into_boxed_os_str, and then Box::leak instead. However, keep in mind that trimming the capacity may result in a reallocation and copy. 

Methods from Deref<Target = OsStr>1.0.0sourcepub fn to_str(&self) -> Option<&str>
Yields a &str slice if the OsStr is valid Unicode. This conversion may entail doing a check for UTF-8 validity. Examples use std::ffi::OsStr;
let os_str = OsStr::new("foo");
assert_eq!(os_str.to_str(), Some("foo")); 
1.0.0sourcepub fn to_string_lossy(&self) -> Cow<'_, str>
Converts an OsStr to a Cow<str>. Any non-UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER. Examples Calling to_string_lossy on an OsStr with invalid unicode: // Note, due to differences in how Unix and Windows represent strings,
// we are forced to complicate this example, setting up example `OsStr`s
// with different source data and via different platform extensions.
// Understand that in reality you could end up with such example invalid
// sequences simply through collecting user command line arguments, for
// example.
#[cfg(unix)] {
    use std::ffi::OsStr;
    use std::os::unix::ffi::OsStrExt;
    // Here, the values 0x66 and 0x6f correspond to 'f' and 'o'
    // respectively. The value 0x80 is a lone continuation byte, invalid
    // in a UTF-8 sequence.
    let source = [0x66, 0x6f, 0x80, 0x6f];
    let os_str = OsStr::from_bytes(&source[..]);
    assert_eq!(os_str.to_string_lossy(), "foï¿½o");
}
#[cfg(windows)] {
    use std::ffi::OsString;
    use std::os::windows::prelude::*;
    // Here the values 0x0066 and 0x006f correspond to 'f' and 'o'
    // respectively. The value 0xD800 is a lone surrogate half, invalid
    // in a UTF-16 sequence.
    let source = [0x0066, 0x006f, 0xD800, 0x006f];
    let os_string = OsString::from_wide(&source[..]);
    let os_str = os_string.as_os_str();
    assert_eq!(os_str.to_string_lossy(), "foï¿½o");
} 
1.0.0sourcepub fn to_os_string(&self) -> OsString
Copies the slice into an owned OsString. Examples use std::ffi::{OsStr, OsString};
let os_str = OsStr::new("foo");
let os_string = os_str.to_os_string();
assert_eq!(os_string, OsString::from("foo")); 
1.9.0sourcepub fn is_empty(&self) -> bool
Checks whether the OsStr is empty. Examples use std::ffi::OsStr;
let os_str = OsStr::new("");
assert!(os_str.is_empty());
let os_str = OsStr::new("foo");
assert!(!os_str.is_empty()); 
1.9.0sourcepub fn len(&self) -> usize
Returns the length of this OsStr. Note that this does not return the number of bytes in the string in OS string form. The length returned is that of the underlying storage used by OsStr. As discussed in the OsString introduction, OsString and OsStr store strings in a form best suited for cheap inter-conversion between native-platform and Rust string forms, which may differ significantly from both of them, including in storage size and encoding. This number is simply useful for passing to other methods, like OsString::with_capacity to avoid reallocations. See the main OsString documentation information about encoding and capacity units. Examples use std::ffi::OsStr;
let os_str = OsStr::new("");
assert_eq!(os_str.len(), 0);
let os_str = OsStr::new("foo");
assert_eq!(os_str.len(), 3); 
1.74.0sourcepub fn as_encoded_bytes(&self) -> &[u8] â“˜
Converts an OS string slice to a byte slice. To convert the byte slice back into an OS string slice, use the OsStr::from_encoded_bytes_unchecked function. The byte encoding is an unspecified, platform-specific, self-synchronizing superset of UTF-8. By being a self-synchronizing superset of UTF-8, this encoding is also a superset of 7-bit ASCII. Note: As the encoding is unspecified, any sub-slice of bytes that is not valid UTF-8 should be treated as opaque and only comparable within the same Rust version built for the same target platform. For example, sending the slice over the network or storing it in a file will likely result in incompatible byte slices. See OsString for more encoding details and std::ffi for platform-specific, specified conversions. 
sourcepub fn slice_encoded_bytes<R: RangeBounds<usize>>(&self, range: R) -> &Self
ðŸ”¬This is a nightly-only experimental API. (os_str_slice #118485)
Takes a substring based on a range that corresponds to the return value of OsStr::as_encoded_bytes. The rangeâ€™s start and end must lie on valid OsStr boundaries. A valid OsStr boundary is one of:  The start of the string The end of the string Immediately before a valid non-empty UTF-8 substring Immediately after a valid non-empty UTF-8 substring  Panics Panics if range does not lie on valid OsStr boundaries or if it exceeds the end of the string. Example #![feature(os_str_slice)]
use std::ffi::OsStr;
let os_str = OsStr::new("foo=bar");
let bytes = os_str.as_encoded_bytes();
if let Some(index) = bytes.iter().position(|b| *b == b'=') {
    let key = os_str.slice_encoded_bytes(..index);
    let value = os_str.slice_encoded_bytes(index + 1..);
    assert_eq!(key, "foo");
    assert_eq!(value, "bar");
} 
1.53.0sourcepub fn make_ascii_lowercase(&mut self)
Converts this string to its ASCII lower case equivalent in-place. ASCII letters â€˜Aâ€™ to â€˜Zâ€™ are mapped to â€˜aâ€™ to â€˜zâ€™, but non-ASCII letters are unchanged. To return a new lowercased value without modifying the existing one, use OsStr::to_ascii_lowercase. Examples use std::ffi::OsString;
let mut s = OsString::from("GRÃœÃŸE, JÃœRGEN â¤");
s.make_ascii_lowercase();
assert_eq!("grÃœÃŸe, jÃœrgen â¤", s); 
1.53.0sourcepub fn make_ascii_uppercase(&mut self)
Converts this string to its ASCII upper case equivalent in-place. ASCII letters â€˜aâ€™ to â€˜zâ€™ are mapped to â€˜Aâ€™ to â€˜Zâ€™, but non-ASCII letters are unchanged. To return a new uppercased value without modifying the existing one, use OsStr::to_ascii_uppercase. Examples use std::ffi::OsString;
let mut s = OsString::from("GrÃ¼ÃŸe, JÃ¼rgen â¤");
s.make_ascii_uppercase();
assert_eq!("GRÃ¼ÃŸE, JÃ¼RGEN â¤", s); 
1.53.0sourcepub fn to_ascii_lowercase(&self) -> OsString
Returns a copy of this string where each character is mapped to its ASCII lower case equivalent. ASCII letters â€˜Aâ€™ to â€˜Zâ€™ are mapped to â€˜aâ€™ to â€˜zâ€™, but non-ASCII letters are unchanged. To lowercase the value in-place, use OsStr::make_ascii_lowercase. Examples use std::ffi::OsString;
let s = OsString::from("GrÃ¼ÃŸe, JÃ¼rgen â¤");
assert_eq!("grÃ¼ÃŸe, jÃ¼rgen â¤", s.to_ascii_lowercase()); 
1.53.0sourcepub fn to_ascii_uppercase(&self) -> OsString
Returns a copy of this string where each character is mapped to its ASCII upper case equivalent. ASCII letters â€˜aâ€™ to â€˜zâ€™ are mapped to â€˜Aâ€™ to â€˜Zâ€™, but non-ASCII letters are unchanged. To uppercase the value in-place, use OsStr::make_ascii_uppercase. Examples use std::ffi::OsString;
let s = OsString::from("GrÃ¼ÃŸe, JÃ¼rgen â¤");
assert_eq!("GRÃ¼ÃŸE, JÃ¼RGEN â¤", s.to_ascii_uppercase()); 
1.53.0sourcepub fn is_ascii(&self) -> bool
Checks if all characters in this string are within the ASCII range. Examples use std::ffi::OsString;
let ascii = OsString::from("hello!
");
let non_ascii = OsString::from("GrÃ¼ÃŸe, JÃ¼rgen â¤");
assert!(ascii.is_ascii());
assert!(!non_ascii.is_ascii()); 
1.53.0sourcepub fn eq_ignore_ascii_case<S: AsRef<OsStr>>(&self, other: S) -> bool
Checks that two strings are an ASCII case-insensitive match. Same as to_ascii_lowercase(a) == to_ascii_lowercase(b), but without allocating and copying temporaries. Examples use std::ffi::OsString;
assert!(OsString::from("Ferris").eq_ignore_ascii_case("FERRIS"));
assert!(OsString::from("FerrÃ¶s").eq_ignore_ascii_case("FERRÃ¶S"));
assert!(!OsString::from("FerrÃ¶s").eq_ignore_ascii_case("FERRÃ–S")); 
sourcepub fn display(&self) -> Display<'_>
ðŸ”¬This is a nightly-only experimental API. (os_str_display #120048)
Returns an object that implements Display for safely printing an OsStr that may contain non-Unicode data. This may perform lossy conversion, depending on the platform. If you would like an implementation which escapes the OsStr please use Debug instead. Examples #![feature(os_str_display)]
use std::ffi::OsStr;
let s = OsStr::new("Hello, world!");
println!("{}", s.display()); 
Trait Implementations
1.0.0sourceimpl AsRef<OsStr> for OsString
sourcefn as_ref(&self) -> &OsStrConverts this type into a shared reference of the (usually inferred) input type.
1.0.0sourceimpl AsRef<Path> for OsString
sourcefn as_ref(&self) -> &PathConverts this type into a shared reference of the (usually inferred) input type.
1.0.0sourceimpl Borrow<OsStr> for OsString
sourcefn borrow(&self) -> &OsStrImmutably borrows from an owned value. Read more

1.0.0sourceimpl Clone for OsString
sourcefn clone_from(&mut self, source: &Self)
Clones the contents of source into self. This method is preferred over simply assigning source.clone() to self, as it avoids reallocation if possible. 
sourcefn clone(&self) -> SelfReturns a copy of the value. Read more

1.0.0sourceimpl Debug for OsString
sourcefn fmt(&self, formatter: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

1.9.0sourceimpl Default for OsString
sourcefn default() -> OsString
Constructs an empty OsString. 
1.0.0sourceimpl Deref for OsString
sourcetype Target = OsStrThe resulting type after dereferencing.
sourcefn deref(&self) -> &OsStrDereferences the value.
1.44.0sourceimpl DerefMut for OsString
sourcefn deref_mut(&mut self) -> &mut OsStrMutably dereferences the value.
1.52.0sourceimpl<'a> Extend<&'a OsStr> for OsString
sourcefn extend<T: IntoIterator<Item = &'a OsStr>>(&mut self, iter: T)Extends a collection with the contents of an iterator. Read more
sourcefn extend_one(&mut self, item: A)
ðŸ”¬This is a nightly-only experimental API. (extend_one #72631)
Extends a collection with exactly one element.
sourcefn extend_reserve(&mut self, additional: usize)
ðŸ”¬This is a nightly-only experimental API. (extend_one #72631)
Reserves capacity in a collection for the given number of additional elements. Read more

1.52.0sourceimpl<'a> Extend<Cow<'a, OsStr>> for OsString
sourcefn extend<T: IntoIterator<Item = Cow<'a, OsStr>>>(&mut self, iter: T)Extends a collection with the contents of an iterator. Read more
sourcefn extend_one(&mut self, item: A)
ðŸ”¬This is a nightly-only experimental API. (extend_one #72631)
Extends a collection with exactly one element.
sourcefn extend_reserve(&mut self, additional: usize)
ðŸ”¬This is a nightly-only experimental API. (extend_one #72631)
Reserves capacity in a collection for the given number of additional elements. Read more

1.52.0sourceimpl Extend<OsString> for OsString
sourcefn extend<T: IntoIterator<Item = OsString>>(&mut self, iter: T)Extends a collection with the contents of an iterator. Read more
sourcefn extend_one(&mut self, item: A)
ðŸ”¬This is a nightly-only experimental API. (extend_one #72631)
Extends a collection with exactly one element.
sourcefn extend_reserve(&mut self, additional: usize)
ðŸ”¬This is a nightly-only experimental API. (extend_one #72631)
Reserves capacity in a collection for the given number of additional elements. Read more

1.28.0sourceimpl<'a> From<&'a OsString> for Cow<'a, OsStr>
sourcefn from(s: &'a OsString) -> Cow<'a, OsStr>
Converts the string reference into a Cow::Borrowed. 
1.0.0sourceimpl<T: ?Sized + AsRef<OsStr>> From<&T> for OsString
sourcefn from(s: &T) -> OsString
Copies any value implementing AsRef<OsStr> into a newly allocated OsString. 
1.18.0sourceimpl From<Box<OsStr>> for OsString
sourcefn from(boxed: Box<OsStr>) -> OsString
Converts a Box<OsStr> into an OsString without copying or allocating. 
1.28.0sourceimpl<'a> From<Cow<'a, OsStr>> for OsString
sourcefn from(s: Cow<'a, OsStr>) -> Self
Converts a Cow<'a, OsStr> into an OsString, by copying the contents if they are borrowed. 
1.24.0sourceimpl From<OsString> for Arc<OsStr>
sourcefn from(s: OsString) -> Arc<OsStr>
Converts an OsString into an Arc<OsStr> by moving the OsString data into a new Arc buffer. 
1.20.0sourceimpl From<OsString> for Box<OsStr>
sourcefn from(s: OsString) -> Box<OsStr>
Converts an OsString into a Box<OsStr> without copying or allocating. 
1.28.0sourceimpl<'a> From<OsString> for Cow<'a, OsStr>
sourcefn from(s: OsString) -> Cow<'a, OsStr>
Moves the string into a Cow::Owned. 
1.0.0sourceimpl From<OsString> for PathBuf
sourcefn from(s: OsString) -> PathBuf
Converts an OsString into a PathBuf. This conversion does not allocate or copy memory. 
1.24.0sourceimpl From<OsString> for Rc<OsStr>
sourcefn from(s: OsString) -> Rc<OsStr>
Converts an OsString into an Rc<OsStr> by moving the OsString data into a new Rc buffer. 
1.14.0sourceimpl From<PathBuf> for OsString
sourcefn from(path_buf: PathBuf) -> OsString
Converts a PathBuf into an OsString This conversion does not allocate or copy memory. 
1.0.0sourceimpl From<String> for OsString
sourcefn from(s: String) -> OsString
Converts a String into an OsString. This conversion does not allocate or copy memory. 
1.52.0sourceimpl<'a> FromIterator<&'a OsStr> for OsString
sourcefn from_iter<I: IntoIterator<Item = &'a OsStr>>(iter: I) -> SelfCreates a value from an iterator. Read more

1.52.0sourceimpl<'a> FromIterator<Cow<'a, OsStr>> for OsString
sourcefn from_iter<I: IntoIterator<Item = Cow<'a, OsStr>>>(iter: I) -> SelfCreates a value from an iterator. Read more

1.52.0sourceimpl FromIterator<OsString> for OsString
sourcefn from_iter<I: IntoIterator<Item = OsString>>(iter: I) -> SelfCreates a value from an iterator. Read more

1.45.0sourceimpl FromStr for OsString
sourcetype Err = InfallibleThe associated error which can be returned from parsing.
sourcefn from_str(s: &str) -> Result<Self, Self::Err>Parses a string s to return a value of this type. Read more

1.0.0sourceimpl Hash for OsString
sourcefn hash<H: Hasher>(&self, state: &mut H)Feeds this value into the given Hasher. Read more
1.3.0sourcefn hash_slice<H>(data: &[Self], state: &mut H)where
    H: Hasher,
    Self: Sized,Feeds a slice of this type into the given Hasher. Read more

1.0.0sourceimpl Index<RangeFull> for OsString
sourcetype Output = OsStrThe returned type after indexing.
sourcefn index(&self, _index: RangeFull) -> &OsStrPerforms the indexing (container[index]) operation. Read more

1.44.0sourceimpl IndexMut<RangeFull> for OsString
sourcefn index_mut(&mut self, _index: RangeFull) -> &mut OsStrPerforms the mutable indexing (container[index]) operation. Read more

1.0.0sourceimpl Ord for OsString
sourcefn cmp(&self, other: &OsString) -> OrderingThis method returns an Ordering between self and other. Read more
1.21.0sourcefn max(self, other: Self) -> Selfwhere
    Self: Sized,Compares and returns the maximum of two values. Read more
1.21.0sourcefn min(self, other: Self) -> Selfwhere
    Self: Sized,Compares and returns the minimum of two values. Read more
1.50.0sourcefn clamp(self, min: Self, max: Self) -> Selfwhere
    Self: Sized,Restrict a value to a certain interval. Read more

1.0.0sourceimpl OsStringExt for OsStringAvailable on Unix only.
sourcefn from_vec(vec: Vec<u8>) -> OsStringCreates an OsString from a byte vector. Read more
sourcefn into_vec(self) -> Vec<u8> â“˜Yields the underlying byte vector of this OsString. Read more

1.0.0sourceimpl OsStringExt for OsStringAvailable on WASI only.
sourcefn from_vec(vec: Vec<u8>) -> OsStringCreates an OsString from a byte vector. Read more
sourcefn into_vec(self) -> Vec<u8> â“˜Yields the underlying byte vector of this OsString. Read more

1.0.0sourceimpl OsStringExt for OsStringAvailable on Windows only.
sourcefn from_wide(wide: &[u16]) -> OsStringCreates an OsString from a potentially ill-formed UTF-16 slice of 16-bit code units. Read more

1.8.0sourceimpl<'a, 'b> PartialEq<&'a OsStr> for OsString
sourcefn eq(&self, other: &&'a OsStr) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.8.0sourceimpl<'a> PartialEq<&'a Path> for OsString
sourcefn eq(&self, other: &&'a Path) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.29.0sourceimpl PartialEq<&str> for OsString
sourcefn eq(&self, other: &&str) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.8.0sourceimpl<'a, 'b> PartialEq<Cow<'a, OsStr>> for OsString
sourcefn eq(&self, other: &Cow<'a, OsStr>) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.8.0sourceimpl<'a> PartialEq<Cow<'a, Path>> for OsString
sourcefn eq(&self, other: &Cow<'a, Path>) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.8.0sourceimpl<'a, 'b> PartialEq<OsStr> for OsString
sourcefn eq(&self, other: &OsStr) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.8.0sourceimpl<'a, 'b> PartialEq<OsString> for &'a OsStr
sourcefn eq(&self, other: &OsString) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.8.0sourceimpl<'a> PartialEq<OsString> for &'a Path
sourcefn eq(&self, other: &OsString) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.29.0sourceimpl<'a> PartialEq<OsString> for &'a str
sourcefn eq(&self, other: &OsString) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.8.0sourceimpl<'a, 'b> PartialEq<OsString> for Cow<'a, OsStr>
sourcefn eq(&self, other: &OsString) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.8.0sourceimpl<'a> PartialEq<OsString> for Cow<'a, Path>
sourcefn eq(&self, other: &OsString) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.8.0sourceimpl<'a, 'b> PartialEq<OsString> for OsStr
sourcefn eq(&self, other: &OsString) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.8.0sourceimpl PartialEq<OsString> for Path
sourcefn eq(&self, other: &OsString) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.8.0sourceimpl PartialEq<OsString> for PathBuf
sourcefn eq(&self, other: &OsString) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.0.0sourceimpl PartialEq<OsString> for str
sourcefn eq(&self, other: &OsString) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.8.0sourceimpl PartialEq<Path> for OsString
sourcefn eq(&self, other: &Path) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.8.0sourceimpl PartialEq<PathBuf> for OsString
sourcefn eq(&self, other: &PathBuf) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.0.0sourceimpl PartialEq<str> for OsString
sourcefn eq(&self, other: &str) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.0.0sourceimpl PartialEq for OsString
sourcefn eq(&self, other: &OsString) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.8.0sourceimpl<'a, 'b> PartialOrd<&'a OsStr> for OsString
sourcefn partial_cmp(&self, other: &&'a OsStr) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
1.0.0sourcefn lt(&self, other: &Rhs) -> boolTests less than (for self and other) and is used by the < operator. Read more
1.0.0sourcefn le(&self, other: &Rhs) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
1.0.0sourcefn gt(&self, other: &Rhs) -> boolTests greater than (for self and other) and is used by the > operator. Read more
1.0.0sourcefn ge(&self, other: &Rhs) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

1.8.0sourceimpl<'a> PartialOrd<&'a Path> for OsString
sourcefn partial_cmp(&self, other: &&'a Path) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
1.0.0sourcefn lt(&self, other: &Rhs) -> boolTests less than (for self and other) and is used by the < operator. Read more
1.0.0sourcefn le(&self, other: &Rhs) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
1.0.0sourcefn gt(&self, other: &Rhs) -> boolTests greater than (for self and other) and is used by the > operator. Read more
1.0.0sourcefn ge(&self, other: &Rhs) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

1.8.0sourceimpl<'a, 'b> PartialOrd<Cow<'a, OsStr>> for OsString
sourcefn partial_cmp(&self, other: &Cow<'a, OsStr>) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
1.0.0sourcefn lt(&self, other: &Rhs) -> boolTests less than (for self and other) and is used by the < operator. Read more
1.0.0sourcefn le(&self, other: &Rhs) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
1.0.0sourcefn gt(&self, other: &Rhs) -> boolTests greater than (for self and other) and is used by the > operator. Read more
1.0.0sourcefn ge(&self, other: &Rhs) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

1.8.0sourceimpl<'a> PartialOrd<Cow<'a, Path>> for OsString
sourcefn partial_cmp(&self, other: &Cow<'a, Path>) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
1.0.0sourcefn lt(&self, other: &Rhs) -> boolTests less than (for self and other) and is used by the < operator. Read more
1.0.0sourcefn le(&self, other: &Rhs) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
1.0.0sourcefn gt(&self, other: &Rhs) -> boolTests greater than (for self and other) and is used by the > operator. Read more
1.0.0sourcefn ge(&self, other: &Rhs) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

1.8.0sourceimpl<'a, 'b> PartialOrd<OsStr> for OsString
sourcefn partial_cmp(&self, other: &OsStr) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
1.0.0sourcefn lt(&self, other: &Rhs) -> boolTests less than (for self and other) and is used by the < operator. Read more
1.0.0sourcefn le(&self, other: &Rhs) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
1.0.0sourcefn gt(&self, other: &Rhs) -> boolTests greater than (for self and other) and is used by the > operator. Read more
1.0.0sourcefn ge(&self, other: &Rhs) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

1.8.0sourceimpl<'a, 'b> PartialOrd<OsString> for &'a OsStr
sourcefn partial_cmp(&self, other: &OsString) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
1.0.0sourcefn lt(&self, other: &Rhs) -> boolTests less than (for self and other) and is used by the < operator. Read more
1.0.0sourcefn le(&self, other: &Rhs) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
1.0.0sourcefn gt(&self, other: &Rhs) -> boolTests greater than (for self and other) and is used by the > operator. Read more
1.0.0sourcefn ge(&self, other: &Rhs) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

1.8.0sourceimpl<'a> PartialOrd<OsString> for &'a Path
sourcefn partial_cmp(&self, other: &OsString) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
1.0.0sourcefn lt(&self, other: &Rhs) -> boolTests less than (for self and other) and is used by the < operator. Read more
1.0.0sourcefn le(&self, other: &Rhs) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
1.0.0sourcefn gt(&self, other: &Rhs) -> boolTests greater than (for self and other) and is used by the > operator. Read more
1.0.0sourcefn ge(&self, other: &Rhs) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

1.8.0sourceimpl<'a, 'b> PartialOrd<OsString> for Cow<'a, OsStr>
sourcefn partial_cmp(&self, other: &OsString) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
1.0.0sourcefn lt(&self, other: &Rhs) -> boolTests less than (for self and other) and is used by the < operator. Read more
1.0.0sourcefn le(&self, other: &Rhs) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
1.0.0sourcefn gt(&self, other: &Rhs) -> boolTests greater than (for self and other) and is used by the > operator. Read more
1.0.0sourcefn ge(&self, other: &Rhs) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

1.8.0sourceimpl<'a> PartialOrd<OsString> for Cow<'a, Path>
sourcefn partial_cmp(&self, other: &OsString) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
1.0.0sourcefn lt(&self, other: &Rhs) -> boolTests less than (for self and other) and is used by the < operator. Read more
1.0.0sourcefn le(&self, other: &Rhs) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
1.0.0sourcefn gt(&self, other: &Rhs) -> boolTests greater than (for self and other) and is used by the > operator. Read more
1.0.0sourcefn ge(&self, other: &Rhs) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

1.8.0sourceimpl<'a, 'b> PartialOrd<OsString> for OsStr
sourcefn partial_cmp(&self, other: &OsString) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
1.0.0sourcefn lt(&self, other: &Rhs) -> boolTests less than (for self and other) and is used by the < operator. Read more
1.0.0sourcefn le(&self, other: &Rhs) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
1.0.0sourcefn gt(&self, other: &Rhs) -> boolTests greater than (for self and other) and is used by the > operator. Read more
1.0.0sourcefn ge(&self, other: &Rhs) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

1.8.0sourceimpl PartialOrd<OsString> for Path
sourcefn partial_cmp(&self, other: &OsString) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
1.0.0sourcefn lt(&self, other: &Rhs) -> boolTests less than (for self and other) and is used by the < operator. Read more
1.0.0sourcefn le(&self, other: &Rhs) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
1.0.0sourcefn gt(&self, other: &Rhs) -> boolTests greater than (for self and other) and is used by the > operator. Read more
1.0.0sourcefn ge(&self, other: &Rhs) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

1.8.0sourceimpl PartialOrd<OsString> for PathBuf
sourcefn partial_cmp(&self, other: &OsString) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
1.0.0sourcefn lt(&self, other: &Rhs) -> boolTests less than (for self and other) and is used by the < operator. Read more
1.0.0sourcefn le(&self, other: &Rhs) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
1.0.0sourcefn gt(&self, other: &Rhs) -> boolTests greater than (for self and other) and is used by the > operator. Read more
1.0.0sourcefn ge(&self, other: &Rhs) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

1.8.0sourceimpl PartialOrd<Path> for OsString
sourcefn partial_cmp(&self, other: &Path) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
1.0.0sourcefn lt(&self, other: &Rhs) -> boolTests less than (for self and other) and is used by the < operator. Read more
1.0.0sourcefn le(&self, other: &Rhs) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
1.0.0sourcefn gt(&self, other: &Rhs) -> boolTests greater than (for self and other) and is used by the > operator. Read more
1.0.0sourcefn ge(&self, other: &Rhs) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

1.8.0sourceimpl PartialOrd<PathBuf> for OsString
sourcefn partial_cmp(&self, other: &PathBuf) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
1.0.0sourcefn lt(&self, other: &Rhs) -> boolTests less than (for self and other) and is used by the < operator. Read more
1.0.0sourcefn le(&self, other: &Rhs) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
1.0.0sourcefn gt(&self, other: &Rhs) -> boolTests greater than (for self and other) and is used by the > operator. Read more
1.0.0sourcefn ge(&self, other: &Rhs) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

1.0.0sourceimpl PartialOrd<str> for OsString
sourcefn partial_cmp(&self, other: &str) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
1.0.0sourcefn lt(&self, other: &Rhs) -> boolTests less than (for self and other) and is used by the < operator. Read more
1.0.0sourcefn le(&self, other: &Rhs) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
1.0.0sourcefn gt(&self, other: &Rhs) -> boolTests greater than (for self and other) and is used by the > operator. Read more
1.0.0sourcefn ge(&self, other: &Rhs) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

1.0.0sourceimpl PartialOrd for OsString
sourcefn partial_cmp(&self, other: &OsString) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
sourcefn lt(&self, other: &OsString) -> boolTests less than (for self and other) and is used by the < operator. Read more
sourcefn le(&self, other: &OsString) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
sourcefn gt(&self, other: &OsString) -> boolTests greater than (for self and other) and is used by the > operator. Read more
sourcefn ge(&self, other: &OsString) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

1.64.0sourceimpl Write for OsString
sourcefn write_str(&mut self, s: &str) -> ResultWrites a string slice into this writer, returning whether the write succeeded. Read more
1.1.0sourcefn write_char(&mut self, c: char) -> Result<(), Error>Writes a char into this writer, returning whether the write succeeded. Read more
1.0.0sourcefn write_fmt(&mut self, args: Arguments<'_>) -> Result<(), Error>Glue for usage of the write! macro with implementors of this trait. Read more

1.0.0sourceimpl Eq for OsString
Auto Trait Implementations
impl Freeze for OsStringimpl RefUnwindSafe for OsStringimpl Send for OsStringimpl Sync for OsStringimpl Unpin for OsStringimpl UnwindSafe for OsString
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/ffi/os_str/struct.OsString.html


std/os/unix/raw/type.dev_t
-----------------------------------------------------------
Type Alias dev_t
pub type dev_t = u64;
ðŸ‘ŽDeprecated since 1.8.0: these type aliases are no longer supported by the standard library, the libc crate on crates.io should be used instead for the correct definitions
Available on Unix and Linux only.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/os/unix/raw/type.dev_t.html


std/intrinsics/fn.roundevenf64
-----------------------------------------------------------
Function roundevenf64
pub unsafe extern "rust-intrinsic" fn roundevenf64(x: f64) -> f64
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Returns the nearest integer to an f64. Rounds half-way cases to the number with an even least significant digit. This intrinsic does not have a stable counterpart.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.roundevenf64.html


std/ops/trait.bitxor
-----------------------------------------------------------
Trait BitXor
pub trait BitXor<Rhs = Self> {
    type Output;
    // Required method
    fn bitxor(self, rhs: Rhs) -> Self::Output;
}
The bitwise XOR operator ^. Note that Rhs is Self by default, but this is not mandatory. Examples An implementation of BitXor that lifts ^ to a wrapper around bool. use std::ops::BitXor;
#[derive(Debug, PartialEq)]
struct Scalar(bool);
impl BitXor for Scalar {
    type Output = Self;
    // rhs is the "right-hand side" of the expression `a ^ b`
    fn bitxor(self, rhs: Self) -> Self::Output {
        Self(self.0 ^ rhs.0)
    }
}
assert_eq!(Scalar(true) ^ Scalar(true), Scalar(false));
assert_eq!(Scalar(true) ^ Scalar(false), Scalar(true));
assert_eq!(Scalar(false) ^ Scalar(true), Scalar(true));
assert_eq!(Scalar(false) ^ Scalar(false), Scalar(false)); An implementation of BitXor trait for a wrapper around Vec<bool>. use std::ops::BitXor;
#[derive(Debug, PartialEq)]
struct BooleanVector(Vec<bool>);
impl BitXor for BooleanVector {
    type Output = Self;
    fn bitxor(self, Self(rhs): Self) -> Self::Output {
        let Self(lhs) = self;
        assert_eq!(lhs.len(), rhs.len());
        Self(
            lhs.iter()
                .zip(rhs.iter())
                .map(|(x, y)| *x ^ *y)
                .collect()
        )
    }
}
let bv1 = BooleanVector(vec![true, true, false, false]);
let bv2 = BooleanVector(vec![true, false, true, false]);
let expected = BooleanVector(vec![false, true, true, false]);
assert_eq!(bv1 ^ bv2, expected); Required Associated Types
1.0.0sourcetype Output
The resulting type after applying the ^ operator. 
Required Methods
1.0.0sourcefn bitxor(self, rhs: Rhs) -> Self::Output
Performs the ^ operation. Examples assert_eq!(true ^ false, true);
assert_eq!(true ^ true, false);
assert_eq!(5u8 ^ 1u8, 4);
assert_eq!(5u8 ^ 2u8, 7); 
Implementors
1.0.0sourceimpl BitXor for boolsourcetype Output = bool
1.0.0sourceimpl BitXor for i8sourcetype Output = i8
1.0.0sourceimpl BitXor for i16sourcetype Output = i16
1.0.0sourceimpl BitXor for i32sourcetype Output = i32
1.0.0sourceimpl BitXor for i64sourcetype Output = i64
1.0.0sourceimpl BitXor for i128sourcetype Output = i128
1.0.0sourceimpl BitXor for isizesourcetype Output = isize
1.0.0sourceimpl BitXor for u8sourcetype Output = u8
1.0.0sourceimpl BitXor for u16sourcetype Output = u16
1.0.0sourceimpl BitXor for u32sourcetype Output = u32
1.0.0sourceimpl BitXor for u64sourcetype Output = u64
1.0.0sourceimpl BitXor for u128sourcetype Output = u128
1.0.0sourceimpl BitXor for usizesourcetype Output = usize
1.74.0sourceimpl BitXor for Saturating<i8>sourcetype Output = Saturating<i8>
1.74.0sourceimpl BitXor for Saturating<i16>sourcetype Output = Saturating<i16>
1.74.0sourceimpl BitXor for Saturating<i32>sourcetype Output = Saturating<i32>
1.74.0sourceimpl BitXor for Saturating<i64>sourcetype Output = Saturating<i64>
1.74.0sourceimpl BitXor for Saturating<i128>sourcetype Output = Saturating<i128>
1.74.0sourceimpl BitXor for Saturating<isize>sourcetype Output = Saturating<isize>
1.74.0sourceimpl BitXor for Saturating<u8>sourcetype Output = Saturating<u8>
1.74.0sourceimpl BitXor for Saturating<u16>sourcetype Output = Saturating<u16>
1.74.0sourceimpl BitXor for Saturating<u32>sourcetype Output = Saturating<u32>
1.74.0sourceimpl BitXor for Saturating<u64>sourcetype Output = Saturating<u64>
1.74.0sourceimpl BitXor for Saturating<u128>sourcetype Output = Saturating<u128>
1.74.0sourceimpl BitXor for Saturating<usize>sourcetype Output = Saturating<usize>
1.0.0sourceimpl BitXor for Wrapping<i8>sourcetype Output = Wrapping<i8>
1.0.0sourceimpl BitXor for Wrapping<i16>sourcetype Output = Wrapping<i16>
1.0.0sourceimpl BitXor for Wrapping<i32>sourcetype Output = Wrapping<i32>
1.0.0sourceimpl BitXor for Wrapping<i64>sourcetype Output = Wrapping<i64>
1.0.0sourceimpl BitXor for Wrapping<i128>sourcetype Output = Wrapping<i128>
1.0.0sourceimpl BitXor for Wrapping<isize>sourcetype Output = Wrapping<isize>
1.0.0sourceimpl BitXor for Wrapping<u8>sourcetype Output = Wrapping<u8>
1.0.0sourceimpl BitXor for Wrapping<u16>sourcetype Output = Wrapping<u16>
1.0.0sourceimpl BitXor for Wrapping<u32>sourcetype Output = Wrapping<u32>
1.0.0sourceimpl BitXor for Wrapping<u64>sourcetype Output = Wrapping<u64>
1.0.0sourceimpl BitXor for Wrapping<u128>sourcetype Output = Wrapping<u128>
1.0.0sourceimpl BitXor for Wrapping<usize>sourcetype Output = Wrapping<usize>
1.0.0sourceimpl BitXor<&bool> for &boolsourcetype Output = <bool as BitXor>::Output
1.0.0sourceimpl BitXor<&bool> for boolsourcetype Output = <bool as BitXor>::Output
1.0.0sourceimpl BitXor<&i8> for &i8sourcetype Output = <i8 as BitXor>::Output
1.0.0sourceimpl BitXor<&i8> for i8sourcetype Output = <i8 as BitXor>::Output
1.0.0sourceimpl BitXor<&i16> for &i16sourcetype Output = <i16 as BitXor>::Output
1.0.0sourceimpl BitXor<&i16> for i16sourcetype Output = <i16 as BitXor>::Output
1.0.0sourceimpl BitXor<&i32> for &i32sourcetype Output = <i32 as BitXor>::Output
1.0.0sourceimpl BitXor<&i32> for i32sourcetype Output = <i32 as BitXor>::Output
1.0.0sourceimpl BitXor<&i64> for &i64sourcetype Output = <i64 as BitXor>::Output
1.0.0sourceimpl BitXor<&i64> for i64sourcetype Output = <i64 as BitXor>::Output
1.0.0sourceimpl BitXor<&i128> for &i128sourcetype Output = <i128 as BitXor>::Output
1.0.0sourceimpl BitXor<&i128> for i128sourcetype Output = <i128 as BitXor>::Output
1.0.0sourceimpl BitXor<&isize> for &isizesourcetype Output = <isize as BitXor>::Output
1.0.0sourceimpl BitXor<&isize> for isizesourcetype Output = <isize as BitXor>::Output
1.0.0sourceimpl BitXor<&u8> for &u8sourcetype Output = <u8 as BitXor>::Output
1.0.0sourceimpl BitXor<&u8> for u8sourcetype Output = <u8 as BitXor>::Output
1.0.0sourceimpl BitXor<&u16> for &u16sourcetype Output = <u16 as BitXor>::Output
1.0.0sourceimpl BitXor<&u16> for u16sourcetype Output = <u16 as BitXor>::Output
1.0.0sourceimpl BitXor<&u32> for &u32sourcetype Output = <u32 as BitXor>::Output
1.0.0sourceimpl BitXor<&u32> for u32sourcetype Output = <u32 as BitXor>::Output
1.0.0sourceimpl BitXor<&u64> for &u64sourcetype Output = <u64 as BitXor>::Output
1.0.0sourceimpl BitXor<&u64> for u64sourcetype Output = <u64 as BitXor>::Output
1.0.0sourceimpl BitXor<&u128> for &u128sourcetype Output = <u128 as BitXor>::Output
1.0.0sourceimpl BitXor<&u128> for u128sourcetype Output = <u128 as BitXor>::Output
1.0.0sourceimpl BitXor<&usize> for &usizesourcetype Output = <usize as BitXor>::Output
1.0.0sourceimpl BitXor<&usize> for usizesourcetype Output = <usize as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<i8>> for &Saturating<i8>sourcetype Output = <Saturating<i8> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<i8>> for Saturating<i8>sourcetype Output = <Saturating<i8> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<i16>> for &Saturating<i16>sourcetype Output = <Saturating<i16> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<i16>> for Saturating<i16>sourcetype Output = <Saturating<i16> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<i32>> for &Saturating<i32>sourcetype Output = <Saturating<i32> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<i32>> for Saturating<i32>sourcetype Output = <Saturating<i32> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<i64>> for &Saturating<i64>sourcetype Output = <Saturating<i64> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<i64>> for Saturating<i64>sourcetype Output = <Saturating<i64> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<i128>> for &Saturating<i128>sourcetype Output = <Saturating<i128> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<i128>> for Saturating<i128>sourcetype Output = <Saturating<i128> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<isize>> for &Saturating<isize>sourcetype Output = <Saturating<isize> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<isize>> for Saturating<isize>sourcetype Output = <Saturating<isize> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<u8>> for &Saturating<u8>sourcetype Output = <Saturating<u8> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<u8>> for Saturating<u8>sourcetype Output = <Saturating<u8> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<u16>> for &Saturating<u16>sourcetype Output = <Saturating<u16> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<u16>> for Saturating<u16>sourcetype Output = <Saturating<u16> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<u32>> for &Saturating<u32>sourcetype Output = <Saturating<u32> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<u32>> for Saturating<u32>sourcetype Output = <Saturating<u32> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<u64>> for &Saturating<u64>sourcetype Output = <Saturating<u64> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<u64>> for Saturating<u64>sourcetype Output = <Saturating<u64> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<u128>> for &Saturating<u128>sourcetype Output = <Saturating<u128> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<u128>> for Saturating<u128>sourcetype Output = <Saturating<u128> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<usize>> for &Saturating<usize>sourcetype Output = <Saturating<usize> as BitXor>::Output
1.74.0sourceimpl BitXor<&Saturating<usize>> for Saturating<usize>sourcetype Output = <Saturating<usize> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<i8>> for &Wrapping<i8>sourcetype Output = <Wrapping<i8> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<i8>> for Wrapping<i8>sourcetype Output = <Wrapping<i8> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<i16>> for &Wrapping<i16>sourcetype Output = <Wrapping<i16> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<i16>> for Wrapping<i16>sourcetype Output = <Wrapping<i16> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<i32>> for &Wrapping<i32>sourcetype Output = <Wrapping<i32> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<i32>> for Wrapping<i32>sourcetype Output = <Wrapping<i32> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<i64>> for &Wrapping<i64>sourcetype Output = <Wrapping<i64> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<i64>> for Wrapping<i64>sourcetype Output = <Wrapping<i64> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<i128>> for &Wrapping<i128>sourcetype Output = <Wrapping<i128> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<i128>> for Wrapping<i128>sourcetype Output = <Wrapping<i128> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<isize>> for &Wrapping<isize>sourcetype Output = <Wrapping<isize> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<isize>> for Wrapping<isize>sourcetype Output = <Wrapping<isize> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<u8>> for &Wrapping<u8>sourcetype Output = <Wrapping<u8> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<u8>> for Wrapping<u8>sourcetype Output = <Wrapping<u8> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<u16>> for &Wrapping<u16>sourcetype Output = <Wrapping<u16> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<u16>> for Wrapping<u16>sourcetype Output = <Wrapping<u16> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<u32>> for &Wrapping<u32>sourcetype Output = <Wrapping<u32> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<u32>> for Wrapping<u32>sourcetype Output = <Wrapping<u32> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<u64>> for &Wrapping<u64>sourcetype Output = <Wrapping<u64> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<u64>> for Wrapping<u64>sourcetype Output = <Wrapping<u64> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<u128>> for &Wrapping<u128>sourcetype Output = <Wrapping<u128> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<u128>> for Wrapping<u128>sourcetype Output = <Wrapping<u128> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<usize>> for &Wrapping<usize>sourcetype Output = <Wrapping<usize> as BitXor>::Output
1.14.0sourceimpl BitXor<&Wrapping<usize>> for Wrapping<usize>sourcetype Output = <Wrapping<usize> as BitXor>::Output
1.0.0sourceimpl<'a> BitXor<bool> for &'a boolsourcetype Output = <bool as BitXor>::Output
1.0.0sourceimpl<'a> BitXor<i8> for &'a i8sourcetype Output = <i8 as BitXor>::Output
1.0.0sourceimpl<'a> BitXor<i16> for &'a i16sourcetype Output = <i16 as BitXor>::Output
1.0.0sourceimpl<'a> BitXor<i32> for &'a i32sourcetype Output = <i32 as BitXor>::Output
1.0.0sourceimpl<'a> BitXor<i64> for &'a i64sourcetype Output = <i64 as BitXor>::Output
1.0.0sourceimpl<'a> BitXor<i128> for &'a i128sourcetype Output = <i128 as BitXor>::Output
1.0.0sourceimpl<'a> BitXor<isize> for &'a isizesourcetype Output = <isize as BitXor>::Output
1.0.0sourceimpl<'a> BitXor<u8> for &'a u8sourcetype Output = <u8 as BitXor>::Output
1.0.0sourceimpl<'a> BitXor<u16> for &'a u16sourcetype Output = <u16 as BitXor>::Output
1.0.0sourceimpl<'a> BitXor<u32> for &'a u32sourcetype Output = <u32 as BitXor>::Output
1.0.0sourceimpl<'a> BitXor<u64> for &'a u64sourcetype Output = <u64 as BitXor>::Output
1.0.0sourceimpl<'a> BitXor<u128> for &'a u128sourcetype Output = <u128 as BitXor>::Output
1.0.0sourceimpl<'a> BitXor<usize> for &'a usizesourcetype Output = <usize as BitXor>::Output
1.74.0sourceimpl<'a> BitXor<Saturating<i8>> for &'a Saturating<i8>sourcetype Output = <Saturating<i8> as BitXor>::Output
1.74.0sourceimpl<'a> BitXor<Saturating<i16>> for &'a Saturating<i16>sourcetype Output = <Saturating<i16> as BitXor>::Output
1.74.0sourceimpl<'a> BitXor<Saturating<i32>> for &'a Saturating<i32>sourcetype Output = <Saturating<i32> as BitXor>::Output
1.74.0sourceimpl<'a> BitXor<Saturating<i64>> for &'a Saturating<i64>sourcetype Output = <Saturating<i64> as BitXor>::Output
1.74.0sourceimpl<'a> BitXor<Saturating<i128>> for &'a Saturating<i128>sourcetype Output = <Saturating<i128> as BitXor>::Output
1.74.0sourceimpl<'a> BitXor<Saturating<isize>> for &'a Saturating<isize>sourcetype Output = <Saturating<isize> as BitXor>::Output
1.74.0sourceimpl<'a> BitXor<Saturating<u8>> for &'a Saturating<u8>sourcetype Output = <Saturating<u8> as BitXor>::Output
1.74.0sourceimpl<'a> BitXor<Saturating<u16>> for &'a Saturating<u16>sourcetype Output = <Saturating<u16> as BitXor>::Output
1.74.0sourceimpl<'a> BitXor<Saturating<u32>> for &'a Saturating<u32>sourcetype Output = <Saturating<u32> as BitXor>::Output
1.74.0sourceimpl<'a> BitXor<Saturating<u64>> for &'a Saturating<u64>sourcetype Output = <Saturating<u64> as BitXor>::Output
1.74.0sourceimpl<'a> BitXor<Saturating<u128>> for &'a Saturating<u128>sourcetype Output = <Saturating<u128> as BitXor>::Output
1.74.0sourceimpl<'a> BitXor<Saturating<usize>> for &'a Saturating<usize>sourcetype Output = <Saturating<usize> as BitXor>::Output
1.14.0sourceimpl<'a> BitXor<Wrapping<i8>> for &'a Wrapping<i8>sourcetype Output = <Wrapping<i8> as BitXor>::Output
1.14.0sourceimpl<'a> BitXor<Wrapping<i16>> for &'a Wrapping<i16>sourcetype Output = <Wrapping<i16> as BitXor>::Output
1.14.0sourceimpl<'a> BitXor<Wrapping<i32>> for &'a Wrapping<i32>sourcetype Output = <Wrapping<i32> as BitXor>::Output
1.14.0sourceimpl<'a> BitXor<Wrapping<i64>> for &'a Wrapping<i64>sourcetype Output = <Wrapping<i64> as BitXor>::Output
1.14.0sourceimpl<'a> BitXor<Wrapping<i128>> for &'a Wrapping<i128>sourcetype Output = <Wrapping<i128> as BitXor>::Output
1.14.0sourceimpl<'a> BitXor<Wrapping<isize>> for &'a Wrapping<isize>sourcetype Output = <Wrapping<isize> as BitXor>::Output
1.14.0sourceimpl<'a> BitXor<Wrapping<u8>> for &'a Wrapping<u8>sourcetype Output = <Wrapping<u8> as BitXor>::Output
1.14.0sourceimpl<'a> BitXor<Wrapping<u16>> for &'a Wrapping<u16>sourcetype Output = <Wrapping<u16> as BitXor>::Output
1.14.0sourceimpl<'a> BitXor<Wrapping<u32>> for &'a Wrapping<u32>sourcetype Output = <Wrapping<u32> as BitXor>::Output
1.14.0sourceimpl<'a> BitXor<Wrapping<u64>> for &'a Wrapping<u64>sourcetype Output = <Wrapping<u64> as BitXor>::Output
1.14.0sourceimpl<'a> BitXor<Wrapping<u128>> for &'a Wrapping<u128>sourcetype Output = <Wrapping<u128> as BitXor>::Output
1.14.0sourceimpl<'a> BitXor<Wrapping<usize>> for &'a Wrapping<usize>sourcetype Output = <Wrapping<usize> as BitXor>::Output
sourceimpl<'lhs, 'rhs, T, const N: usize> BitXor<&'rhs Simd<T, N>> for &'lhs Simd<T, N>where
    T: SimdElement,
    Simd<T, N>: BitXor<Output = Simd<T, N>>,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<T, N>
1.0.0sourceimpl<T, A> BitXor<&BTreeSet<T, A>> for &BTreeSet<T, A>where
    T: Ord + Clone,
    A: Allocator + Clone,sourcetype Output = BTreeSet<T, A>
1.0.0sourceimpl<T, S> BitXor<&HashSet<T, S>> for &HashSet<T, S>where
    T: Eq + Hash + Clone,
    S: BuildHasher + Default,sourcetype Output = HashSet<T, S>
sourceimpl<T, const N: usize> BitXor for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Mask<T, N>
sourceimpl<T, const N: usize> BitXor<&Simd<T, N>> for Simd<T, N>where
    T: SimdElement,
    Simd<T, N>: BitXor<Output = Simd<T, N>>,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<T, N>
sourceimpl<T, const N: usize> BitXor<bool> for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Mask<T, N>
sourceimpl<T, const N: usize> BitXor<Mask<T, N>> for boolwhere
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Mask<T, N>
sourceimpl<T, const N: usize> BitXor<Simd<T, N>> for &Simd<T, N>where
    T: SimdElement,
    Simd<T, N>: BitXor<Output = Simd<T, N>>,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<T, N>
sourceimpl<const N: usize> BitXor for Simd<i8, N>where
    i8: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i8, N>
sourceimpl<const N: usize> BitXor for Simd<i16, N>where
    i16: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i16, N>
sourceimpl<const N: usize> BitXor for Simd<i32, N>where
    i32: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i32, N>
sourceimpl<const N: usize> BitXor for Simd<i64, N>where
    i64: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i64, N>
sourceimpl<const N: usize> BitXor for Simd<isize, N>where
    isize: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<isize, N>
sourceimpl<const N: usize> BitXor for Simd<u8, N>where
    u8: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u8, N>
sourceimpl<const N: usize> BitXor for Simd<u16, N>where
    u16: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u16, N>
sourceimpl<const N: usize> BitXor for Simd<u32, N>where
    u32: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u32, N>
sourceimpl<const N: usize> BitXor for Simd<u64, N>where
    u64: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u64, N>
sourceimpl<const N: usize> BitXor for Simd<usize, N>where
    usize: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<usize, N>

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/ops/trait.BitXor.html


std/process/struct.exitstatuserror
-----------------------------------------------------------
Struct ExitStatusError
pub struct ExitStatusError(/* private fields */);
ðŸ”¬This is a nightly-only experimental API. (exit_status_error #84908)
Describes the result of a process after it has failed Produced by the .exit_ok method on ExitStatus. Examples #![feature(exit_status_error)]
use std::process::{Command, ExitStatusError};
fn run(cmd: &str) -> Result<(),ExitStatusError> {
    Command::new(cmd).status().unwrap().exit_ok()?;
    Ok(())
}
run("true").unwrap();
run("false").unwrap_err(); Implementations
sourceimpl ExitStatusError
sourcepub fn code(&self) -> Option<i32>
ðŸ”¬This is a nightly-only experimental API. (exit_status_error #84908)
Reports the exit code, if applicable, from an ExitStatusError. In Unix terms the return value is the exit status: the value passed to exit, if the process finished by calling exit. Note that on Unix the exit status is truncated to 8 bits, and that values that didnâ€™t come from a programâ€™s call to exit may be invented by the runtime system (often, for example, 255, 254, 127 or 126). On Unix, this will return None if the process was terminated by a signal. If you want to handle such situations specially, consider using methods from ExitStatusExt. If the process finished by calling exit with a nonzero value, this will return that exit status. If the error was something else, it will return None. If the process exited successfully (ie, by calling exit(0)), there is no ExitStatusError. So the return value from ExitStatusError::code() is always nonzero. Examples #![feature(exit_status_error)]
use std::process::Command;
let bad = Command::new("false").status().unwrap().exit_ok().unwrap_err();
assert_eq!(bad.code(), Some(1)); 
sourcepub fn code_nonzero(&self) -> Option<NonZero<i32>>
ðŸ”¬This is a nightly-only experimental API. (exit_status_error #84908)
Reports the exit code, if applicable, from an ExitStatusError, as a NonZero. This is exactly like code(), except that it returns a NonZero<i32>. Plain code, returning a plain integer, is provided because it is often more convenient. The returned value from code() is indeed also nonzero; use code_nonzero() when you want a type-level guarantee of nonzeroness. Examples #![feature(exit_status_error)]
use std::num::NonZero;
use std::process::Command;
let bad = Command::new("false").status().unwrap().exit_ok().unwrap_err();
assert_eq!(bad.code_nonzero().unwrap(), NonZero::new(1).unwrap()); 
sourcepub fn into_status(&self) -> ExitStatus
ðŸ”¬This is a nightly-only experimental API. (exit_status_error #84908)
Converts an ExitStatusError (back) to an ExitStatus. 

Trait Implementations
sourceimpl Clone for ExitStatusError
sourcefn clone(&self) -> ExitStatusErrorReturns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

sourceimpl Debug for ExitStatusError
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

sourceimpl Display for ExitStatusError
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

sourceimpl Error for ExitStatusError
1.30.0sourcefn source(&self) -> Option<&(dyn Error + 'static)>Returns the lower-level source of this error, if any. Read more
1.0.0sourcefn description(&self) -> &str
ðŸ‘ŽDeprecated since 1.42.0: use the Display impl or to_string()
 Read more
1.0.0sourcefn cause(&self) -> Option<&dyn Error>
ðŸ‘ŽDeprecated since 1.33.0: replaced by Error::source, which can support downcasting
sourcefn provide<'a>(&'a self, request: &mut Request<'a>)
ðŸ”¬This is a nightly-only experimental API. (error_generic_member_access #99301)
Provides type-based access to context intended for error reports. Read more

sourceimpl ExitStatusExt for ExitStatusErrorAvailable on Unix only.
sourcefn from_raw(raw: i32) -> SelfCreates a new ExitStatus or ExitStatusError from the raw underlying integer status value from wait Read more
sourcefn signal(&self) -> Option<i32>If the process was terminated by a signal, returns that signal. Read more
sourcefn core_dumped(&self) -> boolIf the process was terminated by a signal, says whether it dumped core.
sourcefn stopped_signal(&self) -> Option<i32>If the process was stopped by a signal, returns that signal. Read more
sourcefn continued(&self) -> boolWhether the process was continued from a stopped status. Read more
sourcefn into_raw(self) -> i32Returns the underlying raw wait status. Read more

sourceimpl From<ExitStatusError> for ExitStatus
sourcefn from(error: ExitStatusError) -> SelfConverts to this type from the input type.
sourceimpl PartialEq for ExitStatusError
sourcefn eq(&self, other: &ExitStatusError) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
sourceimpl Copy for ExitStatusErrorsourceimpl Eq for ExitStatusErrorsourceimpl StructuralPartialEq for ExitStatusError
Auto Trait Implementations
impl Freeze for ExitStatusErrorimpl RefUnwindSafe for ExitStatusErrorimpl Send for ExitStatusErrorimpl Sync for ExitStatusErrorimpl Unpin for ExitStatusErrorimpl UnwindSafe for ExitStatusError
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T> ToString for Twhere
    T: Display + ?Sized,
sourcedefault fn to_string(&self) -> StringConverts the given value to a String. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/process/struct.ExitStatusError.html


std/simd/prelude/type.usizex64
-----------------------------------------------------------
Type Alias usizex64
pub type usizex64 = Simd<usize, 64>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with 64 elements of type usize. Aliased Type
struct usizex64(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/prelude/type.usizex64.html


std/intrinsics/fn.atomic_cxchg_seqcst_seqcst
-----------------------------------------------------------
Function atomic_cxchg_seqcst_seqcst
pub unsafe extern "rust-intrinsic" fn atomic_cxchg_seqcst_seqcst<T>(
    dst: *mut T,
    old: T,
    src: T,
) -> (T, bool)where
    T: Copy,
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Stores a value if the current value is the same as the old value. The stabilized version of this intrinsic is available on the atomic types via the compare_exchange method by passing Ordering::SeqCst as both the success and failure parameters. For example, AtomicBool::compare_exchange.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.atomic_cxchg_seqcst_seqcst.html


std/ops/trait.bitorassign
-----------------------------------------------------------
Trait BitOrAssign
pub trait BitOrAssign<Rhs = Self> {
    // Required method
    fn bitor_assign(&mut self, rhs: Rhs);
}
The bitwise OR assignment operator |=. Examples use std::ops::BitOrAssign;
#[derive(Debug, PartialEq)]
struct PersonalPreferences {
    likes_cats: bool,
    likes_dogs: bool,
}
impl BitOrAssign for PersonalPreferences {
    fn bitor_assign(&mut self, rhs: Self) {
        self.likes_cats |= rhs.likes_cats;
        self.likes_dogs |= rhs.likes_dogs;
    }
}
let mut prefs = PersonalPreferences { likes_cats: true, likes_dogs: false };
prefs |= PersonalPreferences { likes_cats: false, likes_dogs: true };
assert_eq!(prefs, PersonalPreferences { likes_cats: true, likes_dogs: true }); Required Methods
1.8.0sourcefn bitor_assign(&mut self, rhs: Rhs)
Performs the |= operation. Examples let mut x = true;
x |= false;
assert_eq!(x, true);
let mut x = false;
x |= false;
assert_eq!(x, false);
let mut x: u8 = 5;
x |= 1;
assert_eq!(x, 5);
let mut x: u8 = 5;
x |= 2;
assert_eq!(x, 7); 
Implementors
1.8.0sourceimpl BitOrAssign for bool1.8.0sourceimpl BitOrAssign for i81.8.0sourceimpl BitOrAssign for i161.8.0sourceimpl BitOrAssign for i321.8.0sourceimpl BitOrAssign for i641.8.0sourceimpl BitOrAssign for i1281.8.0sourceimpl BitOrAssign for isize1.8.0sourceimpl BitOrAssign for u81.8.0sourceimpl BitOrAssign for u161.8.0sourceimpl BitOrAssign for u321.8.0sourceimpl BitOrAssign for u641.8.0sourceimpl BitOrAssign for u1281.8.0sourceimpl BitOrAssign for usize1.75.0sourceimpl BitOrAssign for Ipv4Addr1.75.0sourceimpl BitOrAssign for Ipv6Addr1.74.0sourceimpl BitOrAssign for Saturating<i8>1.74.0sourceimpl BitOrAssign for Saturating<i16>1.74.0sourceimpl BitOrAssign for Saturating<i32>1.74.0sourceimpl BitOrAssign for Saturating<i64>1.74.0sourceimpl BitOrAssign for Saturating<i128>1.74.0sourceimpl BitOrAssign for Saturating<isize>1.74.0sourceimpl BitOrAssign for Saturating<u8>1.74.0sourceimpl BitOrAssign for Saturating<u16>1.74.0sourceimpl BitOrAssign for Saturating<u32>1.74.0sourceimpl BitOrAssign for Saturating<u64>1.74.0sourceimpl BitOrAssign for Saturating<u128>1.74.0sourceimpl BitOrAssign for Saturating<usize>1.8.0sourceimpl BitOrAssign for Wrapping<i8>1.8.0sourceimpl BitOrAssign for Wrapping<i16>1.8.0sourceimpl BitOrAssign for Wrapping<i32>1.8.0sourceimpl BitOrAssign for Wrapping<i64>1.8.0sourceimpl BitOrAssign for Wrapping<i128>1.8.0sourceimpl BitOrAssign for Wrapping<isize>1.8.0sourceimpl BitOrAssign for Wrapping<u8>1.8.0sourceimpl BitOrAssign for Wrapping<u16>1.8.0sourceimpl BitOrAssign for Wrapping<u32>1.8.0sourceimpl BitOrAssign for Wrapping<u64>1.8.0sourceimpl BitOrAssign for Wrapping<u128>1.8.0sourceimpl BitOrAssign for Wrapping<usize>1.22.0sourceimpl BitOrAssign<&bool> for bool1.22.0sourceimpl BitOrAssign<&i8> for i81.22.0sourceimpl BitOrAssign<&i8> for Saturating<i8>1.22.0sourceimpl BitOrAssign<&i8> for Wrapping<i8>1.22.0sourceimpl BitOrAssign<&i16> for i161.22.0sourceimpl BitOrAssign<&i16> for Saturating<i16>1.22.0sourceimpl BitOrAssign<&i16> for Wrapping<i16>1.22.0sourceimpl BitOrAssign<&i32> for i321.22.0sourceimpl BitOrAssign<&i32> for Saturating<i32>1.22.0sourceimpl BitOrAssign<&i32> for Wrapping<i32>1.22.0sourceimpl BitOrAssign<&i64> for i641.22.0sourceimpl BitOrAssign<&i64> for Saturating<i64>1.22.0sourceimpl BitOrAssign<&i64> for Wrapping<i64>1.22.0sourceimpl BitOrAssign<&i128> for i1281.22.0sourceimpl BitOrAssign<&i128> for Saturating<i128>1.22.0sourceimpl BitOrAssign<&i128> for Wrapping<i128>1.22.0sourceimpl BitOrAssign<&isize> for isize1.22.0sourceimpl BitOrAssign<&isize> for Saturating<isize>1.22.0sourceimpl BitOrAssign<&isize> for Wrapping<isize>1.22.0sourceimpl BitOrAssign<&u8> for u81.22.0sourceimpl BitOrAssign<&u8> for Saturating<u8>1.22.0sourceimpl BitOrAssign<&u8> for Wrapping<u8>1.22.0sourceimpl BitOrAssign<&u16> for u161.22.0sourceimpl BitOrAssign<&u16> for Saturating<u16>1.22.0sourceimpl BitOrAssign<&u16> for Wrapping<u16>1.22.0sourceimpl BitOrAssign<&u32> for u321.22.0sourceimpl BitOrAssign<&u32> for Saturating<u32>1.22.0sourceimpl BitOrAssign<&u32> for Wrapping<u32>1.22.0sourceimpl BitOrAssign<&u64> for u641.22.0sourceimpl BitOrAssign<&u64> for Saturating<u64>1.22.0sourceimpl BitOrAssign<&u64> for Wrapping<u64>1.22.0sourceimpl BitOrAssign<&u128> for u1281.22.0sourceimpl BitOrAssign<&u128> for Saturating<u128>1.22.0sourceimpl BitOrAssign<&u128> for Wrapping<u128>1.22.0sourceimpl BitOrAssign<&usize> for usize1.22.0sourceimpl BitOrAssign<&usize> for Saturating<usize>1.22.0sourceimpl BitOrAssign<&usize> for Wrapping<usize>1.75.0sourceimpl BitOrAssign<&Ipv4Addr> for Ipv4Addr1.75.0sourceimpl BitOrAssign<&Ipv6Addr> for Ipv6Addr1.22.0sourceimpl BitOrAssign<&Saturating<i8>> for Saturating<i8>1.22.0sourceimpl BitOrAssign<&Saturating<i16>> for Saturating<i16>1.22.0sourceimpl BitOrAssign<&Saturating<i32>> for Saturating<i32>1.22.0sourceimpl BitOrAssign<&Saturating<i64>> for Saturating<i64>1.22.0sourceimpl BitOrAssign<&Saturating<i128>> for Saturating<i128>1.22.0sourceimpl BitOrAssign<&Saturating<isize>> for Saturating<isize>1.22.0sourceimpl BitOrAssign<&Saturating<u8>> for Saturating<u8>1.22.0sourceimpl BitOrAssign<&Saturating<u16>> for Saturating<u16>1.22.0sourceimpl BitOrAssign<&Saturating<u32>> for Saturating<u32>1.22.0sourceimpl BitOrAssign<&Saturating<u64>> for Saturating<u64>1.22.0sourceimpl BitOrAssign<&Saturating<u128>> for Saturating<u128>1.22.0sourceimpl BitOrAssign<&Saturating<usize>> for Saturating<usize>1.22.0sourceimpl BitOrAssign<&Wrapping<i8>> for Wrapping<i8>1.22.0sourceimpl BitOrAssign<&Wrapping<i16>> for Wrapping<i16>1.22.0sourceimpl BitOrAssign<&Wrapping<i32>> for Wrapping<i32>1.22.0sourceimpl BitOrAssign<&Wrapping<i64>> for Wrapping<i64>1.22.0sourceimpl BitOrAssign<&Wrapping<i128>> for Wrapping<i128>1.22.0sourceimpl BitOrAssign<&Wrapping<isize>> for Wrapping<isize>1.22.0sourceimpl BitOrAssign<&Wrapping<u8>> for Wrapping<u8>1.22.0sourceimpl BitOrAssign<&Wrapping<u16>> for Wrapping<u16>1.22.0sourceimpl BitOrAssign<&Wrapping<u32>> for Wrapping<u32>1.22.0sourceimpl BitOrAssign<&Wrapping<u64>> for Wrapping<u64>1.22.0sourceimpl BitOrAssign<&Wrapping<u128>> for Wrapping<u128>1.22.0sourceimpl BitOrAssign<&Wrapping<usize>> for Wrapping<usize>1.74.0sourceimpl BitOrAssign<i8> for Saturating<i8>1.60.0sourceimpl BitOrAssign<i8> for Wrapping<i8>1.74.0sourceimpl BitOrAssign<i16> for Saturating<i16>1.60.0sourceimpl BitOrAssign<i16> for Wrapping<i16>1.74.0sourceimpl BitOrAssign<i32> for Saturating<i32>1.60.0sourceimpl BitOrAssign<i32> for Wrapping<i32>1.74.0sourceimpl BitOrAssign<i64> for Saturating<i64>1.60.0sourceimpl BitOrAssign<i64> for Wrapping<i64>1.74.0sourceimpl BitOrAssign<i128> for Saturating<i128>1.60.0sourceimpl BitOrAssign<i128> for Wrapping<i128>1.74.0sourceimpl BitOrAssign<isize> for Saturating<isize>1.60.0sourceimpl BitOrAssign<isize> for Wrapping<isize>1.74.0sourceimpl BitOrAssign<u8> for Saturating<u8>1.60.0sourceimpl BitOrAssign<u8> for Wrapping<u8>1.74.0sourceimpl BitOrAssign<u16> for Saturating<u16>1.60.0sourceimpl BitOrAssign<u16> for Wrapping<u16>1.74.0sourceimpl BitOrAssign<u32> for Saturating<u32>1.60.0sourceimpl BitOrAssign<u32> for Wrapping<u32>1.74.0sourceimpl BitOrAssign<u64> for Saturating<u64>1.60.0sourceimpl BitOrAssign<u64> for Wrapping<u64>1.74.0sourceimpl BitOrAssign<u128> for Saturating<u128>1.60.0sourceimpl BitOrAssign<u128> for Wrapping<u128>1.74.0sourceimpl BitOrAssign<usize> for Saturating<usize>1.60.0sourceimpl BitOrAssign<usize> for Wrapping<usize>1.45.0sourceimpl<T> BitOrAssign for NonZero<T>where
    T: ZeroablePrimitive,
    NonZero<T>: BitOr<Output = NonZero<T>>,1.45.0sourceimpl<T> BitOrAssign<T> for NonZero<T>where
    T: ZeroablePrimitive,
    NonZero<T>: BitOr<T, Output = NonZero<T>>,sourceimpl<T, U, const N: usize> BitOrAssign<U> for Simd<T, N>where
    Simd<T, N>: BitOr<U, Output = Simd<T, N>>,
    T: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourceimpl<T, const N: usize> BitOrAssign for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,sourceimpl<T, const N: usize> BitOrAssign<bool> for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/ops/trait.BitOrAssign.html


std/f64/constant.digits
-----------------------------------------------------------
Constant DIGITS
pub const DIGITS: u32 = f64::DIGITS; // 15u32
ðŸ‘ŽDeprecating in a future version: replaced by the DIGITS associated constant on f64
Approximate number of significant digits in base 10. Use f64::DIGITS instead. Examples // deprecated way
let d = std::f64::DIGITS;
// intended way
let d = f64::DIGITS;
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/f64/constant.DIGITS.html


std/simd/prelude/trait.simdint
-----------------------------------------------------------
Trait SimdInt
pub trait SimdInt: Copy + Sealed {
    type Mask;
    type Scalar;
    type Unsigned;
    type Cast<T: SimdElement>;
Show 22 methods    // Required methods
    fn cast<T>(self) -> Self::Cast<T>
       where T: SimdCast;
    fn saturating_add(self, second: Self) -> Self;
    fn saturating_sub(self, second: Self) -> Self;
    fn abs(self) -> Self;
    fn saturating_abs(self) -> Self;
    fn saturating_neg(self) -> Self;
    fn is_positive(self) -> Self::Mask;
    fn is_negative(self) -> Self::Mask;
    fn signum(self) -> Self;
    fn reduce_sum(self) -> Self::Scalar;
    fn reduce_product(self) -> Self::Scalar;
    fn reduce_max(self) -> Self::Scalar;
    fn reduce_min(self) -> Self::Scalar;
    fn reduce_and(self) -> Self::Scalar;
    fn reduce_or(self) -> Self::Scalar;
    fn reduce_xor(self) -> Self::Scalar;
    fn swap_bytes(self) -> Self;
    fn reverse_bits(self) -> Self;
    fn leading_zeros(self) -> Self::Unsigned;
    fn trailing_zeros(self) -> Self::Unsigned;
    fn leading_ones(self) -> Self::Unsigned;
    fn trailing_ones(self) -> Self::Unsigned;
}
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Operations on SIMD vectors of signed integers. Required Associated Types
sourcetype Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Mask type used for manipulating this SIMD vector type. 
sourcetype Scalar
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Scalar type contained by this SIMD vector type. 
sourcetype Unsigned
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector of unsigned integers with the same element size. 
sourcetype Cast<T: SimdElement>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with a different element type. 
Required Methods
sourcefn cast<T>(self) -> Self::Cast<T>where
    T: SimdCast,
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Performs elementwise conversion of this vectorâ€™s elements to another SIMD-valid type. This follows the semantics of Rustâ€™s as conversion for casting integers (wrapping to other integer types, and saturating to float types). 
sourcefn saturating_add(self, second: Self) -> Self
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Lanewise saturating add. Examples use core::i32::{MIN, MAX};
let x = Simd::from_array([MIN, 0, 1, MAX]);
let max = Simd::splat(MAX);
let unsat = x + max;
let sat = x.saturating_add(max);
assert_eq!(unsat, Simd::from_array([-1, MAX, MIN, -2]));
assert_eq!(sat, Simd::from_array([-1, MAX, MAX, MAX])); 
sourcefn saturating_sub(self, second: Self) -> Self
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Lanewise saturating subtract. Examples use core::i32::{MIN, MAX};
let x = Simd::from_array([MIN, -2, -1, MAX]);
let max = Simd::splat(MAX);
let unsat = x - max;
let sat = x.saturating_sub(max);
assert_eq!(unsat, Simd::from_array([1, MAX, MIN, 0]));
assert_eq!(sat, Simd::from_array([MIN, MIN, MIN, 0])); 
sourcefn abs(self) -> Self
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Lanewise absolute value, implemented in Rust. Every element becomes its absolute value. Examples use core::i32::{MIN, MAX};
let xs = Simd::from_array([MIN, MIN +1, -5, 0]);
assert_eq!(xs.abs(), Simd::from_array([MIN, MAX, 5, 0])); 
sourcefn saturating_abs(self) -> Self
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Lanewise saturating absolute value, implemented in Rust. As abs(), except the MIN value becomes MAX instead of itself. Examples use core::i32::{MIN, MAX};
let xs = Simd::from_array([MIN, -2, 0, 3]);
let unsat = xs.abs();
let sat = xs.saturating_abs();
assert_eq!(unsat, Simd::from_array([MIN, 2, 0, 3]));
assert_eq!(sat, Simd::from_array([MAX, 2, 0, 3])); 
sourcefn saturating_neg(self) -> Self
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Lanewise saturating negation, implemented in Rust. As neg(), except the MIN value becomes MAX instead of itself. Examples use core::i32::{MIN, MAX};
let x = Simd::from_array([MIN, -2, 3, MAX]);
let unsat = -x;
let sat = x.saturating_neg();
assert_eq!(unsat, Simd::from_array([MIN, 2, -3, MIN + 1]));
assert_eq!(sat, Simd::from_array([MAX, 2, -3, MIN + 1])); 
sourcefn is_positive(self) -> Self::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns true for each positive element and false if it is zero or negative. 
sourcefn is_negative(self) -> Self::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns true for each negative element and false if it is zero or positive. 
sourcefn signum(self) -> Self
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns numbers representing the sign of each element.  
0 if the number is zero 
1 if the number is positive 
-1 if the number is negative  
sourcefn reduce_sum(self) -> Self::Scalar
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the sum of the elements of the vector, with wrapping addition. Examples let v = i32x4::from_array([1, 2, 3, 4]);
assert_eq!(v.reduce_sum(), 10);
// SIMD integer addition is always wrapping
let v = i32x4::from_array([i32::MAX, 1, 0, 0]);
assert_eq!(v.reduce_sum(), i32::MIN); 
sourcefn reduce_product(self) -> Self::Scalar
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the product of the elements of the vector, with wrapping multiplication. Examples let v = i32x4::from_array([1, 2, 3, 4]);
assert_eq!(v.reduce_product(), 24);
// SIMD integer multiplication is always wrapping
let v = i32x4::from_array([i32::MAX, 2, 1, 1]);
assert!(v.reduce_product() < i32::MAX); 
sourcefn reduce_max(self) -> Self::Scalar
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the maximum element in the vector. Examples let v = i32x4::from_array([1, 2, 3, 4]);
assert_eq!(v.reduce_max(), 4); 
sourcefn reduce_min(self) -> Self::Scalar
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the minimum element in the vector. Examples let v = i32x4::from_array([1, 2, 3, 4]);
assert_eq!(v.reduce_min(), 1); 
sourcefn reduce_and(self) -> Self::Scalar
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the cumulative bitwise â€œandâ€ across the elements of the vector. 
sourcefn reduce_or(self) -> Self::Scalar
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the cumulative bitwise â€œorâ€ across the elements of the vector. 
sourcefn reduce_xor(self) -> Self::Scalar
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the cumulative bitwise â€œxorâ€ across the elements of the vector. 
sourcefn swap_bytes(self) -> Self
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Reverses the byte order of each element. 
sourcefn reverse_bits(self) -> Self
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Reverses the order of bits in each elemnent. The least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc. 
sourcefn leading_zeros(self) -> Self::Unsigned
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the number of leading zeros in the binary representation of each element. 
sourcefn trailing_zeros(self) -> Self::Unsigned
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the number of trailing zeros in the binary representation of each element. 
sourcefn leading_ones(self) -> Self::Unsigned
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the number of leading ones in the binary representation of each element. 
sourcefn trailing_ones(self) -> Self::Unsigned
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the number of trailing ones in the binary representation of each element. 
Object Safety
This trait is not object safe.
Implementors
sourceimpl<const N: usize> SimdInt for Simd<i8, N>where
    LaneCount<N>: SupportedLaneCount,
sourcetype Mask = Mask<<i8 as SimdElement>::Mask, N>sourcetype Scalar = i8sourcetype Unsigned = Simd<u8, N>sourcetype Cast<T: SimdElement> = Simd<T, N>
sourceimpl<const N: usize> SimdInt for Simd<i16, N>where
    LaneCount<N>: SupportedLaneCount,
sourcetype Mask = Mask<<i16 as SimdElement>::Mask, N>sourcetype Scalar = i16sourcetype Unsigned = Simd<u16, N>sourcetype Cast<T: SimdElement> = Simd<T, N>
sourceimpl<const N: usize> SimdInt for Simd<i32, N>where
    LaneCount<N>: SupportedLaneCount,
sourcetype Mask = Mask<<i32 as SimdElement>::Mask, N>sourcetype Scalar = i32sourcetype Unsigned = Simd<u32, N>sourcetype Cast<T: SimdElement> = Simd<T, N>
sourceimpl<const N: usize> SimdInt for Simd<i64, N>where
    LaneCount<N>: SupportedLaneCount,
sourcetype Mask = Mask<<i64 as SimdElement>::Mask, N>sourcetype Scalar = i64sourcetype Unsigned = Simd<u64, N>sourcetype Cast<T: SimdElement> = Simd<T, N>
sourceimpl<const N: usize> SimdInt for Simd<isize, N>where
    LaneCount<N>: SupportedLaneCount,
sourcetype Mask = Mask<<isize as SimdElement>::Mask, N>sourcetype Scalar = isizesourcetype Unsigned = Simd<usize, N>sourcetype Cast<T: SimdElement> = Simd<T, N>

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/prelude/trait.SimdInt.html


std/marker/struct.phantompinned
-----------------------------------------------------------
Struct PhantomPinned
pub struct PhantomPinned;
A marker type which does not implement Unpin. If a type contains a PhantomPinned, it will not implement Unpin by default. Trait Implementations
1.33.0sourceimpl Clone for PhantomPinned
sourcefn clone(&self) -> PhantomPinnedReturns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.33.0sourceimpl Debug for PhantomPinned
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.33.0sourceimpl Default for PhantomPinned
sourcefn default() -> PhantomPinnedReturns the â€œdefault valueâ€ for a type. Read more

1.33.0sourceimpl Hash for PhantomPinned
sourcefn hash<__H>(&self, state: &mut __H)where
    __H: Hasher,Feeds this value into the given Hasher. Read more
1.3.0sourcefn hash_slice<H>(data: &[Self], state: &mut H)where
    H: Hasher,
    Self: Sized,Feeds a slice of this type into the given Hasher. Read more

1.33.0sourceimpl Ord for PhantomPinned
sourcefn cmp(&self, other: &PhantomPinned) -> OrderingThis method returns an Ordering between self and other. Read more
1.21.0sourcefn max(self, other: Self) -> Selfwhere
    Self: Sized,Compares and returns the maximum of two values. Read more
1.21.0sourcefn min(self, other: Self) -> Selfwhere
    Self: Sized,Compares and returns the minimum of two values. Read more
1.50.0sourcefn clamp(self, min: Self, max: Self) -> Selfwhere
    Self: Sized,Restrict a value to a certain interval. Read more

1.33.0sourceimpl PartialEq for PhantomPinned
sourcefn eq(&self, other: &PhantomPinned) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.33.0sourceimpl PartialOrd for PhantomPinned
sourcefn partial_cmp(&self, other: &PhantomPinned) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
1.0.0sourcefn lt(&self, other: &Rhs) -> boolTests less than (for self and other) and is used by the < operator. Read more
1.0.0sourcefn le(&self, other: &Rhs) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
1.0.0sourcefn gt(&self, other: &Rhs) -> boolTests greater than (for self and other) and is used by the > operator. Read more
1.0.0sourcefn ge(&self, other: &Rhs) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

1.33.0sourceimpl Copy for PhantomPinned1.33.0sourceimpl Eq for PhantomPinned1.33.0sourceimpl StructuralPartialEq for PhantomPinned1.33.0sourceimpl !Unpin for PhantomPinned
Auto Trait Implementations
impl Freeze for PhantomPinnedimpl RefUnwindSafe for PhantomPinnedimpl Send for PhantomPinnedimpl Sync for PhantomPinnedimpl UnwindSafe for PhantomPinned
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/marker/struct.PhantomPinned.html


reference/expressions/block-expr
-----------------------------------------------------------
Block expressions  Syntax BlockExpression : { InnerAttribute* Statements? } Statements : Statement+ | Statement+ ExpressionWithoutBlock | ExpressionWithoutBlock  A block expression, or block, is a control flow expression and anonymous namespace scope for items and variable declarations. As a control flow expression, a block sequentially executes its component non-item declaration statements and then its final optional expression. As an anonymous namespace scope, item declarations are only in scope inside the block itself and variables declared by let statements are in scope from the next statement until the end of the block. See the scopes chapter for more details. The syntax for a block is {, then any inner attributes, then any number of statements, then an optional expression, called the final operand, and finally a }. Statements are usually required to be followed by a semicolon, with two exceptions:  Item declaration statements do not need to be followed by a semicolon. Expression statements usually require a following semicolon except if its outer expression is a flow control expression.  Furthermore, extra semicolons between statements are allowed, but these semicolons do not affect semantics. When evaluating a block expression, each statement, except for item declaration statements, is executed sequentially. Then the final operand is executed, if given. The type of a block is the type of the final operand, or () if the final operand is omitted. #![allow(unused)]
fn main() {
fn fn_call() {}
let _: () = {
    fn_call();
};
let five: i32 = {
    fn_call();
    5
};
assert_eq!(5, five);
}  Note: As a control flow expression, if a block expression is the outer expression of an expression statement, the expected type is () unless it is followed immediately by a semicolon.  Blocks are always value expressions and evaluate the last operand in value expression context.  Note: This can be used to force moving a value if really needed. For example, the following example fails on the call to consume_self because the struct was moved out of s in the block expression. #![allow(unused)]
fn main() {
struct Struct;
impl Struct {
    fn consume_self(self) {}
    fn borrow_self(&self) {}
}
fn move_by_block_expression() {
    let s = Struct;
    // Move the value out of `s` in the block expression.
    (&{ s }).borrow_self();
    // Fails to execute because `s` is moved out of.
    s.consume_self();
}
}  
async blocks  Syntax AsyncBlockExpression : async move? BlockExpression  An async block is a variant of a block expression which evaluates to a future. The final expression of the block, if present, determines the result value of the future. Executing an async block is similar to executing a closure expression: its immediate effect is to produce and return an anonymous type. Whereas closures return a type that implements one or more of the std::ops::Fn traits, however, the type returned for an async block implements the std::future::Future trait. The actual data format for this type is unspecified.  Note: The future type that rustc generates is roughly equivalent to an enum with one variant per await point, where each variant stores the data needed to resume from its corresponding point.   Edition differences: Async blocks are only available beginning with Rust 2018.  Capture modes Async blocks capture variables from their environment using the same capture modes as closures. Like closures, when written async { .. } the capture mode for each variable will be inferred from the content of the block. async move { .. } blocks however will move all referenced variables into the resulting future. Async context Because async blocks construct a future, they define an async context which can in turn contain await expressions. Async contexts are established by async blocks as well as the bodies of async functions, whose semantics are defined in terms of async blocks. Control-flow operators Async blocks act like a function boundary, much like closures. Therefore, the ? operator and return expressions both affect the output of the future, not the enclosing function or other context. That is, return <expr> from within an async block will return the result of <expr> as the output of the future. Similarly, if <expr>? propagates an error, that error is propagated as the result of the future. Finally, the break and continue keywords cannot be used to branch out from an async block. Therefore the following is illegal: #![allow(unused)]
fn main() {
loop {
    async move {
        break; // error[E0267]: `break` inside of an `async` block
    }
}
} 
const blocks  Syntax ConstBlockExpression : const BlockExpression  A const block is a variant of a block expression whose body evaluates at compile-time instead of at runtime. Const blocks allows you to define a constant value without having to define new constant items, and thus they are also sometimes referred as inline consts. It also supports type inference so there is no need to specify the type, unlike constant items. Const blocks have the ability to reference generic parameters in scope, unlike free constant items. They are desugared to constant items with generic parameters in scope (similar to associated constants, but without a trait or type they are associated with). For example, this code: #![allow(unused)]
fn main() {
fn foo<T>() -> usize {
    const { std::mem::size_of::<T>() + 1 }
}
} is equivalent to: #![allow(unused)]
fn main() {
fn foo<T>() -> usize {
    {
        struct Const<T>(T);
        impl<T> Const<T> {
            const CONST: usize = std::mem::size_of::<T>() + 1;
        }
        Const::<T>::CONST
    }
}
} If the const block expression is executed at runtime, then the constant is guaranteed to be evaluated, even if its return value is ignored: #![allow(unused)]
fn main() {
fn foo<T>() -> usize {
    // If this code ever gets executed, then the assertion has definitely
    // been evaluated at compile-time.
    const { assert!(std::mem::size_of::<T>() > 0); }
    // Here we can have unsafe code relying on the type being non-zero-sized.
    /* ... */
    42
}
} If the const block expression is not executed at runtime, it may or may not be evaluated: #![allow(unused)]
fn main() {
if false {
    // The panic may or may not occur when the program is built.
    const { panic!(); }
}
} 
unsafe blocks  Syntax UnsafeBlockExpression : unsafe BlockExpression  See unsafe blocks for more information on when to use unsafe. A block of code can be prefixed with the unsafe keyword to permit unsafe operations. Examples: #![allow(unused)]
fn main() {
unsafe {
    let b = [13u8, 17u8];
    let a = &b[0] as *const u8;
    assert_eq!(*a, 13);
    assert_eq!(*a.offset(1), 17);
}
unsafe fn an_unsafe_fn() -> i32 { 10 }
let a = unsafe { an_unsafe_fn() };
} Labelled block expressions Labelled block expressions are documented in the Loops and other breakable expressions section. Attributes on block expressions Inner attributes are allowed directly after the opening brace of a block expression in the following situations:  
Function and method bodies. Loop bodies (loop, while, while let, and for). Block expressions used as a statement. Block expressions as elements of array expressions, tuple expressions, call expressions, and tuple-style struct expressions. A block expression as the tail expression of another block expression.  The attributes that have meaning on a block expression are cfg and the lint check attributes. For example, this function returns true on unix platforms and false on other platforms. #![allow(unused)]
fn main() {
fn is_unix_platform() -> bool {
    #[cfg(unix)] { true }
    #[cfg(not(unix))] { false }
}
}
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/reference/expressions/block-expr.html


std/mem/trait.transmutefrom
-----------------------------------------------------------
Trait TransmuteFrom
pub unsafe trait TransmuteFrom<Src, const ASSUME: Assume = core::::mem::transmutability::TransmuteFrom::{constant#0}>where
    Src: ?Sized,{
    // Provided method
    unsafe fn transmute(src: Src) -> Self
       where Self: Sized { ... }
}
ðŸ”¬This is a nightly-only experimental API. (transmutability #99571)
Marks that Src is transmutable into Self. Implementation This trait cannot be implemented explicitly. It is implemented on-the-fly by the compiler for all types Src and Self such that, given a set of safety obligations on the programmer (see Assume), the compiler has proved that the bits of a value of type Src can be soundly reinterpreted as a Self. Safety If Dst: TransmuteFrom<Src, ASSUMPTIONS>, the compiler guarantees that Src is soundly union-transmutable into a value of type Dst, provided that the programmer has guaranteed that the given ASSUMPTIONS are satisfied. A union-transmute is any bit-reinterpretation conversion in the form of: pub unsafe fn transmute_via_union<Src, Dst>(src: Src) -> Dst {
    use core::mem::ManuallyDrop;
    #[repr(C)]
    union Transmute<Src, Dst> {
        src: ManuallyDrop<Src>,
        dst: ManuallyDrop<Dst>,
    }
    let transmute = Transmute {
        src: ManuallyDrop::new(src),
    };
    let dst = transmute.dst;
    ManuallyDrop::into_inner(dst)
} Note that this construction is more permissive than mem::transmute_copy; union-transmutes permit conversions that extend the bits of Src with trailing padding to fill trailing uninitialized bytes of Self; e.g.: #![feature(transmutability)]
use core::mem::{Assume, TransmuteFrom};
let src = 42u8; // size = 1
#[repr(C, align(2))]
struct Dst(u8); // size = 2
let _ = unsafe {
    <Dst as TransmuteFrom<u8, { Assume::SAFETY }>>::transmute(src)
}; Caveats
Portability Implementations of this trait do not provide any guarantee of portability across toolchains, targets or compilations. This trait may be implemented for certain combinations of Src, Self and ASSUME on some toolchains, targets or compilations, but not others. For example, if the layouts of Src or Self are non-deterministic, the presence or absence of an implementation of this trait may also be non-deterministic. Even if Src and Self have deterministic layouts (e.g., they are repr(C) structs), Rust does not specify the alignments of its primitive integer types, and layouts that involve these types may vary across toolchains, targets or compilations. Stability Implementations of this trait do not provide any guarantee of SemVer stability across the crate versions that define the Src and Self types. If SemVer stability is crucial to your application, you must consult the documentation of Src and Selfsâ€™ defining crates. Note that the presence of repr(C), alone, does not carry a safety invariant of SemVer stability. Furthermore, stability does not imply portability. For example, the size of usize is stable, but not portable. Provided Methods
sourceunsafe fn transmute(src: Src) -> Selfwhere
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (transmutability #99571)
Transmutes a Src value into a Self. Safety The safety obligations of the caller depend on the value of ASSUME:  If ASSUME.alignment, the caller must guarantee that the addresses of references in the returned Self satisfy the alignment requirements of their referent types. If ASSUME.lifetimes, the caller must guarantee that references in the returned Self will not outlive their referents. If ASSUME.safety, the returned value might not satisfy the library safety invariants of Self, and the caller must guarantee that undefined behavior does not arise from uses of the returned value. If ASSUME.validity, the caller must guarantee that src is a bit-valid instance of Self.  When satisfying the above obligations (if any), the caller must not assume that this trait provides any inherent guarantee of layout portability or stability. 
Implementors

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/mem/trait.TransmuteFrom.html


std/simd/type.masksizex64
-----------------------------------------------------------
Type Alias masksizex64
pub type masksizex64 = Mask<isize, 64>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD mask with 64 elements for vectors with pointer-sized element types. The layout of this type is unspecified, and may change between platforms and/or Rust versions, and code should not assume that it is equivalent to [isize; 64]. Aliased Type
struct masksizex64(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/type.masksizex64.html


std/task/struct.waker
-----------------------------------------------------------
Struct Waker
pub struct Waker { /* private fields */ }
A Waker is a handle for waking up a task by notifying its executor that it is ready to be run. This handle encapsulates a RawWaker instance, which defines the executor-specific wakeup behavior. The typical life of a Waker is that it is constructed by an executor, wrapped in a Context, then passed to Future::poll(). Then, if the future chooses to return Poll::Pending, it must also store the waker somehow and call Waker::wake() when the future should be polled again. Implements Clone, Send, and Sync; therefore, a waker may be invoked from any thread, including ones not in any way managed by the executor. For example, this might be done to wake a future when a blocking function call completes on another thread. Note that it is preferable to use waker.clone_from(&new_waker) instead of *waker = new_waker.clone(), as the former will avoid cloning the waker unnecessarily if the two wakers wake the same task. Constructing a Waker from a RawWaker is unsafe. Implementing the Wake trait is a safe alternative that requires memory allocation. Implementations
sourceimpl Waker
1.36.0sourcepub fn wake(self)
Wakes up the task associated with this Waker. As long as the executor keeps running and the task is not finished, it is guaranteed that each invocation of wake() (or wake_by_ref()) will be followed by at least one poll() of the task to which this Waker belongs. This makes it possible to temporarily yield to other tasks while running potentially unbounded processing loops. Note that the above implies that multiple wake-ups may be coalesced into a single poll() invocation by the runtime. Also note that yielding to competing tasks is not guaranteed: it is the executorâ€™s choice which task to run and the executor may choose to run the current task again. 
1.36.0sourcepub fn wake_by_ref(&self)
Wakes up the task associated with this Waker without consuming the Waker. This is similar to wake(), but may be slightly less efficient in the case where an owned Waker is available. This method should be preferred to calling waker.clone().wake(). 
1.36.0sourcepub fn will_wake(&self, other: &Waker) -> bool
Returns true if this Waker and another Waker would awake the same task. This function works on a best-effort basis, and may return false even when the Wakers would awaken the same task. However, if this function returns true, it is guaranteed that the Wakers will awaken the same task. This function is primarily used for optimization purposes â€” for example, this typeâ€™s clone_from implementation uses it to avoid cloning the waker when they would wake the same task anyway. 
1.83.0 (const: 1.83.0)sourcepub const unsafe fn new(
    data: *const (),
    vtable: &'static RawWakerVTable,
) -> Waker
Creates a new Waker from the provided data pointer and vtable. The data pointer can be used to store arbitrary data as required by the executor. This could be e.g. a type-erased pointer to an Arc that is associated with the task. The value of this pointer will get passed to all functions that are part of the vtable as the first parameter. It is important to consider that the data pointer must point to a thread safe type such as an Arc. The vtable customizes the behavior of a Waker. For each operation on the Waker, the associated function in the vtable will be called. Safety The behavior of the returned Waker is undefined if the contract defined in RawWakerVTableâ€™s documentation is not upheld. (Authors wishing to avoid unsafe code may implement the Wake trait instead, at the cost of a required heap allocation.) 
1.36.0 (const: 1.82.0)sourcepub const unsafe fn from_raw(waker: RawWaker) -> Waker
Creates a new Waker from RawWaker. Safety The behavior of the returned Waker is undefined if the contract defined in RawWakerâ€™s and RawWakerVTableâ€™s documentation is not upheld. (Authors wishing to avoid unsafe code may implement the Wake trait instead, at the cost of a required heap allocation.) 
sourcepub const fn noop() -> &'static Waker
ðŸ”¬This is a nightly-only experimental API. (noop_waker #98286)
Returns a reference to a Waker that does nothing when used. This is mostly useful for writing tests that need a Context to poll some futures, but are not expecting those futures to wake the waker or do not need to do anything specific if it happens. More generally, using Waker::noop() to poll a future means discarding the notification of when the future should be polled again. So it should only be used when such a notification will not be needed to make progress. If an owned Waker is needed, clone() this one. Examples #![feature(noop_waker)]
use std::future::Future;
use std::task;
let mut cx = task::Context::from_waker(task::Waker::noop());
let mut future = Box::pin(async { 10 });
assert_eq!(future.as_mut().poll(&mut cx), task::Poll::Ready(10)); 
1.83.0sourcepub fn data(&self) -> *const ()
Gets the data pointer used to create this Waker. 
1.83.0sourcepub fn vtable(&self) -> &'static RawWakerVTable
Gets the vtable pointer used to create this Waker. 

Trait Implementations
sourceimpl AsRef<LocalWaker> for Waker
sourcefn as_ref(&self) -> &LocalWakerConverts this type into a shared reference of the (usually inferred) input type.
1.36.0sourceimpl Clone for Waker
sourcefn clone_from(&mut self, source: &Waker)
Assigns a clone of source to self, unless self.will_wake(source) anyway. This method is preferred over simply assigning source.clone() to self, as it avoids cloning the waker if self is already the same waker. Examples use std::future::Future;
use std::pin::Pin;
use std::sync::{Arc, Mutex};
use std::task::{Context, Poll, Waker};
struct Waiter {
    shared: Arc<Mutex<Shared>>,
}
struct Shared {
    waker: Waker,
    // ...
}
impl Future for Waiter {
    type Output = ();
    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {
        let mut shared = self.shared.lock().unwrap();
        // update the waker
        shared.waker.clone_from(cx.waker());
        // readiness logic ...
    }
}
 
sourcefn clone(&self) -> WakerReturns a copy of the value. Read more

1.36.0sourceimpl Debug for Waker
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.36.0sourceimpl Drop for Waker
sourcefn drop(&mut self)Executes the destructor for this type. Read more

1.51.0sourceimpl<W> From<Arc<W>> for Wakerwhere
    W: Wake + Send + Sync + 'static,
sourcefn from(waker: Arc<W>) -> Waker
Use a Wake-able type as a Waker. No heap allocations or atomic operations are used for this conversion. 
1.36.0sourceimpl Send for Waker1.36.0sourceimpl Sync for Waker1.36.0sourceimpl Unpin for Waker
Auto Trait Implementations
impl Freeze for Wakerimpl RefUnwindSafe for Wakerimpl UnwindSafe for Waker
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/task/struct.Waker.html


std/intrinsics/fn.fsub_fast
-----------------------------------------------------------
Function fsub_fast
pub unsafe extern "rust-intrinsic" fn fsub_fast<T>(a: T, b: T) -> Twhere
    T: Copy,
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Float subtraction that allows optimizations based on algebraic rules. May assume inputs are finite. This intrinsic does not have a stable counterpart.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.fsub_fast.html


std/marker/derive.smartpointer
-----------------------------------------------------------
Derive Macro SmartPointer
#[derive(SmartPointer)]
ðŸ”¬This is a nightly-only experimental API. (derive_smart_pointer #123430)
Derive macro generating impls of traits related to smart pointers.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/marker/derive.SmartPointer.html


std/path/constant.main_separator
-----------------------------------------------------------
Constant MAIN_SEPARATOR
pub const MAIN_SEPARATOR: char = crate::sys::path::MAIN_SEP; // '/'
The primary separator of path components for the current platform. For example, / on Unix and \ on Windows.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/path/constant.MAIN_SEPARATOR.html


std/mem/fn.min_align_of_val
-----------------------------------------------------------
Function min_align_of_val
pub fn min_align_of_val<T>(val: &T) -> usizewhere
    T: ?Sized,
ðŸ‘ŽDeprecated since 1.2.0: use align_of_val instead
Returns the ABI-required minimum alignment of the type of the value that val points to in bytes. Every reference to a value of the type T must be a multiple of this number. Examples use std::mem;
assert_eq!(4, mem::min_align_of_val(&5i32));
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/mem/fn.min_align_of_val.html


std/alloc/fn.alloc
-----------------------------------------------------------
Function alloc
pub unsafe fn alloc(layout: Layout) -> *mut u8
Allocates memory with the global allocator. This function forwards calls to the GlobalAlloc::alloc method of the allocator registered with the #[global_allocator] attribute if there is one, or the std crateâ€™s default. This function is expected to be deprecated in favor of the alloc method of the Global type when it and the Allocator trait become stable. Safety See GlobalAlloc::alloc. Examples use std::alloc::{alloc, dealloc, handle_alloc_error, Layout};
unsafe {
    let layout = Layout::new::<u16>();
    let ptr = alloc(layout);
    if ptr.is_null() {
        handle_alloc_error(layout);
    }
    *(ptr as *mut u16) = 42;
    assert_eq!(*(ptr as *mut u16), 42);
    dealloc(ptr, layout);
}
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/alloc/fn.alloc.html


std/simd/type.u16x16
-----------------------------------------------------------
Type Alias u16x16
pub type u16x16 = Simd<u16, 16>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with 16 elements of type u16. Aliased Type
struct u16x16(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/type.u16x16.html


std/simd/prelude/type.i32x8
-----------------------------------------------------------
Type Alias i32x8
pub type i32x8 = Simd<i32, 8>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with eight elements of type i32. Aliased Type
struct i32x8(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/prelude/type.i32x8.html


std/sync/mpsc/struct.syncsender
-----------------------------------------------------------
Struct SyncSender
pub struct SyncSender<T> { /* private fields */ }
The sending-half of Rustâ€™s synchronous sync_channel type. Messages can be sent through this channel with send or try_send. send will block if there is no space in the internal buffer. Examples use std::sync::mpsc::sync_channel;
use std::thread;
// Create a sync_channel with buffer size 2
let (sync_sender, receiver) = sync_channel(2);
let sync_sender2 = sync_sender.clone();
// First thread owns sync_sender
thread::spawn(move || {
    sync_sender.send(1).unwrap();
    sync_sender.send(2).unwrap();
});
// Second thread owns sync_sender2
thread::spawn(move || {
    sync_sender2.send(3).unwrap();
    // thread will now block since the buffer is full
    println!("Thread unblocked!");
});
let mut msg;
msg = receiver.recv().unwrap();
println!("message {msg} received");
// "Thread unblocked!" will be printed now
msg = receiver.recv().unwrap();
println!("message {msg} received");
msg = receiver.recv().unwrap();
println!("message {msg} received"); Implementations
sourceimpl<T> SyncSender<T>
1.0.0sourcepub fn send(&self, t: T) -> Result<(), SendError<T>>
Sends a value on this synchronous channel. This function will block until space in the internal buffer becomes available or a receiver is available to hand off the message to. Note that a successful send does not guarantee that the receiver will ever see the data if there is a buffer on this channel. Items may be enqueued in the internal buffer for the receiver to receive at a later time. If the buffer size is 0, however, the channel becomes a rendezvous channel and it guarantees that the receiver has indeed received the data if this function returns success. This function will never panic, but it may return Err if the Receiver has disconnected and is no longer able to receive information. Examples use std::sync::mpsc::sync_channel;
use std::thread;
// Create a rendezvous sync_channel with buffer size 0
let (sync_sender, receiver) = sync_channel(0);
thread::spawn(move || {
   println!("sending message...");
   sync_sender.send(1).unwrap();
   // Thread is now blocked until the message is received
   println!("...message received!");
});
let msg = receiver.recv().unwrap();
assert_eq!(1, msg); 
1.0.0sourcepub fn try_send(&self, t: T) -> Result<(), TrySendError<T>>
Attempts to send a value on this channel without blocking. This method differs from send by returning immediately if the channelâ€™s buffer is full or no receiver is waiting to acquire some data. Compared with send, this function has two failure cases instead of one (one for disconnection, one for a full buffer). See send for notes about guarantees of whether the receiver has received the data or not if this function is successful. Examples use std::sync::mpsc::sync_channel;
use std::thread;
// Create a sync_channel with buffer size 1
let (sync_sender, receiver) = sync_channel(1);
let sync_sender2 = sync_sender.clone();
// First thread owns sync_sender
thread::spawn(move || {
    sync_sender.send(1).unwrap();
    sync_sender.send(2).unwrap();
    // Thread blocked
});
// Second thread owns sync_sender2
thread::spawn(move || {
    // This will return an error and send
    // no message if the buffer is full
    let _ = sync_sender2.try_send(3);
});
let mut msg;
msg = receiver.recv().unwrap();
println!("message {msg} received");
msg = receiver.recv().unwrap();
println!("message {msg} received");
// Third message may have never been sent
match receiver.try_recv() {
    Ok(msg) => println!("message {msg} received"),
    Err(_) => println!("the third message was never sent"),
} 

Trait Implementations
1.0.0sourceimpl<T> Clone for SyncSender<T>
sourcefn clone(&self) -> SyncSender<T>Returns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.8.0sourceimpl<T> Debug for SyncSender<T>
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

1.0.0sourceimpl<T: Send> Send for SyncSender<T>
Auto Trait Implementations
impl<T> Freeze for SyncSender<T>impl<T> RefUnwindSafe for SyncSender<T>impl<T> Sync for SyncSender<T>where
    T: Send,impl<T> Unpin for SyncSender<T>impl<T> UnwindSafe for SyncSender<T>
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/sync/mpsc/struct.SyncSender.html


std/intrinsics/fn.atomic_min_seqcst
-----------------------------------------------------------
Function atomic_min_seqcst
pub unsafe extern "rust-intrinsic" fn atomic_min_seqcst<T>(
    dst: *mut T,
    src: T,
) -> Twhere
    T: Copy,
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Minimum with the current value using a signed comparison. The stabilized version of this intrinsic is available on the atomic signed integer types via the fetch_min method by passing Ordering::SeqCst as the order. For example, AtomicI32::fetch_min.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.atomic_min_seqcst.html


std/intrinsics/mir/fn.offset
-----------------------------------------------------------
Function Offset
pub fn Offset<T, U>(ptr: T, count: U) -> T
ðŸ”¬This is a nightly-only experimental API. (custom_mir)

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/mir/fn.Offset.html


std/macro.format_args_nl
-----------------------------------------------------------
Macro format_args_nl
macro_rules! format_args_nl {
    ($fmt:expr) => { ... };
    ($fmt:expr, $($args:tt)*) => { ... };
}
ðŸ”¬This is a nightly-only experimental API. (format_args_nl)
Same as format_args, but adds a newline in the end.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/macro.format_args_nl.html


std/array/fn.repeat
-----------------------------------------------------------
Function repeat
pub fn repeat<T, const N: usize>(val: T) -> [T; N]where
    T: Clone,
ðŸ”¬This is a nightly-only experimental API. (array_repeat #126695)
Creates an array of type [T; N] by repeatedly cloning a value. This is the same as [val; N], but it also works for types that do not implement Copy. The provided value will be used as an element of the resulting array and will be cloned N - 1 times to fill up the rest. If N is zero, the value will be dropped. Example Creating multiple copies of a String: #![feature(array_repeat)]
use std::array;
let string = "Hello there!".to_string();
let strings = array::repeat(string);
assert_eq!(strings, ["Hello there!", "Hello there!"]);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/array/fn.repeat.html


std/simd/type.f64x8
-----------------------------------------------------------
Type Alias f64x8
pub type f64x8 = Simd<f64, 8>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with eight elements of type f64. Aliased Type
struct f64x8(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/type.f64x8.html


std/intrinsics/fn.maxnumf128
-----------------------------------------------------------
Function maxnumf128
pub extern "rust-intrinsic" fn maxnumf128(x: f128, y: f128) -> f128
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Returns the maximum of two f128 values. Note that, unlike most intrinsics, this is safe to call; it does not require an unsafe block. Therefore, implementations must not require the user to uphold any safety invariants. The stabilized version of this intrinsic is f128::max
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.maxnumf128.html


std/intrinsics/fn.atomic_cxchgweak_release_relaxed
-----------------------------------------------------------
Function atomic_cxchgweak_release_relaxed
pub unsafe extern "rust-intrinsic" fn atomic_cxchgweak_release_relaxed<T>(
    dst: *mut T,
    old: T,
    src: T,
) -> (T, bool)where
    T: Copy,
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Stores a value if the current value is the same as the old value. The stabilized version of this intrinsic is available on the atomic types via the compare_exchange_weak method by passing Ordering::Release and Ordering::Relaxed as the success and failure parameters. For example, AtomicBool::compare_exchange_weak.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.atomic_cxchgweak_release_relaxed.html


std/clone/derive.clone
-----------------------------------------------------------
Derive Macro Clone
#[derive(Clone)]
Derive macro generating an impl of the trait Clone.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/clone/derive.Clone.html


std/sync/struct.mappedrwlockwriteguard
-----------------------------------------------------------
Struct MappedRwLockWriteGuard
pub struct MappedRwLockWriteGuard<'a, T: ?Sized + 'a> { /* private fields */ }
ðŸ”¬This is a nightly-only experimental API. (mapped_lock_guards #117108)
RAII structure used to release the exclusive write access of a lock when dropped, which can point to a subfield of the protected data. This structure is created by the map and try_map methods on RwLockWriteGuard. Implementations
sourceimpl<'a, T: ?Sized> MappedRwLockWriteGuard<'a, T>
sourcepub fn map<U, F>(orig: Self, f: F) -> MappedRwLockWriteGuard<'a, U>where
    F: FnOnce(&mut T) -> &mut U,
    U: ?Sized,
ðŸ”¬This is a nightly-only experimental API. (mapped_lock_guards #117108)
Makes a MappedRwLockWriteGuard for a component of the borrowed data, e.g. an enum variant. The RwLock is already locked for writing, so this cannot fail. This is an associated function that needs to be used as MappedRwLockWriteGuard::map(...). A method would interfere with methods of the same name on the contents of the MappedRwLockWriteGuard used through Deref. Panics If the closure panics, the guard will be dropped (unlocked) and the RwLock will be poisoned. 
sourcepub fn try_map<U, F>(
    orig: Self,
    f: F,
) -> Result<MappedRwLockWriteGuard<'a, U>, Self>where
    F: FnOnce(&mut T) -> Option<&mut U>,
    U: ?Sized,
ðŸ”¬This is a nightly-only experimental API. (mapped_lock_guards #117108)
Makes a MappedRwLockWriteGuard for a component of the borrowed data. The original guard is returned as an Err(...) if the closure returns None. The RwLock is already locked for writing, so this cannot fail. This is an associated function that needs to be used as MappedRwLockWriteGuard::try_map(...). A method would interfere with methods of the same name on the contents of the MappedRwLockWriteGuard used through Deref. Panics If the closure panics, the guard will be dropped (unlocked) and the RwLock will be poisoned. 

Trait Implementations
sourceimpl<T: ?Sized + Debug> Debug for MappedRwLockWriteGuard<'_, T>
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

sourceimpl<T: ?Sized> Deref for MappedRwLockWriteGuard<'_, T>
sourcetype Target = TThe resulting type after dereferencing.
sourcefn deref(&self) -> &TDereferences the value.
sourceimpl<T: ?Sized> DerefMut for MappedRwLockWriteGuard<'_, T>
sourcefn deref_mut(&mut self) -> &mut TMutably dereferences the value.
sourceimpl<T: ?Sized + Display> Display for MappedRwLockWriteGuard<'_, T>
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

sourceimpl<T: ?Sized> Drop for MappedRwLockWriteGuard<'_, T>
sourcefn drop(&mut self)Executes the destructor for this type. Read more

sourceimpl<T: ?Sized> !Send for MappedRwLockWriteGuard<'_, T>sourceimpl<T: ?Sized + Sync> Sync for MappedRwLockWriteGuard<'_, T>
Auto Trait Implementations
impl<'a, T> Freeze for MappedRwLockWriteGuard<'a, T>where
    T: ?Sized,impl<'a, T> RefUnwindSafe for MappedRwLockWriteGuard<'a, T>where
    T: RefUnwindSafe + ?Sized,impl<'a, T> Unpin for MappedRwLockWriteGuard<'a, T>where
    T: ?Sized,impl<'a, T> !UnwindSafe for MappedRwLockWriteGuard<'a, T>
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToString for Twhere
    T: Display + ?Sized,
sourcedefault fn to_string(&self) -> StringConverts the given value to a String. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/sync/struct.MappedRwLockWriteGuard.html


std/simd/prelude/type.u8x1
-----------------------------------------------------------
Type Alias u8x1
pub type u8x1 = Simd<u8, 1>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with one element of type u8. Aliased Type
struct u8x1(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/prelude/type.u8x1.html


std/string/struct.fromutf8error
-----------------------------------------------------------
Struct FromUtf8Error
pub struct FromUtf8Error { /* private fields */ }
A possible error value when converting a String from a UTF-8 byte vector. This type is the error type for the from_utf8 method on String. It is designed in such a way to carefully avoid reallocations: the into_bytes method will give back the byte vector that was used in the conversion attempt. The Utf8Error type provided by std::str represents an error that may occur when converting a slice of u8s to a &str. In this sense, itâ€™s an analogue to FromUtf8Error, and you can get one from a FromUtf8Error through the utf8_error method. Examples // some invalid bytes, in a vector
let bytes = vec![0, 159];
let value = String::from_utf8(bytes);
assert!(value.is_err());
assert_eq!(vec![0, 159], value.unwrap_err().into_bytes()); Implementations
sourceimpl FromUtf8Error
1.26.0sourcepub fn as_bytes(&self) -> &[u8] â“˜
Returns a slice of u8s bytes that were attempted to convert to a String. Examples // some invalid bytes, in a vector
let bytes = vec![0, 159];
let value = String::from_utf8(bytes);
assert_eq!(&[0, 159], value.unwrap_err().as_bytes()); 
sourcepub fn into_utf8_lossy(self) -> String
ðŸ”¬This is a nightly-only experimental API. (string_from_utf8_lossy_owned #129436)
Converts the bytes into a String lossily, substituting invalid UTF-8 sequences with replacement characters. See String::from_utf8_lossy for more details on replacement of invalid sequences, and String::from_utf8_lossy_owned for the String function which corresponds to this function. Examples #![feature(string_from_utf8_lossy_owned)]
// some invalid bytes
let input: Vec<u8> = b"Hello \xF0\x90\x80World".into();
let output = String::from_utf8(input).unwrap_or_else(|e| e.into_utf8_lossy());
assert_eq!(String::from("Hello ï¿½World"), output); 
1.0.0sourcepub fn into_bytes(self) -> Vec<u8> â“˜
Returns the bytes that were attempted to convert to a String. This method is carefully constructed to avoid allocation. It will consume the error, moving out the bytes, so that a copy of the bytes does not need to be made. Examples // some invalid bytes, in a vector
let bytes = vec![0, 159];
let value = String::from_utf8(bytes);
assert_eq!(vec![0, 159], value.unwrap_err().into_bytes()); 
1.0.0sourcepub fn utf8_error(&self) -> Utf8Error
Fetch a Utf8Error to get more details about the conversion failure. The Utf8Error type provided by std::str represents an error that may occur when converting a slice of u8s to a &str. In this sense, itâ€™s an analogue to FromUtf8Error. See its documentation for more details on using it. Examples // some invalid bytes, in a vector
let bytes = vec![0, 159];
let error = String::from_utf8(bytes).unwrap_err().utf8_error();
// the first byte is invalid here
assert_eq!(1, error.valid_up_to()); 

Trait Implementations
1.0.0sourceimpl Clone for FromUtf8Error
sourcefn clone(&self) -> FromUtf8ErrorReturns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.0.0sourceimpl Debug for FromUtf8Error
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.0.0sourceimpl Display for FromUtf8Error
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.0.0sourceimpl Error for FromUtf8Error
sourcefn description(&self) -> &str
ðŸ‘ŽDeprecated since 1.42.0: use the Display impl or to_string()
 Read more
1.30.0sourcefn source(&self) -> Option<&(dyn Error + 'static)>Returns the lower-level source of this error, if any. Read more
1.0.0sourcefn cause(&self) -> Option<&dyn Error>
ðŸ‘ŽDeprecated since 1.33.0: replaced by Error::source, which can support downcasting
sourcefn provide<'a>(&'a self, request: &mut Request<'a>)
ðŸ”¬This is a nightly-only experimental API. (error_generic_member_access #99301)
Provides type-based access to context intended for error reports. Read more

1.0.0sourceimpl PartialEq for FromUtf8Error
sourcefn eq(&self, other: &FromUtf8Error) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.0.0sourceimpl Eq for FromUtf8Error1.0.0sourceimpl StructuralPartialEq for FromUtf8Error
Auto Trait Implementations
impl Freeze for FromUtf8Errorimpl RefUnwindSafe for FromUtf8Errorimpl Send for FromUtf8Errorimpl Sync for FromUtf8Errorimpl Unpin for FromUtf8Errorimpl UnwindSafe for FromUtf8Error
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T> ToString for Twhere
    T: Display + ?Sized,
sourcedefault fn to_string(&self) -> StringConverts the given value to a String. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/string/struct.FromUtf8Error.html


std/simd/type.isizex32
-----------------------------------------------------------
Type Alias isizex32
pub type isizex32 = Simd<isize, 32>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with 32 elements of type isize. Aliased Type
struct isizex32(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/type.isizex32.html


std/intrinsics/fn.fadd_algebraic
-----------------------------------------------------------
Function fadd_algebraic
pub extern "rust-intrinsic" fn fadd_algebraic<T>(a: T, b: T) -> Twhere
    T: Copy,
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Float addition that allows optimizations based on algebraic rules. This intrinsic does not have a stable counterpart.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.fadd_algebraic.html


std/iter/trait.trustedstep
-----------------------------------------------------------
Trait TrustedStep
pub unsafe trait TrustedStep: Step + Copy { }
ðŸ”¬This is a nightly-only experimental API. (trusted_step #85731)
A type that upholds all invariants of Step. The invariants of Step::steps_between() are a superset of the invariants of TrustedLen. As such, TrustedLen is implemented for all range types with the same generic type argument. Safety The implementation of Step for the given type must guarantee all invariants of all methods are upheld. See the Step traitâ€™s documentation for details. Consumers are free to rely on the invariants in unsafe code. Object Safety
This trait is not object safe.
Implementors
sourceimpl TrustedStep for AsciiCharsourceimpl TrustedStep for charsourceimpl TrustedStep for i8sourceimpl TrustedStep for i16sourceimpl TrustedStep for i32sourceimpl TrustedStep for i64sourceimpl TrustedStep for i128sourceimpl TrustedStep for isizesourceimpl TrustedStep for u8sourceimpl TrustedStep for u16sourceimpl TrustedStep for u32sourceimpl TrustedStep for u64sourceimpl TrustedStep for u128sourceimpl TrustedStep for usizesourceimpl TrustedStep for Ipv4Addrsourceimpl TrustedStep for Ipv6Addr

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/iter/trait.TrustedStep.html


std/char/struct.parsecharerror
-----------------------------------------------------------
Struct ParseCharError
pub struct ParseCharError { /* private fields */ }
An error which can be returned when parsing a char. This struct is created when using the char::from_str method. Trait Implementations
1.20.0sourceimpl Clone for ParseCharError
sourcefn clone(&self) -> ParseCharErrorReturns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.20.0sourceimpl Debug for ParseCharError
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.20.0sourceimpl Display for ParseCharError
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.20.0sourceimpl Error for ParseCharError
sourcefn description(&self) -> &str
ðŸ‘ŽDeprecated since 1.42.0: use the Display impl or to_string()
 Read more
1.30.0sourcefn source(&self) -> Option<&(dyn Error + 'static)>Returns the lower-level source of this error, if any. Read more
1.0.0sourcefn cause(&self) -> Option<&dyn Error>
ðŸ‘ŽDeprecated since 1.33.0: replaced by Error::source, which can support downcasting
sourcefn provide<'a>(&'a self, request: &mut Request<'a>)
ðŸ”¬This is a nightly-only experimental API. (error_generic_member_access #99301)
Provides type-based access to context intended for error reports. Read more

1.20.0sourceimpl PartialEq for ParseCharError
sourcefn eq(&self, other: &ParseCharError) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.20.0sourceimpl Eq for ParseCharError1.20.0sourceimpl StructuralPartialEq for ParseCharError
Auto Trait Implementations
impl Freeze for ParseCharErrorimpl RefUnwindSafe for ParseCharErrorimpl Send for ParseCharErrorimpl Sync for ParseCharErrorimpl Unpin for ParseCharErrorimpl UnwindSafe for ParseCharError
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T> ToString for Twhere
    T: Display + ?Sized,
sourcedefault fn to_string(&self) -> StringConverts the given value to a String. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/char/struct.ParseCharError.html


std/array/fn.from_ref
-----------------------------------------------------------
Function from_ref
pub const fn from_ref<T>(s: &T) -> &[T; 1]
Converts a reference to T into a reference to an array of length 1 (without copying).
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/array/fn.from_ref.html


std/ops/trait.div
-----------------------------------------------------------
Trait Div
pub trait Div<Rhs = Self> {
    type Output;
    // Required method
    fn div(self, rhs: Rhs) -> Self::Output;
}
The division operator /. Note that Rhs is Self by default, but this is not mandatory. Examples
Dividable rational numbers use std::ops::Div;
// By the fundamental theorem of arithmetic, rational numbers in lowest
// terms are unique. So, by keeping `Rational`s in reduced form, we can
// derive `Eq` and `PartialEq`.
#[derive(Debug, Eq, PartialEq)]
struct Rational {
    numerator: usize,
    denominator: usize,
}
impl Rational {
    fn new(numerator: usize, denominator: usize) -> Self {
        if denominator == 0 {
            panic!("Zero is an invalid denominator!");
        }
        // Reduce to lowest terms by dividing by the greatest common
        // divisor.
        let gcd = gcd(numerator, denominator);
        Self {
            numerator: numerator / gcd,
            denominator: denominator / gcd,
        }
    }
}
impl Div for Rational {
    // The division of rational numbers is a closed operation.
    type Output = Self;
    fn div(self, rhs: Self) -> Self::Output {
        if rhs.numerator == 0 {
            panic!("Cannot divide by zero-valued `Rational`!");
        }
        let numerator = self.numerator * rhs.denominator;
        let denominator = self.denominator * rhs.numerator;
        Self::new(numerator, denominator)
    }
}
// Euclid's two-thousand-year-old algorithm for finding the greatest common
// divisor.
fn gcd(x: usize, y: usize) -> usize {
    let mut x = x;
    let mut y = y;
    while y != 0 {
        let t = y;
        y = x % y;
        x = t;
    }
    x
}
assert_eq!(Rational::new(1, 2), Rational::new(2, 4));
assert_eq!(Rational::new(1, 2) / Rational::new(3, 4),
           Rational::new(2, 3)); Dividing vectors by scalars as in linear algebra use std::ops::Div;
struct Scalar { value: f32 }
#[derive(Debug, PartialEq)]
struct Vector { value: Vec<f32> }
impl Div<Scalar> for Vector {
    type Output = Self;
    fn div(self, rhs: Scalar) -> Self::Output {
        Self { value: self.value.iter().map(|v| v / rhs.value).collect() }
    }
}
let scalar = Scalar { value: 2f32 };
let vector = Vector { value: vec![2f32, 4f32, 6f32] };
assert_eq!(vector / scalar, Vector { value: vec![1f32, 2f32, 3f32] }); Required Associated Types
1.0.0sourcetype Output
The resulting type after applying the / operator. 
Required Methods
1.0.0sourcefn div(self, rhs: Rhs) -> Self::Output
Performs the / operation. Example assert_eq!(12 / 2, 6); 
Implementors
1.0.0sourceimpl Div for f16sourcetype Output = f16
1.0.0sourceimpl Div for f32sourcetype Output = f32
1.0.0sourceimpl Div for f64sourcetype Output = f64
1.0.0sourceimpl Div for f128sourcetype Output = f128
1.0.0sourceimpl Div for i8
This operation rounds towards zero, truncating any fractional part of the exact result. Panics This operation will panic if other == 0 or the division results in overflow. 
sourcetype Output = i8
1.0.0sourceimpl Div for i16
This operation rounds towards zero, truncating any fractional part of the exact result. Panics This operation will panic if other == 0 or the division results in overflow. 
sourcetype Output = i16
1.0.0sourceimpl Div for i32
This operation rounds towards zero, truncating any fractional part of the exact result. Panics This operation will panic if other == 0 or the division results in overflow. 
sourcetype Output = i32
1.0.0sourceimpl Div for i64
This operation rounds towards zero, truncating any fractional part of the exact result. Panics This operation will panic if other == 0 or the division results in overflow. 
sourcetype Output = i64
1.0.0sourceimpl Div for i128
This operation rounds towards zero, truncating any fractional part of the exact result. Panics This operation will panic if other == 0 or the division results in overflow. 
sourcetype Output = i128
1.0.0sourceimpl Div for isize
This operation rounds towards zero, truncating any fractional part of the exact result. Panics This operation will panic if other == 0 or the division results in overflow. 
sourcetype Output = isize
1.0.0sourceimpl Div for u8
This operation rounds towards zero, truncating any fractional part of the exact result. Panics This operation will panic if other == 0. 
sourcetype Output = u8
1.0.0sourceimpl Div for u16
This operation rounds towards zero, truncating any fractional part of the exact result. Panics This operation will panic if other == 0. 
sourcetype Output = u16
1.0.0sourceimpl Div for u32
This operation rounds towards zero, truncating any fractional part of the exact result. Panics This operation will panic if other == 0. 
sourcetype Output = u32
1.0.0sourceimpl Div for u64
This operation rounds towards zero, truncating any fractional part of the exact result. Panics This operation will panic if other == 0. 
sourcetype Output = u64
1.0.0sourceimpl Div for u128
This operation rounds towards zero, truncating any fractional part of the exact result. Panics This operation will panic if other == 0. 
sourcetype Output = u128
1.0.0sourceimpl Div for usize
This operation rounds towards zero, truncating any fractional part of the exact result. Panics This operation will panic if other == 0. 
sourcetype Output = usize
1.74.0sourceimpl Div for Saturating<i8>
Examples Basic usage: use std::num::Saturating;
assert_eq!(Saturating(2i8), Saturating(5i8) / Saturating(2));
assert_eq!(Saturating(i8::MAX), Saturating(i8::MAX) / Saturating(1));
assert_eq!(Saturating(i8::MIN), Saturating(i8::MIN) / Saturating(1)); â“˜use std::num::Saturating;
let _ = Saturating(0i8) / Saturating(0);
 
sourcetype Output = Saturating<i8>
1.74.0sourceimpl Div for Saturating<i16>
Examples Basic usage: use std::num::Saturating;
assert_eq!(Saturating(2i16), Saturating(5i16) / Saturating(2));
assert_eq!(Saturating(i16::MAX), Saturating(i16::MAX) / Saturating(1));
assert_eq!(Saturating(i16::MIN), Saturating(i16::MIN) / Saturating(1)); â“˜use std::num::Saturating;
let _ = Saturating(0i16) / Saturating(0);
 
sourcetype Output = Saturating<i16>
1.74.0sourceimpl Div for Saturating<i32>
Examples Basic usage: use std::num::Saturating;
assert_eq!(Saturating(2i32), Saturating(5i32) / Saturating(2));
assert_eq!(Saturating(i32::MAX), Saturating(i32::MAX) / Saturating(1));
assert_eq!(Saturating(i32::MIN), Saturating(i32::MIN) / Saturating(1)); â“˜use std::num::Saturating;
let _ = Saturating(0i32) / Saturating(0);
 
sourcetype Output = Saturating<i32>
1.74.0sourceimpl Div for Saturating<i64>
Examples Basic usage: use std::num::Saturating;
assert_eq!(Saturating(2i64), Saturating(5i64) / Saturating(2));
assert_eq!(Saturating(i64::MAX), Saturating(i64::MAX) / Saturating(1));
assert_eq!(Saturating(i64::MIN), Saturating(i64::MIN) / Saturating(1)); â“˜use std::num::Saturating;
let _ = Saturating(0i64) / Saturating(0);
 
sourcetype Output = Saturating<i64>
1.74.0sourceimpl Div for Saturating<i128>
Examples Basic usage: use std::num::Saturating;
assert_eq!(Saturating(2i128), Saturating(5i128) / Saturating(2));
assert_eq!(Saturating(i128::MAX), Saturating(i128::MAX) / Saturating(1));
assert_eq!(Saturating(i128::MIN), Saturating(i128::MIN) / Saturating(1)); â“˜use std::num::Saturating;
let _ = Saturating(0i128) / Saturating(0);
 
sourcetype Output = Saturating<i128>
1.74.0sourceimpl Div for Saturating<isize>
Examples Basic usage: use std::num::Saturating;
assert_eq!(Saturating(2isize), Saturating(5isize) / Saturating(2));
assert_eq!(Saturating(isize::MAX), Saturating(isize::MAX) / Saturating(1));
assert_eq!(Saturating(isize::MIN), Saturating(isize::MIN) / Saturating(1)); â“˜use std::num::Saturating;
let _ = Saturating(0isize) / Saturating(0);
 
sourcetype Output = Saturating<isize>
1.74.0sourceimpl Div for Saturating<u8>
Examples Basic usage: use std::num::Saturating;
assert_eq!(Saturating(2u8), Saturating(5u8) / Saturating(2));
assert_eq!(Saturating(u8::MAX), Saturating(u8::MAX) / Saturating(1));
assert_eq!(Saturating(u8::MIN), Saturating(u8::MIN) / Saturating(1)); â“˜use std::num::Saturating;
let _ = Saturating(0u8) / Saturating(0);
 
sourcetype Output = Saturating<u8>
1.74.0sourceimpl Div for Saturating<u16>
Examples Basic usage: use std::num::Saturating;
assert_eq!(Saturating(2u16), Saturating(5u16) / Saturating(2));
assert_eq!(Saturating(u16::MAX), Saturating(u16::MAX) / Saturating(1));
assert_eq!(Saturating(u16::MIN), Saturating(u16::MIN) / Saturating(1)); â“˜use std::num::Saturating;
let _ = Saturating(0u16) / Saturating(0);
 
sourcetype Output = Saturating<u16>
1.74.0sourceimpl Div for Saturating<u32>
Examples Basic usage: use std::num::Saturating;
assert_eq!(Saturating(2u32), Saturating(5u32) / Saturating(2));
assert_eq!(Saturating(u32::MAX), Saturating(u32::MAX) / Saturating(1));
assert_eq!(Saturating(u32::MIN), Saturating(u32::MIN) / Saturating(1)); â“˜use std::num::Saturating;
let _ = Saturating(0u32) / Saturating(0);
 
sourcetype Output = Saturating<u32>
1.74.0sourceimpl Div for Saturating<u64>
Examples Basic usage: use std::num::Saturating;
assert_eq!(Saturating(2u64), Saturating(5u64) / Saturating(2));
assert_eq!(Saturating(u64::MAX), Saturating(u64::MAX) / Saturating(1));
assert_eq!(Saturating(u64::MIN), Saturating(u64::MIN) / Saturating(1)); â“˜use std::num::Saturating;
let _ = Saturating(0u64) / Saturating(0);
 
sourcetype Output = Saturating<u64>
1.74.0sourceimpl Div for Saturating<u128>
Examples Basic usage: use std::num::Saturating;
assert_eq!(Saturating(2u128), Saturating(5u128) / Saturating(2));
assert_eq!(Saturating(u128::MAX), Saturating(u128::MAX) / Saturating(1));
assert_eq!(Saturating(u128::MIN), Saturating(u128::MIN) / Saturating(1)); â“˜use std::num::Saturating;
let _ = Saturating(0u128) / Saturating(0);
 
sourcetype Output = Saturating<u128>
1.74.0sourceimpl Div for Saturating<usize>
Examples Basic usage: use std::num::Saturating;
assert_eq!(Saturating(2usize), Saturating(5usize) / Saturating(2));
assert_eq!(Saturating(usize::MAX), Saturating(usize::MAX) / Saturating(1));
assert_eq!(Saturating(usize::MIN), Saturating(usize::MIN) / Saturating(1)); â“˜use std::num::Saturating;
let _ = Saturating(0usize) / Saturating(0);
 
sourcetype Output = Saturating<usize>
1.3.0sourceimpl Div for Wrapping<i8>sourcetype Output = Wrapping<i8>
1.3.0sourceimpl Div for Wrapping<i16>sourcetype Output = Wrapping<i16>
1.3.0sourceimpl Div for Wrapping<i32>sourcetype Output = Wrapping<i32>
1.3.0sourceimpl Div for Wrapping<i64>sourcetype Output = Wrapping<i64>
1.3.0sourceimpl Div for Wrapping<i128>sourcetype Output = Wrapping<i128>
1.3.0sourceimpl Div for Wrapping<isize>sourcetype Output = Wrapping<isize>
1.3.0sourceimpl Div for Wrapping<u8>sourcetype Output = Wrapping<u8>
1.3.0sourceimpl Div for Wrapping<u16>sourcetype Output = Wrapping<u16>
1.3.0sourceimpl Div for Wrapping<u32>sourcetype Output = Wrapping<u32>
1.3.0sourceimpl Div for Wrapping<u64>sourcetype Output = Wrapping<u64>
1.3.0sourceimpl Div for Wrapping<u128>sourcetype Output = Wrapping<u128>
1.3.0sourceimpl Div for Wrapping<usize>sourcetype Output = Wrapping<usize>
1.0.0sourceimpl Div<&f16> for &f16sourcetype Output = <f16 as Div>::Output
1.0.0sourceimpl Div<&f16> for f16sourcetype Output = <f16 as Div>::Output
1.0.0sourceimpl Div<&f32> for &f32sourcetype Output = <f32 as Div>::Output
1.0.0sourceimpl Div<&f32> for f32sourcetype Output = <f32 as Div>::Output
1.0.0sourceimpl Div<&f64> for &f64sourcetype Output = <f64 as Div>::Output
1.0.0sourceimpl Div<&f64> for f64sourcetype Output = <f64 as Div>::Output
1.0.0sourceimpl Div<&f128> for &f128sourcetype Output = <f128 as Div>::Output
1.0.0sourceimpl Div<&f128> for f128sourcetype Output = <f128 as Div>::Output
1.0.0sourceimpl Div<&i8> for &i8sourcetype Output = <i8 as Div>::Output
1.0.0sourceimpl Div<&i8> for i8sourcetype Output = <i8 as Div>::Output
1.0.0sourceimpl Div<&i16> for &i16sourcetype Output = <i16 as Div>::Output
1.0.0sourceimpl Div<&i16> for i16sourcetype Output = <i16 as Div>::Output
1.0.0sourceimpl Div<&i32> for &i32sourcetype Output = <i32 as Div>::Output
1.0.0sourceimpl Div<&i32> for i32sourcetype Output = <i32 as Div>::Output
1.0.0sourceimpl Div<&i64> for &i64sourcetype Output = <i64 as Div>::Output
1.0.0sourceimpl Div<&i64> for i64sourcetype Output = <i64 as Div>::Output
1.0.0sourceimpl Div<&i128> for &i128sourcetype Output = <i128 as Div>::Output
1.0.0sourceimpl Div<&i128> for i128sourcetype Output = <i128 as Div>::Output
1.0.0sourceimpl Div<&isize> for &isizesourcetype Output = <isize as Div>::Output
1.0.0sourceimpl Div<&isize> for isizesourcetype Output = <isize as Div>::Output
1.0.0sourceimpl Div<&u8> for &u8sourcetype Output = <u8 as Div>::Output
1.0.0sourceimpl Div<&u8> for u8sourcetype Output = <u8 as Div>::Output
1.0.0sourceimpl Div<&u16> for &u16sourcetype Output = <u16 as Div>::Output
1.0.0sourceimpl Div<&u16> for u16sourcetype Output = <u16 as Div>::Output
1.0.0sourceimpl Div<&u32> for &u32sourcetype Output = <u32 as Div>::Output
1.0.0sourceimpl Div<&u32> for u32sourcetype Output = <u32 as Div>::Output
1.0.0sourceimpl Div<&u64> for &u64sourcetype Output = <u64 as Div>::Output
1.0.0sourceimpl Div<&u64> for u64sourcetype Output = <u64 as Div>::Output
1.0.0sourceimpl Div<&u128> for &u128sourcetype Output = <u128 as Div>::Output
1.0.0sourceimpl Div<&u128> for u128sourcetype Output = <u128 as Div>::Output
1.0.0sourceimpl Div<&usize> for &usizesourcetype Output = <usize as Div>::Output
1.0.0sourceimpl Div<&usize> for usizesourcetype Output = <usize as Div>::Output
1.74.0sourceimpl Div<&Saturating<i8>> for &Saturating<i8>sourcetype Output = <Saturating<i8> as Div>::Output
1.74.0sourceimpl Div<&Saturating<i8>> for Saturating<i8>sourcetype Output = <Saturating<i8> as Div>::Output
1.74.0sourceimpl Div<&Saturating<i16>> for &Saturating<i16>sourcetype Output = <Saturating<i16> as Div>::Output
1.74.0sourceimpl Div<&Saturating<i16>> for Saturating<i16>sourcetype Output = <Saturating<i16> as Div>::Output
1.74.0sourceimpl Div<&Saturating<i32>> for &Saturating<i32>sourcetype Output = <Saturating<i32> as Div>::Output
1.74.0sourceimpl Div<&Saturating<i32>> for Saturating<i32>sourcetype Output = <Saturating<i32> as Div>::Output
1.74.0sourceimpl Div<&Saturating<i64>> for &Saturating<i64>sourcetype Output = <Saturating<i64> as Div>::Output
1.74.0sourceimpl Div<&Saturating<i64>> for Saturating<i64>sourcetype Output = <Saturating<i64> as Div>::Output
1.74.0sourceimpl Div<&Saturating<i128>> for &Saturating<i128>sourcetype Output = <Saturating<i128> as Div>::Output
1.74.0sourceimpl Div<&Saturating<i128>> for Saturating<i128>sourcetype Output = <Saturating<i128> as Div>::Output
1.74.0sourceimpl Div<&Saturating<isize>> for &Saturating<isize>sourcetype Output = <Saturating<isize> as Div>::Output
1.74.0sourceimpl Div<&Saturating<isize>> for Saturating<isize>sourcetype Output = <Saturating<isize> as Div>::Output
1.74.0sourceimpl Div<&Saturating<u8>> for &Saturating<u8>sourcetype Output = <Saturating<u8> as Div>::Output
1.74.0sourceimpl Div<&Saturating<u8>> for Saturating<u8>sourcetype Output = <Saturating<u8> as Div>::Output
1.74.0sourceimpl Div<&Saturating<u16>> for &Saturating<u16>sourcetype Output = <Saturating<u16> as Div>::Output
1.74.0sourceimpl Div<&Saturating<u16>> for Saturating<u16>sourcetype Output = <Saturating<u16> as Div>::Output
1.74.0sourceimpl Div<&Saturating<u32>> for &Saturating<u32>sourcetype Output = <Saturating<u32> as Div>::Output
1.74.0sourceimpl Div<&Saturating<u32>> for Saturating<u32>sourcetype Output = <Saturating<u32> as Div>::Output
1.74.0sourceimpl Div<&Saturating<u64>> for &Saturating<u64>sourcetype Output = <Saturating<u64> as Div>::Output
1.74.0sourceimpl Div<&Saturating<u64>> for Saturating<u64>sourcetype Output = <Saturating<u64> as Div>::Output
1.74.0sourceimpl Div<&Saturating<u128>> for &Saturating<u128>sourcetype Output = <Saturating<u128> as Div>::Output
1.74.0sourceimpl Div<&Saturating<u128>> for Saturating<u128>sourcetype Output = <Saturating<u128> as Div>::Output
1.74.0sourceimpl Div<&Saturating<usize>> for &Saturating<usize>sourcetype Output = <Saturating<usize> as Div>::Output
1.74.0sourceimpl Div<&Saturating<usize>> for Saturating<usize>sourcetype Output = <Saturating<usize> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<i8>> for &Wrapping<i8>sourcetype Output = <Wrapping<i8> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<i8>> for Wrapping<i8>sourcetype Output = <Wrapping<i8> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<i16>> for &Wrapping<i16>sourcetype Output = <Wrapping<i16> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<i16>> for Wrapping<i16>sourcetype Output = <Wrapping<i16> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<i32>> for &Wrapping<i32>sourcetype Output = <Wrapping<i32> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<i32>> for Wrapping<i32>sourcetype Output = <Wrapping<i32> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<i64>> for &Wrapping<i64>sourcetype Output = <Wrapping<i64> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<i64>> for Wrapping<i64>sourcetype Output = <Wrapping<i64> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<i128>> for &Wrapping<i128>sourcetype Output = <Wrapping<i128> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<i128>> for Wrapping<i128>sourcetype Output = <Wrapping<i128> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<isize>> for &Wrapping<isize>sourcetype Output = <Wrapping<isize> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<isize>> for Wrapping<isize>sourcetype Output = <Wrapping<isize> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<u8>> for &Wrapping<u8>sourcetype Output = <Wrapping<u8> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<u8>> for Wrapping<u8>sourcetype Output = <Wrapping<u8> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<u16>> for &Wrapping<u16>sourcetype Output = <Wrapping<u16> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<u16>> for Wrapping<u16>sourcetype Output = <Wrapping<u16> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<u32>> for &Wrapping<u32>sourcetype Output = <Wrapping<u32> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<u32>> for Wrapping<u32>sourcetype Output = <Wrapping<u32> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<u64>> for &Wrapping<u64>sourcetype Output = <Wrapping<u64> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<u64>> for Wrapping<u64>sourcetype Output = <Wrapping<u64> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<u128>> for &Wrapping<u128>sourcetype Output = <Wrapping<u128> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<u128>> for Wrapping<u128>sourcetype Output = <Wrapping<u128> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<usize>> for &Wrapping<usize>sourcetype Output = <Wrapping<usize> as Div>::Output
1.14.0sourceimpl Div<&Wrapping<usize>> for Wrapping<usize>sourcetype Output = <Wrapping<usize> as Div>::Output
1.3.0sourceimpl Div<u32> for Durationsourcetype Output = Duration
1.51.0sourceimpl Div<NonZero<u8>> for u8sourcetype Output = u8
1.51.0sourceimpl Div<NonZero<u16>> for u16sourcetype Output = u16
1.51.0sourceimpl Div<NonZero<u32>> for u32sourcetype Output = u32
1.51.0sourceimpl Div<NonZero<u64>> for u64sourcetype Output = u64
1.51.0sourceimpl Div<NonZero<u128>> for u128sourcetype Output = u128
1.51.0sourceimpl Div<NonZero<usize>> for usizesourcetype Output = usize
1.0.0sourceimpl<'a> Div<f16> for &'a f16sourcetype Output = <f16 as Div>::Output
1.0.0sourceimpl<'a> Div<f32> for &'a f32sourcetype Output = <f32 as Div>::Output
1.0.0sourceimpl<'a> Div<f64> for &'a f64sourcetype Output = <f64 as Div>::Output
1.0.0sourceimpl<'a> Div<f128> for &'a f128sourcetype Output = <f128 as Div>::Output
1.0.0sourceimpl<'a> Div<i8> for &'a i8sourcetype Output = <i8 as Div>::Output
1.0.0sourceimpl<'a> Div<i16> for &'a i16sourcetype Output = <i16 as Div>::Output
1.0.0sourceimpl<'a> Div<i32> for &'a i32sourcetype Output = <i32 as Div>::Output
1.0.0sourceimpl<'a> Div<i64> for &'a i64sourcetype Output = <i64 as Div>::Output
1.0.0sourceimpl<'a> Div<i128> for &'a i128sourcetype Output = <i128 as Div>::Output
1.0.0sourceimpl<'a> Div<isize> for &'a isizesourcetype Output = <isize as Div>::Output
1.0.0sourceimpl<'a> Div<u8> for &'a u8sourcetype Output = <u8 as Div>::Output
1.0.0sourceimpl<'a> Div<u16> for &'a u16sourcetype Output = <u16 as Div>::Output
1.0.0sourceimpl<'a> Div<u32> for &'a u32sourcetype Output = <u32 as Div>::Output
1.0.0sourceimpl<'a> Div<u64> for &'a u64sourcetype Output = <u64 as Div>::Output
1.0.0sourceimpl<'a> Div<u128> for &'a u128sourcetype Output = <u128 as Div>::Output
1.0.0sourceimpl<'a> Div<usize> for &'a usizesourcetype Output = <usize as Div>::Output
1.74.0sourceimpl<'a> Div<Saturating<i8>> for &'a Saturating<i8>sourcetype Output = <Saturating<i8> as Div>::Output
1.74.0sourceimpl<'a> Div<Saturating<i16>> for &'a Saturating<i16>sourcetype Output = <Saturating<i16> as Div>::Output
1.74.0sourceimpl<'a> Div<Saturating<i32>> for &'a Saturating<i32>sourcetype Output = <Saturating<i32> as Div>::Output
1.74.0sourceimpl<'a> Div<Saturating<i64>> for &'a Saturating<i64>sourcetype Output = <Saturating<i64> as Div>::Output
1.74.0sourceimpl<'a> Div<Saturating<i128>> for &'a Saturating<i128>sourcetype Output = <Saturating<i128> as Div>::Output
1.74.0sourceimpl<'a> Div<Saturating<isize>> for &'a Saturating<isize>sourcetype Output = <Saturating<isize> as Div>::Output
1.74.0sourceimpl<'a> Div<Saturating<u8>> for &'a Saturating<u8>sourcetype Output = <Saturating<u8> as Div>::Output
1.74.0sourceimpl<'a> Div<Saturating<u16>> for &'a Saturating<u16>sourcetype Output = <Saturating<u16> as Div>::Output
1.74.0sourceimpl<'a> Div<Saturating<u32>> for &'a Saturating<u32>sourcetype Output = <Saturating<u32> as Div>::Output
1.74.0sourceimpl<'a> Div<Saturating<u64>> for &'a Saturating<u64>sourcetype Output = <Saturating<u64> as Div>::Output
1.74.0sourceimpl<'a> Div<Saturating<u128>> for &'a Saturating<u128>sourcetype Output = <Saturating<u128> as Div>::Output
1.74.0sourceimpl<'a> Div<Saturating<usize>> for &'a Saturating<usize>sourcetype Output = <Saturating<usize> as Div>::Output
1.14.0sourceimpl<'a> Div<Wrapping<i8>> for &'a Wrapping<i8>sourcetype Output = <Wrapping<i8> as Div>::Output
1.14.0sourceimpl<'a> Div<Wrapping<i16>> for &'a Wrapping<i16>sourcetype Output = <Wrapping<i16> as Div>::Output
1.14.0sourceimpl<'a> Div<Wrapping<i32>> for &'a Wrapping<i32>sourcetype Output = <Wrapping<i32> as Div>::Output
1.14.0sourceimpl<'a> Div<Wrapping<i64>> for &'a Wrapping<i64>sourcetype Output = <Wrapping<i64> as Div>::Output
1.14.0sourceimpl<'a> Div<Wrapping<i128>> for &'a Wrapping<i128>sourcetype Output = <Wrapping<i128> as Div>::Output
1.14.0sourceimpl<'a> Div<Wrapping<isize>> for &'a Wrapping<isize>sourcetype Output = <Wrapping<isize> as Div>::Output
1.14.0sourceimpl<'a> Div<Wrapping<u8>> for &'a Wrapping<u8>sourcetype Output = <Wrapping<u8> as Div>::Output
1.14.0sourceimpl<'a> Div<Wrapping<u16>> for &'a Wrapping<u16>sourcetype Output = <Wrapping<u16> as Div>::Output
1.14.0sourceimpl<'a> Div<Wrapping<u32>> for &'a Wrapping<u32>sourcetype Output = <Wrapping<u32> as Div>::Output
1.14.0sourceimpl<'a> Div<Wrapping<u64>> for &'a Wrapping<u64>sourcetype Output = <Wrapping<u64> as Div>::Output
1.14.0sourceimpl<'a> Div<Wrapping<u128>> for &'a Wrapping<u128>sourcetype Output = <Wrapping<u128> as Div>::Output
1.14.0sourceimpl<'a> Div<Wrapping<usize>> for &'a Wrapping<usize>sourcetype Output = <Wrapping<usize> as Div>::Output
sourceimpl<'lhs, 'rhs, T, const N: usize> Div<&'rhs Simd<T, N>> for &'lhs Simd<T, N>where
    T: SimdElement,
    Simd<T, N>: Div<Output = Simd<T, N>>,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<T, N>
sourceimpl<T, const N: usize> Div<&Simd<T, N>> for Simd<T, N>where
    T: SimdElement,
    Simd<T, N>: Div<Output = Simd<T, N>>,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<T, N>
sourceimpl<T, const N: usize> Div<Simd<T, N>> for &Simd<T, N>where
    T: SimdElement,
    Simd<T, N>: Div<Output = Simd<T, N>>,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<T, N>
sourceimpl<const N: usize> Div for Simd<f32, N>where
    f32: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<f32, N>
sourceimpl<const N: usize> Div for Simd<f64, N>where
    f64: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<f64, N>
sourceimpl<const N: usize> Div for Simd<i8, N>where
    i8: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i8, N>
sourceimpl<const N: usize> Div for Simd<i16, N>where
    i16: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i16, N>
sourceimpl<const N: usize> Div for Simd<i32, N>where
    i32: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i32, N>
sourceimpl<const N: usize> Div for Simd<i64, N>where
    i64: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i64, N>
sourceimpl<const N: usize> Div for Simd<isize, N>where
    isize: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<isize, N>
sourceimpl<const N: usize> Div for Simd<u8, N>where
    u8: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u8, N>
sourceimpl<const N: usize> Div for Simd<u16, N>where
    u16: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u16, N>
sourceimpl<const N: usize> Div for Simd<u32, N>where
    u32: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u32, N>
sourceimpl<const N: usize> Div for Simd<u64, N>where
    u64: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u64, N>
sourceimpl<const N: usize> Div for Simd<usize, N>where
    usize: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<usize, N>

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/ops/trait.Div.html


std/thread/fn.current
-----------------------------------------------------------
Function current
pub fn current() -> Thread
Gets a handle to the thread that invokes it. Examples Getting a handle to the current thread with thread::current(): use std::thread;
let handler = thread::Builder::new()
    .name("named thread".into())
    .spawn(|| {
        let handle = thread::current();
        assert_eq!(handle.name(), Some("named thread"));
    })
    .unwrap();
handler.join().unwrap();
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/thread/fn.current.html


std/simd/prelude/type.mask16x1
-----------------------------------------------------------
Type Alias mask16x1
pub type mask16x1 = Mask<i16, 1>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD mask with one element for vectors with 16-bit element types. The layout of this type is unspecified, and may change between platforms and/or Rust versions, and code should not assume that it is equivalent to [i16; 1]. Aliased Type
struct mask16x1(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/prelude/type.mask16x1.html


std/slice/struct.rsplitn
-----------------------------------------------------------
Struct RSplitN
pub struct RSplitN<'a, T, P>where
    T: 'a,
    P: FnMut(&T) -> bool,{ /* private fields */ }
An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice. This struct is created by the rsplitn method on slices. Example let slice = [10, 40, 30, 20, 60, 50];
let mut iter = slice.rsplitn(2, |num| *num % 3 == 0);
assert_eq!(iter.next(), Some(&[50][..]));
assert_eq!(iter.next(), Some(&[10, 40, 30, 20][..]));
assert_eq!(iter.next(), None); Trait Implementations
1.9.0sourceimpl<T, P> Debug for RSplitN<'_, T, P>where
    T: Debug,
    P: FnMut(&T) -> bool,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.0.0sourceimpl<'a, T, P> Iterator for RSplitN<'a, T, P>where
    P: FnMut(&T) -> bool,
sourcetype Item = &'a [T]The type of the elements being iterated over.
sourcefn next(&mut self) -> Option<&'a [T]>Advances the iterator and returns the next value. Read more
sourcefn size_hint(&self) -> (usize, Option<usize>)Returns the bounds on the remaining length of the iterator. Read more
sourcefn next_chunk<const N: usize>(
    &mut self,
) -> Result<[Self::Item; N], IntoIter<Self::Item, N>>where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_next_chunk #98326)
Advances the iterator and returns an array containing the next N values. Read more
1.0.0sourcefn count(self) -> usizewhere
    Self: Sized,Consumes the iterator, counting the number of iterations and returning it. Read more
1.0.0sourcefn last(self) -> Option<Self::Item>where
    Self: Sized,Consumes the iterator, returning the last element. Read more
sourcefn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator by n elements. Read more
1.0.0sourcefn nth(&mut self, n: usize) -> Option<Self::Item>Returns the nth element of the iterator. Read more
1.28.0sourcefn step_by(self, step: usize) -> StepBy<Self> â“˜where
    Self: Sized,Creates an iterator starting at the same point, but stepping by the given amount at each iteration. Read more
1.0.0sourcefn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator<Item = Self::Item>,Takes two iterators and creates a new iterator over both in sequence. Read more
1.0.0sourcefn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator,â€˜Zips upâ€™ two iterators into a single iterator of pairs. Read more
sourcefn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G> â“˜where
    Self: Sized,
    G: FnMut() -> Self::Item,
ðŸ”¬This is a nightly-only experimental API. (iter_intersperse #79524)
Creates a new iterator which places an item generated by separator between adjacent items of the original iterator. Read more
1.0.0sourcefn map<B, F>(self, f: F) -> Map<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> B,Takes a closure and creates an iterator which calls that closure on each element. Read more
1.21.0sourcefn for_each<F>(self, f: F)where
    Self: Sized,
    F: FnMut(Self::Item),Calls a closure on each element of an iterator. Read more
1.0.0sourcefn filter<P>(self, predicate: P) -> Filter<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator which uses a closure to determine if an element should be yielded. Read more
1.0.0sourcefn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Creates an iterator that both filters and maps. Read more
1.0.0sourcefn enumerate(self) -> Enumerate<Self> â“˜where
    Self: Sized,Creates an iterator which gives the current iteration count as well as the next value. Read more
1.0.0sourcefn peekable(self) -> Peekable<Self> â“˜where
    Self: Sized,Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information. Read more
1.0.0sourcefn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that skips elements based on a predicate. Read more
1.0.0sourcefn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that yields elements based on a predicate. Read more
1.57.0sourcefn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(Self::Item) -> Option<B>,Creates an iterator that both yields elements based on a predicate and maps. Read more
1.0.0sourcefn skip(self, n: usize) -> Skip<Self> â“˜where
    Self: Sized,Creates an iterator that skips the first n elements. Read more
1.0.0sourcefn take(self, n: usize) -> Take<Self> â“˜where
    Self: Sized,Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner. Read more
1.0.0sourcefn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> â“˜where
    Self: Sized,
    F: FnMut(&mut St, Self::Item) -> Option<B>,An iterator adapter which, like fold, holds internal state, but unlike fold, produces a new iterator. Read more
1.0.0sourcefn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F> â“˜where
    Self: Sized,
    U: IntoIterator,
    F: FnMut(Self::Item) -> U,Creates an iterator that works like map, but flattens nested structure. Read more
sourcefn map_windows<F, R, const N: usize>(self, f: F) -> MapWindows<Self, F, N> â“˜where
    Self: Sized,
    F: FnMut(&[Self::Item; N]) -> R,
ðŸ”¬This is a nightly-only experimental API. (iter_map_windows #87155)
Calls the given function f for each contiguous window of size N over self and returns an iterator over the outputs of f. Like slice::windows(), the windows during mapping overlap as well. Read more
1.0.0sourcefn fuse(self) -> Fuse<Self> â“˜where
    Self: Sized,Creates an iterator which ends after the first None. Read more
1.0.0sourcefn inspect<F>(self, f: F) -> Inspect<Self, F> â“˜where
    Self: Sized,
    F: FnMut(&Self::Item),Does something with each element of an iterator, passing the value on. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Borrows an iterator, rather than consuming it. Read more
1.0.0sourcefn collect<B>(self) -> Bwhere
    B: FromIterator<Self::Item>,
    Self: Sized,Transforms an iterator into a collection. Read more
sourcefn collect_into<E>(self, collection: &mut E) -> &mut Ewhere
    E: Extend<Self::Item>,
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_collect_into #94780)
Collects all the items from an iterator into a collection. Read more
1.0.0sourcefn partition<B, F>(self, f: F) -> (B, B)where
    Self: Sized,
    B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool,Consumes an iterator, creating two collections from it. Read more
sourcefn is_partitioned<P>(self, predicate: P) -> boolwhere
    Self: Sized,
    P: FnMut(Self::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_is_partitioned #62544)
Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false. Read more
1.27.0sourcefn try_fold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> R,
    R: Try<Output = B>,An iterator method that applies a function as long as it returns successfully, producing a single, final value. Read more
1.27.0sourcefn try_for_each<F, R>(&mut self, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(Self::Item) -> R,
    R: Try<Output = ()>,An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. Read more
1.0.0sourcefn fold<B, F>(self, init: B, f: F) -> Bwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> B,Folds every element into an accumulator by applying an operation, returning the final result. Read more
1.51.0sourcefn reduce<F>(self, f: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(Self::Item, Self::Item) -> Self::Item,Reduces the elements to a single one, by repeatedly applying a reducing operation. Read more
sourcefn try_reduce<R>(
    &mut self,
    f: impl FnMut(Self::Item, Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = Self::Item>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (iterator_try_reduce #87053)
Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. Read more
1.0.0sourcefn all<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if every element of the iterator matches a predicate. Read more
1.0.0sourcefn any<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if any element of the iterator matches a predicate. Read more
1.0.0sourcefn find<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator that satisfies a predicate. Read more
1.30.0sourcefn find_map<B, F>(&mut self, f: F) -> Option<B>where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Applies function to the elements of iterator and returns the first non-none result. Read more
sourcefn try_find<R>(
    &mut self,
    f: impl FnMut(&Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = bool>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (try_find #63178)
Applies function to the elements of iterator and returns the first true result or the first error. Read more
1.0.0sourcefn position<P>(&mut self, predicate: P) -> Option<usize>where
    Self: Sized,
    P: FnMut(Self::Item) -> bool,Searches for an element in an iterator, returning its index. Read more
1.6.0sourcefn max_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the maximum value from the specified function. Read more
1.15.0sourcefn max_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the maximum value with respect to the specified comparison function. Read more
1.6.0sourcefn min_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the minimum value from the specified function. Read more
1.15.0sourcefn min_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the minimum value with respect to the specified comparison function. Read more
1.0.0sourcefn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)where
    FromA: Default + Extend<A>,
    FromB: Default + Extend<B>,
    Self: Sized + Iterator<Item = (A, B)>,Converts an iterator of pairs into a pair of containers. Read more
1.36.0sourcefn copied<'a, T>(self) -> Copied<Self> â“˜where
    T: 'a + Copy,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which copies all of its elements. Read more
1.0.0sourcefn cloned<'a, T>(self) -> Cloned<Self> â“˜where
    T: 'a + Clone,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which clones all of its elements. Read more
sourcefn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N> â“˜where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_array_chunks #100450)
Returns an iterator over N elements of the iterator at a time. Read more
1.11.0sourcefn sum<S>(self) -> Swhere
    Self: Sized,
    S: Sum<Self::Item>,Sums the elements of an iterator. Read more
1.11.0sourcefn product<P>(self) -> Pwhere
    Self: Sized,
    P: Product<Self::Item>,Iterates over the entire iterator, multiplying all the elements Read more
sourcefn cmp_by<I, F>(self, other: I, cmp: F) -> Orderingwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn partial_cmp<I>(self, other: I) -> Option<Ordering>where
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,
Lexicographically compares the PartialOrd elements of this Iterator with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. Read more
sourcefn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering>where
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Option<Ordering>,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn eq<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are equal to those of another. Read more
sourcefn eq_by<I, F>(self, other: I, eq: F) -> boolwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function. Read more
1.5.0sourcefn ne<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are not equal to those of another. Read more
1.5.0sourcefn lt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less than those of another. Read more
1.5.0sourcefn le<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less or equal to those of another. Read more
1.5.0sourcefn gt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than those of another. Read more
1.5.0sourcefn ge<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than or equal to those of another. Read more
1.82.0sourcefn is_sorted_by<F>(self, compare: F) -> boolwhere
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> bool,Checks if the elements of this iterator are sorted using the given comparator function. Read more
1.82.0sourcefn is_sorted_by_key<F, K>(self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> K,
    K: PartialOrd,Checks if the elements of this iterator are sorted using the given key extraction function. Read more

1.26.0sourceimpl<'a, T, P> FusedIterator for RSplitN<'a, T, P>where
    P: FnMut(&T) -> bool,
Auto Trait Implementations
impl<'a, T, P> Freeze for RSplitN<'a, T, P>where
    P: Freeze,impl<'a, T, P> RefUnwindSafe for RSplitN<'a, T, P>where
    P: RefUnwindSafe,
    T: RefUnwindSafe,impl<'a, T, P> Send for RSplitN<'a, T, P>where
    P: Send,
    T: Sync,impl<'a, T, P> Sync for RSplitN<'a, T, P>where
    P: Sync,
    T: Sync,impl<'a, T, P> Unpin for RSplitN<'a, T, P>where
    P: Unpin,impl<'a, T, P> UnwindSafe for RSplitN<'a, T, P>where
    P: UnwindSafe,
    T: RefUnwindSafe,
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<I> IntoIterator for Iwhere
    I: Iterator,
sourcetype Item = <I as Iterator>::ItemThe type of the elements being iterated over.
sourcetype IntoIter = IWhich kind of iterator are we turning this into?
sourcefn into_iter(self) -> ICreates an iterator from a value. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/slice/struct.RSplitN.html


std/intrinsics/fn.fabsf16
-----------------------------------------------------------
Function fabsf16
pub unsafe extern "rust-intrinsic" fn fabsf16(x: f16) -> f16
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Returns the absolute value of an f16. The stabilized version of this intrinsic is f16::abs
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.fabsf16.html


std/macro.debug_assert
-----------------------------------------------------------
Macro debug_assert
macro_rules! debug_assert {
    ($($arg:tt)*) => { ... };
}
Asserts that a boolean expression is true at runtime. This will invoke the panic! macro if the provided expression cannot be evaluated to true at runtime. Like assert!, this macro also has a second version, where a custom panic message can be provided. Uses Unlike assert!, debug_assert! statements are only enabled in non optimized builds by default. An optimized build will not execute debug_assert! statements unless -C debug-assertions is passed to the compiler. This makes debug_assert! useful for checks that are too expensive to be present in a release build but may be helpful during development. The result of expanding debug_assert! is always type checked. An unchecked assertion allows a program in an inconsistent state to keep running, which might have unexpected consequences but does not introduce unsafety as long as this only happens in safe code. The performance cost of assertions, however, is not measurable in general. Replacing assert! with debug_assert! is thus only encouraged after thorough profiling, and more importantly, only in safe code! Examples // the panic message for these assertions is the stringified value of the
// expression given.
debug_assert!(true);
fn some_expensive_computation() -> bool { true } // a very simple function
debug_assert!(some_expensive_computation());
// assert with a custom message
let x = true;
debug_assert!(x, "x wasn't true!");
let a = 3; let b = 27;
debug_assert!(a + b == 30, "a = {}, b = {}", a, b);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/macro.debug_assert.html


std/simd/prelude/type.isizex4
-----------------------------------------------------------
Type Alias isizex4
pub type isizex4 = Simd<isize, 4>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with four elements of type isize. Aliased Type
struct isizex4(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/prelude/type.isizex4.html


std/macro.todo
-----------------------------------------------------------
Macro todo
macro_rules! todo {
    () => { ... };
    ($($arg:tt)+) => { ... };
}
Indicates unfinished code. This can be useful if you are prototyping and just want a placeholder to let your code pass type analysis. The difference between unimplemented! and todo! is that while todo! conveys an intent of implementing the functionality later and the message is â€œnot yet implementedâ€, unimplemented! makes no such claims. Its message is â€œnot implementedâ€. Also, some IDEs will mark todo!s. Panics This will always panic! because todo! is just a shorthand for panic! with a fixed, specific message. Like panic!, this macro has a second form for displaying custom values. Examples Hereâ€™s an example of some in-progress code. We have a trait Foo: trait Foo {
    fn bar(&self) -> u8;
    fn baz(&self);
    fn qux(&self) -> Result<u64, ()>;
} We want to implement Foo on one of our types, but we also want to work on just bar() first. In order for our code to compile, we need to implement baz() and qux(), so we can use todo!: struct MyStruct;
impl Foo for MyStruct {
    fn bar(&self) -> u8 {
        1 + 1
    }
    fn baz(&self) {
        // Let's not worry about implementing baz() for now
        todo!();
    }
    fn qux(&self) -> Result<u64, ()> {
        // We can add a message to todo! to display our omission.
        // This will display:
        // "thread 'main' panicked at 'not yet implemented: MyStruct is not yet quxable'".
        todo!("MyStruct is not yet quxable");
    }
}
fn main() {
    let s = MyStruct;
    s.bar();
    // We aren't even using baz() or qux(), so this is fine.
}
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/macro.todo.html


std/marker/trait.destruct
-----------------------------------------------------------
Trait Destruct
pub trait Destruct { }
ðŸ”¬This is a nightly-only experimental API. (const_trait_impl #67792)
A marker for types that can be dropped. This should be used for ~const bounds, as non-const bounds will always hold for every type. Implementors

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/marker/trait.Destruct.html


std/clone/trait.clone
-----------------------------------------------------------
Trait Clone
pub trait Clone: Sized {
    // Required method
    fn clone(&self) -> Self;
    // Provided method
    fn clone_from(&mut self, source: &Self) { ... }
}
A common trait for the ability to explicitly duplicate an object. Differs from Copy in that Copy is implicit and an inexpensive bit-wise copy, while Clone is always explicit and may or may not be expensive. In order to enforce these characteristics, Rust does not allow you to reimplement Copy, but you may reimplement Clone and run arbitrary code. Since Clone is more general than Copy, you can automatically make anything Copy be Clone as well. Derivable This trait can be used with #[derive] if all fields are Clone. The derived implementation of Clone calls clone on each field. For a generic struct, #[derive] implements Clone conditionally by adding bound Clone on generic parameters. // `derive` implements Clone for Reading<T> when T is Clone.
#[derive(Clone)]
struct Reading<T> {
    frequency: T,
} How can I implement Clone? Types that are Copy should have a trivial implementation of Clone. More formally: if T: Copy, x: T, and y: &T, then let x = y.clone(); is equivalent to let x = *y;. Manual implementations should be careful to uphold this invariant; however, unsafe code must not rely on it to ensure memory safety. An example is a generic struct holding a function pointer. In this case, the implementation of Clone cannot be derived, but can be implemented as: struct Generate<T>(fn() -> T);
impl<T> Copy for Generate<T> {}
impl<T> Clone for Generate<T> {
    fn clone(&self) -> Self {
        *self
    }
} If we derive: #[derive(Copy, Clone)]
struct Generate<T>(fn() -> T); the auto-derived implementations will have unnecessary T: Copy and T: Clone bounds: // Automatically derived
impl<T: Copy> Copy for Generate<T> { }
// Automatically derived
impl<T: Clone> Clone for Generate<T> {
    fn clone(&self) -> Generate<T> {
        Generate(Clone::clone(&self.0))
    }
} The bounds are unnecessary because clearly the function itself should be copy- and cloneable even if its return type is not: â“˜#[derive(Copy, Clone)]
struct Generate<T>(fn() -> T);
struct NotCloneable;
fn generate_not_cloneable() -> NotCloneable {
    NotCloneable
}
Generate(generate_not_cloneable).clone(); // error: trait bounds were not satisfied
// Note: With the manual implementations the above line will compile.
 Additional implementors In addition to the implementors listed below, the following types also implement Clone:  Function item types (i.e., the distinct types defined for each function) Function pointer types (e.g., fn() -> i32) Closure types, if they capture no value from the environment or if all such captured values implement Clone themselves. Note that variables captured by shared reference always implement Clone (even if the referent doesnâ€™t), while variables captured by mutable reference never implement Clone.  Required Methods
1.0.0sourcefn clone(&self) -> Self
Returns a copy of the value. Examples let hello = "Hello"; // &str implements Clone
assert_eq!("Hello", hello.clone()); 
Provided Methods
1.0.0sourcefn clone_from(&mut self, source: &Self)
Performs copy-assignment from source. a.clone_from(&b) is equivalent to a = b.clone() in functionality, but can be overridden to reuse the resources of a to avoid unnecessary allocations. 
Object Safety
This trait is not object safe.
Implementors
sourceimpl Clone for AsciiChar1.0.0sourceimpl Clone for std::cmp::Orderingsourceimpl Clone for TryReserveErrorKind1.34.0sourceimpl Clone for Infallible1.0.0sourceimpl Clone for VarError1.28.0sourceimpl Clone for std::fmt::Alignment1.0.0sourceimpl Clone for ErrorKind1.0.0sourceimpl Clone for SeekFrom1.7.0sourceimpl Clone for IpAddrsourceimpl Clone for Ipv6MulticastScope1.0.0sourceimpl Clone for Shutdown1.0.0sourceimpl Clone for std::net::SocketAddr1.0.0sourceimpl Clone for FpCategory1.55.0sourceimpl Clone for IntErrorKindsourceimpl Clone for BacktraceStylesourceimpl Clone for SearchStep1.0.0sourceimpl Clone for std::sync::atomic::Ordering1.12.0sourceimpl Clone for RecvTimeoutError1.0.0sourceimpl Clone for TryRecvError1.0.0sourceimpl Clone for bool1.0.0sourceimpl Clone for char1.0.0sourceimpl Clone for f161.0.0sourceimpl Clone for f321.0.0sourceimpl Clone for f641.0.0sourceimpl Clone for f1281.0.0sourceimpl Clone for i81.0.0sourceimpl Clone for i161.0.0sourceimpl Clone for i321.0.0sourceimpl Clone for i641.0.0sourceimpl Clone for i1281.0.0sourceimpl Clone for isizesourceimpl Clone for !1.0.0sourceimpl Clone for u81.0.0sourceimpl Clone for u161.0.0sourceimpl Clone for u321.0.0sourceimpl Clone for u641.0.0sourceimpl Clone for u1281.0.0sourceimpl Clone for usize1.27.0sourceimpl Clone for CpuidResult1.27.0sourceimpl Clone for __m128sourceimpl Clone for __m128bh1.27.0sourceimpl Clone for __m128dsourceimpl Clone for __m128h1.27.0sourceimpl Clone for __m128i1.27.0sourceimpl Clone for __m256sourceimpl Clone for __m256bh1.27.0sourceimpl Clone for __m256dsourceimpl Clone for __m256h1.27.0sourceimpl Clone for __m256i1.72.0sourceimpl Clone for __m512sourceimpl Clone for __m512bh1.72.0sourceimpl Clone for __m512dsourceimpl Clone for __m512h1.72.0sourceimpl Clone for __m512isourceimpl Clone for bf16sourceimpl Clone for AllocErrorsourceimpl Clone for Global1.28.0sourceimpl Clone for Layout1.50.0sourceimpl Clone for LayoutError1.28.0sourceimpl Clone for System1.0.0sourceimpl Clone for TypeId1.34.0sourceimpl Clone for TryFromSliceError1.0.0sourceimpl Clone for std::ascii::EscapeDefault1.3.0sourceimpl Clone for Box<str>1.29.0sourceimpl Clone for Box<CStr>1.29.0sourceimpl Clone for Box<OsStr>1.29.0sourceimpl Clone for Box<Path>1.34.0sourceimpl Clone for CharTryFromError1.9.0sourceimpl Clone for DecodeUtf16Error1.20.0sourceimpl Clone for std::char::EscapeDebug1.0.0sourceimpl Clone for std::char::EscapeDefault1.0.0sourceimpl Clone for std::char::EscapeUnicode1.20.0sourceimpl Clone for ParseCharError1.0.0sourceimpl Clone for ToLowercase1.0.0sourceimpl Clone for ToUppercase1.59.0sourceimpl Clone for TryFromCharErrorsourceimpl Clone for UnorderedKeyError1.7.0sourceimpl Clone for DefaultHasher1.7.0sourceimpl Clone for RandomState1.57.0sourceimpl Clone for TryReserveError1.69.0sourceimpl Clone for FromBytesUntilNulError1.64.0sourceimpl Clone for FromBytesWithNulError1.64.0sourceimpl Clone for FromVecWithNulError1.64.0sourceimpl Clone for IntoStringError1.64.0sourceimpl Clone for NulError1.64.0sourceimpl Clone for CString1.0.0sourceimpl Clone for OsString1.0.0sourceimpl Clone for Error1.75.0sourceimpl Clone for FileTimes1.1.0sourceimpl Clone for FileType1.0.0sourceimpl Clone for Metadata1.0.0sourceimpl Clone for OpenOptions1.0.0sourceimpl Clone for Permissions1.0.0sourceimpl Clone for SipHasher1.0.0sourceimpl Clone for std::io::Empty1.0.0sourceimpl Clone for Sink1.33.0sourceimpl Clone for PhantomPinnedsourceimpl Clone for Assume1.0.0sourceimpl Clone for AddrParseError1.0.0sourceimpl Clone for Ipv4Addr1.0.0sourceimpl Clone for Ipv6Addr1.0.0sourceimpl Clone for SocketAddrV41.0.0sourceimpl Clone for SocketAddrV61.0.0sourceimpl Clone for ParseFloatError1.0.0sourceimpl Clone for ParseIntError1.34.0sourceimpl Clone for TryFromIntError1.0.0sourceimpl Clone for RangeFull1.1.0sourceimpl Clone for statAvailable on Linux only.1.10.0sourceimpl Clone for std::os::unix::net::SocketAddrAvailable on Unix only.sourceimpl Clone for SocketCredAvailable on (Android or Linux) and Unix only.sourceimpl Clone for UCredAvailable on Unix only.1.63.0sourceimpl Clone for InvalidHandleErrorAvailable on Windows only.1.63.0sourceimpl Clone for NullHandleErrorAvailable on Windows only.1.0.0sourceimpl Clone for PathBuf1.7.0sourceimpl Clone for StripPrefixError1.61.0sourceimpl Clone for ExitCode1.0.0sourceimpl Clone for ExitStatussourceimpl Clone for ExitStatusError1.0.0sourceimpl Clone for Outputsourceimpl Clone for std::ptr::Alignmentsourceimpl Clone for DefaultRandomSource1.0.0sourceimpl Clone for ParseBoolError1.0.0sourceimpl Clone for Utf8Error1.0.0sourceimpl Clone for FromUtf8Error1.0.0sourceimpl Clone for String1.0.0sourceimpl Clone for RecvError1.5.0sourceimpl Clone for WaitTimeoutResultsourceimpl Clone for LocalWaker1.36.0sourceimpl Clone for RawWakerVTable1.36.0sourceimpl Clone for Waker1.26.0sourceimpl Clone for AccessError1.0.0sourceimpl Clone for Thread1.19.0sourceimpl Clone for ThreadId1.3.0sourceimpl Clone for Duration1.8.0sourceimpl Clone for Instant1.8.0sourceimpl Clone for SystemTime1.8.0sourceimpl Clone for SystemTimeError1.66.0sourceimpl Clone for TryFromFloatSecsError1.0.0sourceimpl<'a> Clone for Component<'a>1.0.0sourceimpl<'a> Clone for Prefix<'a>sourceimpl<'a> Clone for Source<'a>sourceimpl<'a> Clone for core::ffi::c_str::Bytes<'a>1.0.0sourceimpl<'a> Clone for Arguments<'a>1.36.0sourceimpl<'a> Clone for IoSlice<'a>1.0.0sourceimpl<'a> Clone for EncodeWide<'a>1.10.0sourceimpl<'a> Clone for Location<'a>1.28.0sourceimpl<'a> Clone for Ancestors<'a>1.0.0sourceimpl<'a> Clone for Components<'a>1.0.0sourceimpl<'a> Clone for std::path::Iter<'a>1.0.0sourceimpl<'a> Clone for PrefixComponent<'a>1.60.0sourceimpl<'a> Clone for EscapeAscii<'a>sourceimpl<'a> Clone for CharSearcher<'a>1.0.0sourceimpl<'a> Clone for std::str::Bytes<'a>1.0.0sourceimpl<'a> Clone for CharIndices<'a>1.0.0sourceimpl<'a> Clone for Chars<'a>1.8.0sourceimpl<'a> Clone for EncodeUtf16<'a>1.34.0sourceimpl<'a> Clone for std::str::EscapeDebug<'a>1.34.0sourceimpl<'a> Clone for std::str::EscapeDefault<'a>1.34.0sourceimpl<'a> Clone for std::str::EscapeUnicode<'a>1.0.0sourceimpl<'a> Clone for Lines<'a>1.0.0sourceimpl<'a> Clone for LinesAny<'a>1.34.0sourceimpl<'a> Clone for SplitAsciiWhitespace<'a>1.1.0sourceimpl<'a> Clone for SplitWhitespace<'a>1.79.0sourceimpl<'a> Clone for Utf8Chunk<'a>1.79.0sourceimpl<'a> Clone for Utf8Chunks<'a>sourceimpl<'a, 'b> Clone for CharSliceSearcher<'a, 'b>sourceimpl<'a, 'b> Clone for StrSearcher<'a, 'b>sourceimpl<'a, 'b, const N: usize> Clone for CharArrayRefSearcher<'a, 'b, N>sourceimpl<'a, F> Clone for CharPredicateSearcher<'a, F>where
    F: Clone + FnMut(char) -> bool,sourceimpl<'a, K> Clone for std::collections::btree_set::Cursor<'a, K>where
    K: Clone + 'a,1.5.0sourceimpl<'a, P> Clone for MatchIndices<'a, P>where
    P: Pattern,
    <P as Pattern>::Searcher<'a>: Clone,1.2.0sourceimpl<'a, P> Clone for Matches<'a, P>where
    P: Pattern,
    <P as Pattern>::Searcher<'a>: Clone,1.5.0sourceimpl<'a, P> Clone for RMatchIndices<'a, P>where
    P: Pattern,
    <P as Pattern>::Searcher<'a>: Clone,1.2.0sourceimpl<'a, P> Clone for RMatches<'a, P>where
    P: Pattern,
    <P as Pattern>::Searcher<'a>: Clone,1.0.0sourceimpl<'a, P> Clone for std::str::RSplit<'a, P>where
    P: Pattern,
    <P as Pattern>::Searcher<'a>: Clone,1.0.0sourceimpl<'a, P> Clone for RSplitN<'a, P>where
    P: Pattern,
    <P as Pattern>::Searcher<'a>: Clone,1.0.0sourceimpl<'a, P> Clone for RSplitTerminator<'a, P>where
    P: Pattern,
    <P as Pattern>::Searcher<'a>: Clone,1.0.0sourceimpl<'a, P> Clone for std::str::Split<'a, P>where
    P: Pattern,
    <P as Pattern>::Searcher<'a>: Clone,1.51.0sourceimpl<'a, P> Clone for std::str::SplitInclusive<'a, P>where
    P: Pattern,
    <P as Pattern>::Searcher<'a>: Clone,1.0.0sourceimpl<'a, P> Clone for SplitN<'a, P>where
    P: Pattern,
    <P as Pattern>::Searcher<'a>: Clone,1.0.0sourceimpl<'a, P> Clone for SplitTerminator<'a, P>where
    P: Pattern,
    <P as Pattern>::Searcher<'a>: Clone,1.31.0sourceimpl<'a, T> Clone for RChunksExact<'a, T>sourceimpl<'a, T, const N: usize> Clone for ArrayWindows<'a, T, N>where
    T: Clone + 'a,sourceimpl<'a, const N: usize> Clone for CharArraySearcher<'a, N>sourceimpl<'f> Clone for VaListImpl<'f>1.63.0sourceimpl<'fd> Clone for BorrowedFd<'fd>1.63.0sourceimpl<'handle> Clone for BorrowedHandle<'handle>Available on Windows only.1.63.0sourceimpl<'socket> Clone for BorrowedSocket<'socket>Available on Windows only.sourceimpl<A> Clone for IterRange<A>where
    A: Clone,sourceimpl<A> Clone for IterRangeFrom<A>where
    A: Clone,sourceimpl<A> Clone for IterRangeInclusive<A>where
    A: Clone,1.0.0sourceimpl<A> Clone for Repeat<A>where
    A: Clone,1.82.0sourceimpl<A> Clone for RepeatN<A>where
    A: Clone,1.0.0sourceimpl<A> Clone for std::option::IntoIter<A>where
    A: Clone,1.0.0sourceimpl<A> Clone for std::option::Iter<'_, A>1.0.0sourceimpl<A, B> Clone for Chain<A, B>where
    A: Clone,
    B: Clone,1.0.0sourceimpl<A, B> Clone for Zip<A, B>where
    A: Clone,
    B: Clone,1.0.0sourceimpl<B> Clone for Cow<'_, B>where
    B: ToOwned + ?Sized,1.55.0sourceimpl<B, C> Clone for ControlFlow<B, C>where
    B: Clone,
    C: Clone,sourceimpl<Dyn> Clone for DynMetadata<Dyn>where
    Dyn: ?Sized,1.34.0sourceimpl<F> Clone for FromFn<F>where
    F: Clone,1.43.0sourceimpl<F> Clone for OnceWith<F>where
    F: Clone,1.28.0sourceimpl<F> Clone for RepeatWith<F>where
    F: Clone,1.7.0sourceimpl<H> Clone for BuildHasherDefault<H>sourceimpl<I> Clone for FromIter<I>where
    I: Clone,1.9.0sourceimpl<I> Clone for DecodeUtf16<I>where
    I: Clone + Iterator<Item = u16>,1.1.0sourceimpl<I> Clone for Cloned<I>where
    I: Clone,1.36.0sourceimpl<I> Clone for Copied<I>where
    I: Clone,1.0.0sourceimpl<I> Clone for Cycle<I>where
    I: Clone,1.0.0sourceimpl<I> Clone for Enumerate<I>where
    I: Clone,1.0.0sourceimpl<I> Clone for Fuse<I>where
    I: Clone,sourceimpl<I> Clone for Intersperse<I>where
    I: Clone + Iterator,
    <I as Iterator>::Item: Clone,1.0.0sourceimpl<I> Clone for Peekable<I>where
    I: Clone + Iterator,
    <I as Iterator>::Item: Clone,1.0.0sourceimpl<I> Clone for Skip<I>where
    I: Clone,1.28.0sourceimpl<I> Clone for StepBy<I>where
    I: Clone,1.0.0sourceimpl<I> Clone for Take<I>where
    I: Clone,1.0.0sourceimpl<I, F> Clone for FilterMap<I, F>where
    I: Clone,
    F: Clone,1.0.0sourceimpl<I, F> Clone for Inspect<I, F>where
    I: Clone,
    F: Clone,1.0.0sourceimpl<I, F> Clone for Map<I, F>where
    I: Clone,
    F: Clone,sourceimpl<I, F, const N: usize> Clone for MapWindows<I, F, N>where
    I: Iterator + Clone,
    F: Clone,
    <I as Iterator>::Item: Clone,sourceimpl<I, G> Clone for IntersperseWith<I, G>where
    I: Iterator + Clone,
    <I as Iterator>::Item: Clone,
    G: Clone,1.0.0sourceimpl<I, P> Clone for Filter<I, P>where
    I: Clone,
    P: Clone,1.57.0sourceimpl<I, P> Clone for MapWhile<I, P>where
    I: Clone,
    P: Clone,1.0.0sourceimpl<I, P> Clone for SkipWhile<I, P>where
    I: Clone,
    P: Clone,1.0.0sourceimpl<I, P> Clone for TakeWhile<I, P>where
    I: Clone,
    P: Clone,1.0.0sourceimpl<I, St, F> Clone for Scan<I, St, F>where
    I: Clone,
    St: Clone,
    F: Clone,1.29.0sourceimpl<I, U> Clone for Flatten<I>where
    I: Clone + Iterator,
    <I as Iterator>::Item: IntoIterator<IntoIter = U, Item = <U as Iterator>::Item>,
    U: Clone + Iterator,1.0.0sourceimpl<I, U, F> Clone for FlatMap<I, U, F>where
    I: Clone,
    F: Clone,
    U: Clone + IntoIterator,
    <U as IntoIterator>::IntoIter: Clone,sourceimpl<I, const N: usize> Clone for std::iter::ArrayChunks<I, N>where
    I: Clone + Iterator,
    <I as Iterator>::Item: Clone,sourceimpl<Idx> Clone for core::range::Range<Idx>where
    Idx: Clone,sourceimpl<Idx> Clone for core::range::RangeFrom<Idx>where
    Idx: Clone,sourceimpl<Idx> Clone for core::range::RangeInclusive<Idx>where
    Idx: Clone,1.0.0sourceimpl<Idx> Clone for std::ops::Range<Idx>where
    Idx: Clone,1.0.0sourceimpl<Idx> Clone for std::ops::RangeFrom<Idx>where
    Idx: Clone,1.26.0sourceimpl<Idx> Clone for std::ops::RangeInclusive<Idx>where
    Idx: Clone,1.0.0sourceimpl<Idx> Clone for RangeTo<Idx>where
    Idx: Clone,1.26.0sourceimpl<Idx> Clone for RangeToInclusive<Idx>where
    Idx: Clone,1.0.0sourceimpl<K> Clone for std::collections::hash_set::Iter<'_, K>sourceimpl<K, V> Clone for std::collections::btree_map::Cursor<'_, K, V>1.0.0sourceimpl<K, V> Clone for std::collections::btree_map::Iter<'_, K, V>1.0.0sourceimpl<K, V> Clone for std::collections::btree_map::Keys<'_, K, V>1.17.0sourceimpl<K, V> Clone for std::collections::btree_map::Range<'_, K, V>1.0.0sourceimpl<K, V> Clone for std::collections::btree_map::Values<'_, K, V>1.0.0sourceimpl<K, V> Clone for std::collections::hash_map::Iter<'_, K, V>1.0.0sourceimpl<K, V> Clone for std::collections::hash_map::Keys<'_, K, V>1.0.0sourceimpl<K, V> Clone for std::collections::hash_map::Values<'_, K, V>1.0.0sourceimpl<K, V, A> Clone for BTreeMap<K, V, A>where
    K: Clone,
    V: Clone,
    A: Allocator + Clone,1.0.0sourceimpl<K, V, S> Clone for HashMap<K, V, S>where
    K: Clone,
    V: Clone,
    S: Clone,1.33.0sourceimpl<Ptr> Clone for Pin<Ptr>where
    Ptr: Clone,1.0.0sourceimpl<T> !Clone for &mut Twhere
    T: ?Sized,
Shared references can be cloned, but mutable references cannot! 
1.17.0sourceimpl<T> Clone for Bound<T>where
    T: Clone,1.0.0sourceimpl<T> Clone for Option<T>where
    T: Clone,1.36.0sourceimpl<T> Clone for Poll<T>where
    T: Clone,1.0.0sourceimpl<T> Clone for *const Twhere
    T: ?Sized,1.0.0sourceimpl<T> Clone for *mut Twhere
    T: ?Sized,1.0.0sourceimpl<T> Clone for &Twhere
    T: ?Sized,
Shared references can be cloned, but mutable references cannot! 
1.0.0sourceimpl<T> Clone for Cell<T>where
    T: Copy,1.70.0sourceimpl<T> Clone for OnceCell<T>where
    T: Clone,1.0.0sourceimpl<T> Clone for RefCell<T>where
    T: Clone,1.19.0sourceimpl<T> Clone for Reverse<T>where
    T: Clone,1.0.0sourceimpl<T> Clone for std::collections::binary_heap::Iter<'_, T>1.0.0sourceimpl<T> Clone for std::collections::btree_set::Iter<'_, T>1.17.0sourceimpl<T> Clone for std::collections::btree_set::Range<'_, T>1.0.0sourceimpl<T> Clone for std::collections::btree_set::SymmetricDifference<'_, T>1.0.0sourceimpl<T> Clone for std::collections::btree_set::Union<'_, T>1.0.0sourceimpl<T> Clone for std::collections::linked_list::Iter<'_, T>1.0.0sourceimpl<T> Clone for std::collections::vec_deque::Iter<'_, T>1.48.0sourceimpl<T> Clone for Pending<T>1.48.0sourceimpl<T> Clone for Ready<T>where
    T: Clone,1.0.0sourceimpl<T> Clone for std::io::Cursor<T>where
    T: Clone,1.2.0sourceimpl<T> Clone for std::iter::Empty<T>1.2.0sourceimpl<T> Clone for Once<T>where
    T: Clone,1.0.0sourceimpl<T> Clone for Rev<T>where
    T: Clone,1.0.0sourceimpl<T> Clone for PhantomData<T>where
    T: ?Sized,1.21.0sourceimpl<T> Clone for Discriminant<T>1.20.0sourceimpl<T> Clone for ManuallyDrop<T>where
    T: Clone + ?Sized,1.28.0sourceimpl<T> Clone for NonZero<T>where
    T: ZeroablePrimitive,1.74.0sourceimpl<T> Clone for Saturating<T>where
    T: Clone,1.0.0sourceimpl<T> Clone for Wrapping<T>where
    T: Clone,1.25.0sourceimpl<T> Clone for NonNull<T>where
    T: ?Sized,1.0.0sourceimpl<T> Clone for std::result::IntoIter<T>where
    T: Clone,1.0.0sourceimpl<T> Clone for std::result::Iter<'_, T>1.0.0sourceimpl<T> Clone for Chunks<'_, T>1.31.0sourceimpl<T> Clone for ChunksExact<'_, T>1.0.0sourceimpl<T> Clone for std::slice::Iter<'_, T>1.31.0sourceimpl<T> Clone for RChunks<'_, T>1.0.0sourceimpl<T> Clone for Windows<'_, T>sourceimpl<T> Clone for Receiver<T>sourceimpl<T> Clone for std::sync::mpmc::Sender<T>1.0.0sourceimpl<T> Clone for std::sync::mpsc::Sender<T>1.0.0sourceimpl<T> Clone for SyncSender<T>1.36.0sourceimpl<T> Clone for MaybeUninit<T>where
    T: Copy,1.3.0sourceimpl<T, A> Clone for Box<[T], A>where
    T: Clone,
    A: Allocator + Clone,1.0.0sourceimpl<T, A> Clone for Box<T, A>where
    T: Clone,
    A: Allocator + Clone,1.0.0sourceimpl<T, A> Clone for BinaryHeap<T, A>where
    T: Clone,
    A: Allocator + Clone,1.0.0sourceimpl<T, A> Clone for std::collections::binary_heap::IntoIter<T, A>where
    T: Clone,
    A: Clone + Allocator,sourceimpl<T, A> Clone for IntoIterSorted<T, A>where
    T: Clone,
    A: Clone + Allocator,1.0.0sourceimpl<T, A> Clone for BTreeSet<T, A>where
    T: Clone,
    A: Allocator + Clone,1.0.0sourceimpl<T, A> Clone for std::collections::btree_set::Difference<'_, T, A>where
    A: Allocator + Clone,1.0.0sourceimpl<T, A> Clone for std::collections::btree_set::Intersection<'_, T, A>where
    A: Allocator + Clone,sourceimpl<T, A> Clone for std::collections::linked_list::Cursor<'_, T, A>where
    A: Allocator,1.0.0sourceimpl<T, A> Clone for std::collections::linked_list::IntoIter<T, A>where
    T: Clone,
    A: Clone + Allocator,1.0.0sourceimpl<T, A> Clone for LinkedList<T, A>where
    T: Clone,
    A: Allocator + Clone,1.0.0sourceimpl<T, A> Clone for std::collections::vec_deque::IntoIter<T, A>where
    T: Clone,
    A: Clone + Allocator,1.0.0sourceimpl<T, A> Clone for VecDeque<T, A>where
    T: Clone,
    A: Allocator + Clone,1.0.0sourceimpl<T, A> Clone for Rc<T, A>where
    A: Allocator + Clone,
    T: ?Sized,1.4.0sourceimpl<T, A> Clone for std::rc::Weak<T, A>where
    A: Allocator + Clone,
    T: ?Sized,1.0.0sourceimpl<T, A> Clone for Arc<T, A>where
    A: Allocator + Clone,
    T: ?Sized,1.4.0sourceimpl<T, A> Clone for std::sync::Weak<T, A>where
    A: Allocator + Clone,
    T: ?Sized,1.8.0sourceimpl<T, A> Clone for std::vec::IntoIter<T, A>where
    T: Clone,
    A: Allocator + Clone,1.0.0sourceimpl<T, A> Clone for Vec<T, A>where
    T: Clone,
    A: Allocator + Clone,1.0.0sourceimpl<T, E> Clone for Result<T, E>where
    T: Clone,
    E: Clone,1.34.0sourceimpl<T, F> Clone for Successors<T, F>where
    T: Clone,
    F: Clone,1.27.0sourceimpl<T, P> Clone for std::slice::RSplit<'_, T, P>where
    P: Clone + FnMut(&T) -> bool,1.0.0sourceimpl<T, P> Clone for std::slice::Split<'_, T, P>where
    P: Clone + FnMut(&T) -> bool,1.51.0sourceimpl<T, P> Clone for std::slice::SplitInclusive<'_, T, P>where
    P: Clone + FnMut(&T) -> bool,1.0.0sourceimpl<T, S> Clone for std::collections::hash_set::Difference<'_, T, S>1.0.0sourceimpl<T, S> Clone for HashSet<T, S>where
    T: Clone,
    S: Clone,1.0.0sourceimpl<T, S> Clone for std::collections::hash_set::Intersection<'_, T, S>1.0.0sourceimpl<T, S> Clone for std::collections::hash_set::SymmetricDifference<'_, T, S>1.0.0sourceimpl<T, S> Clone for std::collections::hash_set::Union<'_, T, S>1.58.0sourceimpl<T, const N: usize> Clone for [T; N]where
    T: Clone,1.40.0sourceimpl<T, const N: usize> Clone for std::array::IntoIter<T, N>where
    T: Clone,sourceimpl<T, const N: usize> Clone for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,sourceimpl<T, const N: usize> Clone for Simd<T, N>where
    LaneCount<N>: SupportedLaneCount,
    T: SimdElement,sourceimpl<T, const N: usize> Clone for std::slice::ArrayChunks<'_, T, N>sourceimpl<T: Clone> Clone for SendTimeoutError<T>1.0.0sourceimpl<T: Clone> Clone for TrySendError<T>1.0.0sourceimpl<T: Clone> Clone for SendError<T>1.70.0sourceimpl<T: Clone> Clone for OnceLock<T>sourceimpl<Y, R> Clone for CoroutineState<Y, R>where
    Y: Clone,
    R: Clone,

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/clone/trait.Clone.html


std/os/unix/fs/fn.fchown
-----------------------------------------------------------
Function fchown
pub fn fchown<F: AsFd>(fd: F, uid: Option<u32>, gid: Option<u32>) -> Result<()>
Available on Unix only.Change the owner and group of the file referenced by the specified open file descriptor. For semantics and required privileges, see chown. Examples use std::os::unix::fs;
fn main() -> std::io::Result<()> {
    let f = std::fs::File::open("/file")?;
    fs::fchown(&f, Some(0), Some(0))?;
    Ok(())
}
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/os/unix/fs/fn.fchown.html


std/os/raw/type.c_uchar
-----------------------------------------------------------
Type Alias c_uchar
pub type c_uchar = c_uchar;
Equivalent to Câ€™s unsigned char type. This type will always be u8, but is included for completeness. It is defined as being an unsigned integer the same size as a C char.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/os/raw/type.c_uchar.html


std/mem/fn.size_of_val
-----------------------------------------------------------
Function size_of_val
pub fn size_of_val<T>(val: &T) -> usizewhere
    T: ?Sized,
Returns the size of the pointed-to value in bytes. This is usually the same as size_of::<T>(). However, when T has no statically-known size, e.g., a slice [T] or a trait object, then size_of_val can be used to get the dynamically-known size. Examples use std::mem;
assert_eq!(4, mem::size_of_val(&5i32));
let x: [u8; 13] = [0; 13];
let y: &[u8] = &x;
assert_eq!(13, mem::size_of_val(y));
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/mem/fn.size_of_val.html


std/intrinsics/fn.fabsf128
-----------------------------------------------------------
Function fabsf128
pub unsafe extern "rust-intrinsic" fn fabsf128(x: f128) -> f128
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Returns the absolute value of an f128. The stabilized version of this intrinsic is f128::abs
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.fabsf128.html


std/simd/prelude/type.mask64x1
-----------------------------------------------------------
Type Alias mask64x1
pub type mask64x1 = Mask<i64, 1>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD mask with one element for vectors with 64-bit element types. The layout of this type is unspecified, and may change between platforms and/or Rust versions, and code should not assume that it is equivalent to [i64; 1]. Aliased Type
struct mask64x1(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/prelude/type.mask64x1.html


std/path/constant.main_separator_str
-----------------------------------------------------------
Constant MAIN_SEPARATOR_STR
pub const MAIN_SEPARATOR_STR: &str;
The primary separator of path components for the current platform. For example, / on Unix and \ on Windows.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/path/constant.MAIN_SEPARATOR_STR.html


std/ffi/type.c_long
-----------------------------------------------------------
Type Alias c_long
pub type c_long = i64;
Equivalent to Câ€™s signed long (long) type. This type will always be i32 or i64. Most notably, many Linux-based systems assume an i64, but Windows assumes i32. The C standard technically only requires that this type be a signed integer that is at least 32 bits and at least the size of an int, although in practice, no system would have a long that is neither an i32 nor i64.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/ffi/type.c_long.html


std/os/windows/io/struct.handleornull
-----------------------------------------------------------
Struct HandleOrNull
pub struct HandleOrNull(/* private fields */);
Available on Windows only.FFI type for handles in return values or out parameters, where NULL is used as a sentry value to indicate errors, such as in the return value of CreateThread. This uses repr(transparent) and has the representation of a host handle, so that it can be used in such FFI declarations. The only thing you can usefully do with a HandleOrNull is to convert it into an OwnedHandle using its TryFrom implementation; this conversion takes care of the check for NULL. This ensures that such FFI calls cannot start using the handle without checking for NULL first. This type may hold any handle value that OwnedHandle may hold. As with OwnedHandle, when it holds -1, that value is interpreted as a valid handle value, such as the current process handle, and not INVALID_HANDLE_VALUE. If this holds a non-null handle, it will close the handle on drop. Implementations
sourceimpl HandleOrNull
1.63.0sourcepub unsafe fn from_raw_handle(handle: RawHandle) -> Self
Constructs a new instance of Self from the given RawHandle returned from a Windows API that uses null to indicate failure, such as CreateThread. Use HandleOrInvalid instead of HandleOrNull for APIs that use INVALID_HANDLE_VALUE to indicate failure. Safety The passed handle value must either satisfy the safety requirements of FromRawHandle::from_raw_handle, or be null. Note that not all Windows APIs use null for errors; see here for the full story. 

Trait Implementations
1.63.0sourceimpl Debug for HandleOrNull
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

1.63.0sourceimpl Drop for HandleOrNull
sourcefn drop(&mut self)Executes the destructor for this type. Read more

1.63.0sourceimpl TryFrom<HandleOrNull> for OwnedHandle
sourcetype Error = NullHandleErrorThe type returned in the event of a conversion error.
sourcefn try_from(handle_or_null: HandleOrNull) -> Result<Self, NullHandleError>Performs the conversion.
1.63.0sourceimpl Send for HandleOrNull1.63.0sourceimpl Sync for HandleOrNull
Auto Trait Implementations
impl Freeze for HandleOrNullimpl RefUnwindSafe for HandleOrNullimpl Unpin for HandleOrNullimpl UnwindSafe for HandleOrNull
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/os/windows/io/struct.HandleOrNull.html


std/f128/consts/constant.frac_pi_3
-----------------------------------------------------------
Constant FRAC_PI_3
pub const FRAC_PI_3: f128 = 1.04719755119659774615421446109316762806572313312503527365831_f128; // 1.04719755119659774615421446109316766f128
ðŸ”¬This is a nightly-only experimental API. (f128 #116909)
Ï€/3
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/f128/consts/constant.FRAC_PI_3.html


std/intrinsics/fn.atomic_xadd_relaxed
-----------------------------------------------------------
Function atomic_xadd_relaxed
pub unsafe extern "rust-intrinsic" fn atomic_xadd_relaxed<T>(
    dst: *mut T,
    src: T,
) -> Twhere
    T: Copy,
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Adds to the current value, returning the previous value. The stabilized version of this intrinsic is available on the atomic types via the fetch_add method by passing Ordering::Relaxed as the order. For example, AtomicIsize::fetch_add.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.atomic_xadd_relaxed.html


std/intrinsics/fn.bitreverse
-----------------------------------------------------------
Function bitreverse
pub const extern "rust-intrinsic" fn bitreverse<T>(x: T) -> Twhere
    T: Copy,
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Reverses the bits in an integer type T. Note that, unlike most intrinsics, this is safe to call; it does not require an unsafe block. Therefore, implementations must not require the user to uphold any safety invariants. The stabilized versions of this intrinsic are available on the integer primitives via the reverse_bits method. For example, u32::reverse_bits
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.bitreverse.html


std/simd/prelude/type.u16x32
-----------------------------------------------------------
Type Alias u16x32
pub type u16x32 = Simd<u16, 32>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with 32 elements of type u16. Aliased Type
struct u16x32(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/prelude/type.u16x32.html


std/ops/trait.shr
-----------------------------------------------------------
Trait Shr
pub trait Shr<Rhs = Self> {
    type Output;
    // Required method
    fn shr(self, rhs: Rhs) -> Self::Output;
}
The right shift operator >>. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rustâ€™s type checker has special handling for _ >> _, setting the result type for integer operations to the type of the left-hand-side operand. This means that though a >> b and a.shr(b) are one and the same from an evaluation standpoint, they are different when it comes to type inference. Examples An implementation of Shr that lifts the >> operation on integers to a wrapper around usize. use std::ops::Shr;
#[derive(PartialEq, Debug)]
struct Scalar(usize);
impl Shr<Scalar> for Scalar {
    type Output = Self;
    fn shr(self, Self(rhs): Self) -> Self::Output {
        let Self(lhs) = self;
        Self(lhs >> rhs)
    }
}
assert_eq!(Scalar(16) >> Scalar(2), Scalar(4)); An implementation of Shr that spins a vector rightward by a given amount. use std::ops::Shr;
#[derive(PartialEq, Debug)]
struct SpinVector<T: Clone> {
    vec: Vec<T>,
}
impl<T: Clone> Shr<usize> for SpinVector<T> {
    type Output = Self;
    fn shr(self, rhs: usize) -> Self::Output {
        // Rotate the vector by `rhs` places.
        let (a, b) = self.vec.split_at(self.vec.len() - rhs);
        let mut spun_vector = vec![];
        spun_vector.extend_from_slice(b);
        spun_vector.extend_from_slice(a);
        Self { vec: spun_vector }
    }
}
assert_eq!(SpinVector { vec: vec![0, 1, 2, 3, 4] } >> 2,
           SpinVector { vec: vec![3, 4, 0, 1, 2] }); Required Associated Types
1.0.0sourcetype Output
The resulting type after applying the >> operator. 
Required Methods
1.0.0sourcefn shr(self, rhs: Rhs) -> Self::Output
Performs the >> operation. Examples assert_eq!(5u8 >> 1, 2);
assert_eq!(2u8 >> 1, 1); 
Implementors
1.0.0sourceimpl Shr for i8sourcetype Output = i8
1.0.0sourceimpl Shr for i16sourcetype Output = i16
1.0.0sourceimpl Shr for i32sourcetype Output = i32
1.0.0sourceimpl Shr for i64sourcetype Output = i64
1.0.0sourceimpl Shr for i128sourcetype Output = i128
1.0.0sourceimpl Shr for isizesourcetype Output = isize
1.0.0sourceimpl Shr for u8sourcetype Output = u8
1.0.0sourceimpl Shr for u16sourcetype Output = u16
1.0.0sourceimpl Shr for u32sourcetype Output = u32
1.0.0sourceimpl Shr for u64sourcetype Output = u64
1.0.0sourceimpl Shr for u128sourcetype Output = u128
1.0.0sourceimpl Shr for usizesourcetype Output = usize
1.0.0sourceimpl Shr<&i8> for &i8sourcetype Output = <i8 as Shr>::Output
1.0.0sourceimpl Shr<&i8> for &i16sourcetype Output = <i16 as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for &i32sourcetype Output = <i32 as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for &i64sourcetype Output = <i64 as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for &i128sourcetype Output = <i128 as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for &isizesourcetype Output = <isize as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for &u8sourcetype Output = <u8 as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for &u16sourcetype Output = <u16 as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for &u32sourcetype Output = <u32 as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for &u64sourcetype Output = <u64 as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for &u128sourcetype Output = <u128 as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for &usizesourcetype Output = <usize as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for i8sourcetype Output = <i8 as Shr>::Output
1.0.0sourceimpl Shr<&i8> for i16sourcetype Output = <i16 as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for i32sourcetype Output = <i32 as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for i64sourcetype Output = <i64 as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for i128sourcetype Output = <i128 as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for isizesourcetype Output = <isize as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for u8sourcetype Output = <u8 as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for u16sourcetype Output = <u16 as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for u32sourcetype Output = <u32 as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for u64sourcetype Output = <u64 as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for u128sourcetype Output = <u128 as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i8> for usizesourcetype Output = <usize as Shr<i8>>::Output
1.0.0sourceimpl Shr<&i16> for &i8sourcetype Output = <i8 as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for &i16sourcetype Output = <i16 as Shr>::Output
1.0.0sourceimpl Shr<&i16> for &i32sourcetype Output = <i32 as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for &i64sourcetype Output = <i64 as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for &i128sourcetype Output = <i128 as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for &isizesourcetype Output = <isize as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for &u8sourcetype Output = <u8 as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for &u16sourcetype Output = <u16 as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for &u32sourcetype Output = <u32 as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for &u64sourcetype Output = <u64 as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for &u128sourcetype Output = <u128 as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for &usizesourcetype Output = <usize as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for i8sourcetype Output = <i8 as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for i16sourcetype Output = <i16 as Shr>::Output
1.0.0sourceimpl Shr<&i16> for i32sourcetype Output = <i32 as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for i64sourcetype Output = <i64 as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for i128sourcetype Output = <i128 as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for isizesourcetype Output = <isize as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for u8sourcetype Output = <u8 as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for u16sourcetype Output = <u16 as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for u32sourcetype Output = <u32 as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for u64sourcetype Output = <u64 as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for u128sourcetype Output = <u128 as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i16> for usizesourcetype Output = <usize as Shr<i16>>::Output
1.0.0sourceimpl Shr<&i32> for &i8sourcetype Output = <i8 as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for &i16sourcetype Output = <i16 as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for &i32sourcetype Output = <i32 as Shr>::Output
1.0.0sourceimpl Shr<&i32> for &i64sourcetype Output = <i64 as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for &i128sourcetype Output = <i128 as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for &isizesourcetype Output = <isize as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for &u8sourcetype Output = <u8 as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for &u16sourcetype Output = <u16 as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for &u32sourcetype Output = <u32 as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for &u64sourcetype Output = <u64 as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for &u128sourcetype Output = <u128 as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for &usizesourcetype Output = <usize as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for i8sourcetype Output = <i8 as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for i16sourcetype Output = <i16 as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for i32sourcetype Output = <i32 as Shr>::Output
1.0.0sourceimpl Shr<&i32> for i64sourcetype Output = <i64 as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for i128sourcetype Output = <i128 as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for isizesourcetype Output = <isize as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for u8sourcetype Output = <u8 as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for u16sourcetype Output = <u16 as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for u32sourcetype Output = <u32 as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for u64sourcetype Output = <u64 as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for u128sourcetype Output = <u128 as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i32> for usizesourcetype Output = <usize as Shr<i32>>::Output
1.0.0sourceimpl Shr<&i64> for &i8sourcetype Output = <i8 as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for &i16sourcetype Output = <i16 as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for &i32sourcetype Output = <i32 as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for &i64sourcetype Output = <i64 as Shr>::Output
1.0.0sourceimpl Shr<&i64> for &i128sourcetype Output = <i128 as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for &isizesourcetype Output = <isize as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for &u8sourcetype Output = <u8 as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for &u16sourcetype Output = <u16 as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for &u32sourcetype Output = <u32 as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for &u64sourcetype Output = <u64 as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for &u128sourcetype Output = <u128 as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for &usizesourcetype Output = <usize as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for i8sourcetype Output = <i8 as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for i16sourcetype Output = <i16 as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for i32sourcetype Output = <i32 as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for i64sourcetype Output = <i64 as Shr>::Output
1.0.0sourceimpl Shr<&i64> for i128sourcetype Output = <i128 as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for isizesourcetype Output = <isize as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for u8sourcetype Output = <u8 as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for u16sourcetype Output = <u16 as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for u32sourcetype Output = <u32 as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for u64sourcetype Output = <u64 as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for u128sourcetype Output = <u128 as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i64> for usizesourcetype Output = <usize as Shr<i64>>::Output
1.0.0sourceimpl Shr<&i128> for &i8sourcetype Output = <i8 as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for &i16sourcetype Output = <i16 as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for &i32sourcetype Output = <i32 as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for &i64sourcetype Output = <i64 as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for &i128sourcetype Output = <i128 as Shr>::Output
1.0.0sourceimpl Shr<&i128> for &isizesourcetype Output = <isize as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for &u8sourcetype Output = <u8 as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for &u16sourcetype Output = <u16 as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for &u32sourcetype Output = <u32 as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for &u64sourcetype Output = <u64 as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for &u128sourcetype Output = <u128 as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for &usizesourcetype Output = <usize as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for i8sourcetype Output = <i8 as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for i16sourcetype Output = <i16 as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for i32sourcetype Output = <i32 as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for i64sourcetype Output = <i64 as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for i128sourcetype Output = <i128 as Shr>::Output
1.0.0sourceimpl Shr<&i128> for isizesourcetype Output = <isize as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for u8sourcetype Output = <u8 as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for u16sourcetype Output = <u16 as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for u32sourcetype Output = <u32 as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for u64sourcetype Output = <u64 as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for u128sourcetype Output = <u128 as Shr<i128>>::Output
1.0.0sourceimpl Shr<&i128> for usizesourcetype Output = <usize as Shr<i128>>::Output
1.0.0sourceimpl Shr<&isize> for &i8sourcetype Output = <i8 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for &i16sourcetype Output = <i16 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for &i32sourcetype Output = <i32 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for &i64sourcetype Output = <i64 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for &i128sourcetype Output = <i128 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for &isizesourcetype Output = <isize as Shr>::Output
1.0.0sourceimpl Shr<&isize> for &u8sourcetype Output = <u8 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for &u16sourcetype Output = <u16 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for &u32sourcetype Output = <u32 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for &u64sourcetype Output = <u64 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for &u128sourcetype Output = <u128 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for &usizesourcetype Output = <usize as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for i8sourcetype Output = <i8 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for i16sourcetype Output = <i16 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for i32sourcetype Output = <i32 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for i64sourcetype Output = <i64 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for i128sourcetype Output = <i128 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for isizesourcetype Output = <isize as Shr>::Output
1.0.0sourceimpl Shr<&isize> for u8sourcetype Output = <u8 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for u16sourcetype Output = <u16 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for u32sourcetype Output = <u32 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for u64sourcetype Output = <u64 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for u128sourcetype Output = <u128 as Shr<isize>>::Output
1.0.0sourceimpl Shr<&isize> for usizesourcetype Output = <usize as Shr<isize>>::Output
1.0.0sourceimpl Shr<&u8> for &i8sourcetype Output = <i8 as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for &i16sourcetype Output = <i16 as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for &i32sourcetype Output = <i32 as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for &i64sourcetype Output = <i64 as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for &i128sourcetype Output = <i128 as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for &isizesourcetype Output = <isize as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for &u8sourcetype Output = <u8 as Shr>::Output
1.0.0sourceimpl Shr<&u8> for &u16sourcetype Output = <u16 as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for &u32sourcetype Output = <u32 as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for &u64sourcetype Output = <u64 as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for &u128sourcetype Output = <u128 as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for &usizesourcetype Output = <usize as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for i8sourcetype Output = <i8 as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for i16sourcetype Output = <i16 as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for i32sourcetype Output = <i32 as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for i64sourcetype Output = <i64 as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for i128sourcetype Output = <i128 as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for isizesourcetype Output = <isize as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for u8sourcetype Output = <u8 as Shr>::Output
1.0.0sourceimpl Shr<&u8> for u16sourcetype Output = <u16 as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for u32sourcetype Output = <u32 as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for u64sourcetype Output = <u64 as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for u128sourcetype Output = <u128 as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u8> for usizesourcetype Output = <usize as Shr<u8>>::Output
1.0.0sourceimpl Shr<&u16> for &i8sourcetype Output = <i8 as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for &i16sourcetype Output = <i16 as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for &i32sourcetype Output = <i32 as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for &i64sourcetype Output = <i64 as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for &i128sourcetype Output = <i128 as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for &isizesourcetype Output = <isize as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for &u8sourcetype Output = <u8 as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for &u16sourcetype Output = <u16 as Shr>::Output
1.0.0sourceimpl Shr<&u16> for &u32sourcetype Output = <u32 as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for &u64sourcetype Output = <u64 as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for &u128sourcetype Output = <u128 as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for &usizesourcetype Output = <usize as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for i8sourcetype Output = <i8 as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for i16sourcetype Output = <i16 as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for i32sourcetype Output = <i32 as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for i64sourcetype Output = <i64 as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for i128sourcetype Output = <i128 as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for isizesourcetype Output = <isize as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for u8sourcetype Output = <u8 as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for u16sourcetype Output = <u16 as Shr>::Output
1.0.0sourceimpl Shr<&u16> for u32sourcetype Output = <u32 as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for u64sourcetype Output = <u64 as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for u128sourcetype Output = <u128 as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u16> for usizesourcetype Output = <usize as Shr<u16>>::Output
1.0.0sourceimpl Shr<&u32> for &i8sourcetype Output = <i8 as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for &i16sourcetype Output = <i16 as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for &i32sourcetype Output = <i32 as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for &i64sourcetype Output = <i64 as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for &i128sourcetype Output = <i128 as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for &isizesourcetype Output = <isize as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for &u8sourcetype Output = <u8 as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for &u16sourcetype Output = <u16 as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for &u32sourcetype Output = <u32 as Shr>::Output
1.0.0sourceimpl Shr<&u32> for &u64sourcetype Output = <u64 as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for &u128sourcetype Output = <u128 as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for &usizesourcetype Output = <usize as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for i8sourcetype Output = <i8 as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for i16sourcetype Output = <i16 as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for i32sourcetype Output = <i32 as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for i64sourcetype Output = <i64 as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for i128sourcetype Output = <i128 as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for isizesourcetype Output = <isize as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for u8sourcetype Output = <u8 as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for u16sourcetype Output = <u16 as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for u32sourcetype Output = <u32 as Shr>::Output
1.0.0sourceimpl Shr<&u32> for u64sourcetype Output = <u64 as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for u128sourcetype Output = <u128 as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u32> for usizesourcetype Output = <usize as Shr<u32>>::Output
1.0.0sourceimpl Shr<&u64> for &i8sourcetype Output = <i8 as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for &i16sourcetype Output = <i16 as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for &i32sourcetype Output = <i32 as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for &i64sourcetype Output = <i64 as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for &i128sourcetype Output = <i128 as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for &isizesourcetype Output = <isize as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for &u8sourcetype Output = <u8 as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for &u16sourcetype Output = <u16 as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for &u32sourcetype Output = <u32 as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for &u64sourcetype Output = <u64 as Shr>::Output
1.0.0sourceimpl Shr<&u64> for &u128sourcetype Output = <u128 as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for &usizesourcetype Output = <usize as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for i8sourcetype Output = <i8 as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for i16sourcetype Output = <i16 as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for i32sourcetype Output = <i32 as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for i64sourcetype Output = <i64 as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for i128sourcetype Output = <i128 as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for isizesourcetype Output = <isize as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for u8sourcetype Output = <u8 as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for u16sourcetype Output = <u16 as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for u32sourcetype Output = <u32 as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for u64sourcetype Output = <u64 as Shr>::Output
1.0.0sourceimpl Shr<&u64> for u128sourcetype Output = <u128 as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u64> for usizesourcetype Output = <usize as Shr<u64>>::Output
1.0.0sourceimpl Shr<&u128> for &i8sourcetype Output = <i8 as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for &i16sourcetype Output = <i16 as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for &i32sourcetype Output = <i32 as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for &i64sourcetype Output = <i64 as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for &i128sourcetype Output = <i128 as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for &isizesourcetype Output = <isize as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for &u8sourcetype Output = <u8 as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for &u16sourcetype Output = <u16 as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for &u32sourcetype Output = <u32 as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for &u64sourcetype Output = <u64 as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for &u128sourcetype Output = <u128 as Shr>::Output
1.0.0sourceimpl Shr<&u128> for &usizesourcetype Output = <usize as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for i8sourcetype Output = <i8 as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for i16sourcetype Output = <i16 as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for i32sourcetype Output = <i32 as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for i64sourcetype Output = <i64 as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for i128sourcetype Output = <i128 as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for isizesourcetype Output = <isize as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for u8sourcetype Output = <u8 as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for u16sourcetype Output = <u16 as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for u32sourcetype Output = <u32 as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for u64sourcetype Output = <u64 as Shr<u128>>::Output
1.0.0sourceimpl Shr<&u128> for u128sourcetype Output = <u128 as Shr>::Output
1.0.0sourceimpl Shr<&u128> for usizesourcetype Output = <usize as Shr<u128>>::Output
1.0.0sourceimpl Shr<&usize> for &i8sourcetype Output = <i8 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for &i16sourcetype Output = <i16 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for &i32sourcetype Output = <i32 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for &i64sourcetype Output = <i64 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for &i128sourcetype Output = <i128 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for &isizesourcetype Output = <isize as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for &u8sourcetype Output = <u8 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for &u16sourcetype Output = <u16 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for &u32sourcetype Output = <u32 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for &u64sourcetype Output = <u64 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for &u128sourcetype Output = <u128 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for &usizesourcetype Output = <usize as Shr>::Output
1.39.0sourceimpl Shr<&usize> for &Wrapping<i8>sourcetype Output = <Wrapping<i8> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for &Wrapping<i16>sourcetype Output = <Wrapping<i16> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for &Wrapping<i32>sourcetype Output = <Wrapping<i32> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for &Wrapping<i64>sourcetype Output = <Wrapping<i64> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for &Wrapping<i128>sourcetype Output = <Wrapping<i128> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for &Wrapping<isize>sourcetype Output = <Wrapping<isize> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for &Wrapping<u8>sourcetype Output = <Wrapping<u8> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for &Wrapping<u16>sourcetype Output = <Wrapping<u16> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for &Wrapping<u32>sourcetype Output = <Wrapping<u32> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for &Wrapping<u64>sourcetype Output = <Wrapping<u64> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for &Wrapping<u128>sourcetype Output = <Wrapping<u128> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for &Wrapping<usize>sourcetype Output = <Wrapping<usize> as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for i8sourcetype Output = <i8 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for i16sourcetype Output = <i16 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for i32sourcetype Output = <i32 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for i64sourcetype Output = <i64 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for i128sourcetype Output = <i128 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for isizesourcetype Output = <isize as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for u8sourcetype Output = <u8 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for u16sourcetype Output = <u16 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for u32sourcetype Output = <u32 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for u64sourcetype Output = <u64 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for u128sourcetype Output = <u128 as Shr<usize>>::Output
1.0.0sourceimpl Shr<&usize> for usizesourcetype Output = <usize as Shr>::Output
1.39.0sourceimpl Shr<&usize> for Wrapping<i8>sourcetype Output = <Wrapping<i8> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for Wrapping<i16>sourcetype Output = <Wrapping<i16> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for Wrapping<i32>sourcetype Output = <Wrapping<i32> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for Wrapping<i64>sourcetype Output = <Wrapping<i64> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for Wrapping<i128>sourcetype Output = <Wrapping<i128> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for Wrapping<isize>sourcetype Output = <Wrapping<isize> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for Wrapping<u8>sourcetype Output = <Wrapping<u8> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for Wrapping<u16>sourcetype Output = <Wrapping<u16> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for Wrapping<u32>sourcetype Output = <Wrapping<u32> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for Wrapping<u64>sourcetype Output = <Wrapping<u64> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for Wrapping<u128>sourcetype Output = <Wrapping<u128> as Shr<usize>>::Output
1.39.0sourceimpl Shr<&usize> for Wrapping<usize>sourcetype Output = <Wrapping<usize> as Shr<usize>>::Output
1.0.0sourceimpl Shr<i8> for i16sourcetype Output = i16
1.0.0sourceimpl Shr<i8> for i32sourcetype Output = i32
1.0.0sourceimpl Shr<i8> for i64sourcetype Output = i64
1.0.0sourceimpl Shr<i8> for i128sourcetype Output = i128
1.0.0sourceimpl Shr<i8> for isizesourcetype Output = isize
1.0.0sourceimpl Shr<i8> for u8sourcetype Output = u8
1.0.0sourceimpl Shr<i8> for u16sourcetype Output = u16
1.0.0sourceimpl Shr<i8> for u32sourcetype Output = u32
1.0.0sourceimpl Shr<i8> for u64sourcetype Output = u64
1.0.0sourceimpl Shr<i8> for u128sourcetype Output = u128
1.0.0sourceimpl Shr<i8> for usizesourcetype Output = usize
1.0.0sourceimpl Shr<i16> for i8sourcetype Output = i8
1.0.0sourceimpl Shr<i16> for i32sourcetype Output = i32
1.0.0sourceimpl Shr<i16> for i64sourcetype Output = i64
1.0.0sourceimpl Shr<i16> for i128sourcetype Output = i128
1.0.0sourceimpl Shr<i16> for isizesourcetype Output = isize
1.0.0sourceimpl Shr<i16> for u8sourcetype Output = u8
1.0.0sourceimpl Shr<i16> for u16sourcetype Output = u16
1.0.0sourceimpl Shr<i16> for u32sourcetype Output = u32
1.0.0sourceimpl Shr<i16> for u64sourcetype Output = u64
1.0.0sourceimpl Shr<i16> for u128sourcetype Output = u128
1.0.0sourceimpl Shr<i16> for usizesourcetype Output = usize
1.0.0sourceimpl Shr<i32> for i8sourcetype Output = i8
1.0.0sourceimpl Shr<i32> for i16sourcetype Output = i16
1.0.0sourceimpl Shr<i32> for i64sourcetype Output = i64
1.0.0sourceimpl Shr<i32> for i128sourcetype Output = i128
1.0.0sourceimpl Shr<i32> for isizesourcetype Output = isize
1.0.0sourceimpl Shr<i32> for u8sourcetype Output = u8
1.0.0sourceimpl Shr<i32> for u16sourcetype Output = u16
1.0.0sourceimpl Shr<i32> for u32sourcetype Output = u32
1.0.0sourceimpl Shr<i32> for u64sourcetype Output = u64
1.0.0sourceimpl Shr<i32> for u128sourcetype Output = u128
1.0.0sourceimpl Shr<i32> for usizesourcetype Output = usize
1.0.0sourceimpl Shr<i64> for i8sourcetype Output = i8
1.0.0sourceimpl Shr<i64> for i16sourcetype Output = i16
1.0.0sourceimpl Shr<i64> for i32sourcetype Output = i32
1.0.0sourceimpl Shr<i64> for i128sourcetype Output = i128
1.0.0sourceimpl Shr<i64> for isizesourcetype Output = isize
1.0.0sourceimpl Shr<i64> for u8sourcetype Output = u8
1.0.0sourceimpl Shr<i64> for u16sourcetype Output = u16
1.0.0sourceimpl Shr<i64> for u32sourcetype Output = u32
1.0.0sourceimpl Shr<i64> for u64sourcetype Output = u64
1.0.0sourceimpl Shr<i64> for u128sourcetype Output = u128
1.0.0sourceimpl Shr<i64> for usizesourcetype Output = usize
1.0.0sourceimpl Shr<i128> for i8sourcetype Output = i8
1.0.0sourceimpl Shr<i128> for i16sourcetype Output = i16
1.0.0sourceimpl Shr<i128> for i32sourcetype Output = i32
1.0.0sourceimpl Shr<i128> for i64sourcetype Output = i64
1.0.0sourceimpl Shr<i128> for isizesourcetype Output = isize
1.0.0sourceimpl Shr<i128> for u8sourcetype Output = u8
1.0.0sourceimpl Shr<i128> for u16sourcetype Output = u16
1.0.0sourceimpl Shr<i128> for u32sourcetype Output = u32
1.0.0sourceimpl Shr<i128> for u64sourcetype Output = u64
1.0.0sourceimpl Shr<i128> for u128sourcetype Output = u128
1.0.0sourceimpl Shr<i128> for usizesourcetype Output = usize
1.0.0sourceimpl Shr<isize> for i8sourcetype Output = i8
1.0.0sourceimpl Shr<isize> for i16sourcetype Output = i16
1.0.0sourceimpl Shr<isize> for i32sourcetype Output = i32
1.0.0sourceimpl Shr<isize> for i64sourcetype Output = i64
1.0.0sourceimpl Shr<isize> for i128sourcetype Output = i128
1.0.0sourceimpl Shr<isize> for u8sourcetype Output = u8
1.0.0sourceimpl Shr<isize> for u16sourcetype Output = u16
1.0.0sourceimpl Shr<isize> for u32sourcetype Output = u32
1.0.0sourceimpl Shr<isize> for u64sourcetype Output = u64
1.0.0sourceimpl Shr<isize> for u128sourcetype Output = u128
1.0.0sourceimpl Shr<isize> for usizesourcetype Output = usize
1.0.0sourceimpl Shr<u8> for i8sourcetype Output = i8
1.0.0sourceimpl Shr<u8> for i16sourcetype Output = i16
1.0.0sourceimpl Shr<u8> for i32sourcetype Output = i32
1.0.0sourceimpl Shr<u8> for i64sourcetype Output = i64
1.0.0sourceimpl Shr<u8> for i128sourcetype Output = i128
1.0.0sourceimpl Shr<u8> for isizesourcetype Output = isize
1.0.0sourceimpl Shr<u8> for u16sourcetype Output = u16
1.0.0sourceimpl Shr<u8> for u32sourcetype Output = u32
1.0.0sourceimpl Shr<u8> for u64sourcetype Output = u64
1.0.0sourceimpl Shr<u8> for u128sourcetype Output = u128
1.0.0sourceimpl Shr<u8> for usizesourcetype Output = usize
1.0.0sourceimpl Shr<u16> for i8sourcetype Output = i8
1.0.0sourceimpl Shr<u16> for i16sourcetype Output = i16
1.0.0sourceimpl Shr<u16> for i32sourcetype Output = i32
1.0.0sourceimpl Shr<u16> for i64sourcetype Output = i64
1.0.0sourceimpl Shr<u16> for i128sourcetype Output = i128
1.0.0sourceimpl Shr<u16> for isizesourcetype Output = isize
1.0.0sourceimpl Shr<u16> for u8sourcetype Output = u8
1.0.0sourceimpl Shr<u16> for u32sourcetype Output = u32
1.0.0sourceimpl Shr<u16> for u64sourcetype Output = u64
1.0.0sourceimpl Shr<u16> for u128sourcetype Output = u128
1.0.0sourceimpl Shr<u16> for usizesourcetype Output = usize
1.0.0sourceimpl Shr<u32> for i8sourcetype Output = i8
1.0.0sourceimpl Shr<u32> for i16sourcetype Output = i16
1.0.0sourceimpl Shr<u32> for i32sourcetype Output = i32
1.0.0sourceimpl Shr<u32> for i64sourcetype Output = i64
1.0.0sourceimpl Shr<u32> for i128sourcetype Output = i128
1.0.0sourceimpl Shr<u32> for isizesourcetype Output = isize
1.0.0sourceimpl Shr<u32> for u8sourcetype Output = u8
1.0.0sourceimpl Shr<u32> for u16sourcetype Output = u16
1.0.0sourceimpl Shr<u32> for u64sourcetype Output = u64
1.0.0sourceimpl Shr<u32> for u128sourcetype Output = u128
1.0.0sourceimpl Shr<u32> for usizesourcetype Output = usize
1.0.0sourceimpl Shr<u64> for i8sourcetype Output = i8
1.0.0sourceimpl Shr<u64> for i16sourcetype Output = i16
1.0.0sourceimpl Shr<u64> for i32sourcetype Output = i32
1.0.0sourceimpl Shr<u64> for i64sourcetype Output = i64
1.0.0sourceimpl Shr<u64> for i128sourcetype Output = i128
1.0.0sourceimpl Shr<u64> for isizesourcetype Output = isize
1.0.0sourceimpl Shr<u64> for u8sourcetype Output = u8
1.0.0sourceimpl Shr<u64> for u16sourcetype Output = u16
1.0.0sourceimpl Shr<u64> for u32sourcetype Output = u32
1.0.0sourceimpl Shr<u64> for u128sourcetype Output = u128
1.0.0sourceimpl Shr<u64> for usizesourcetype Output = usize
1.0.0sourceimpl Shr<u128> for i8sourcetype Output = i8
1.0.0sourceimpl Shr<u128> for i16sourcetype Output = i16
1.0.0sourceimpl Shr<u128> for i32sourcetype Output = i32
1.0.0sourceimpl Shr<u128> for i64sourcetype Output = i64
1.0.0sourceimpl Shr<u128> for i128sourcetype Output = i128
1.0.0sourceimpl Shr<u128> for isizesourcetype Output = isize
1.0.0sourceimpl Shr<u128> for u8sourcetype Output = u8
1.0.0sourceimpl Shr<u128> for u16sourcetype Output = u16
1.0.0sourceimpl Shr<u128> for u32sourcetype Output = u32
1.0.0sourceimpl Shr<u128> for u64sourcetype Output = u64
1.0.0sourceimpl Shr<u128> for usizesourcetype Output = usize
1.0.0sourceimpl Shr<usize> for i8sourcetype Output = i8
1.0.0sourceimpl Shr<usize> for i16sourcetype Output = i16
1.0.0sourceimpl Shr<usize> for i32sourcetype Output = i32
1.0.0sourceimpl Shr<usize> for i64sourcetype Output = i64
1.0.0sourceimpl Shr<usize> for i128sourcetype Output = i128
1.0.0sourceimpl Shr<usize> for isizesourcetype Output = isize
1.0.0sourceimpl Shr<usize> for u8sourcetype Output = u8
1.0.0sourceimpl Shr<usize> for u16sourcetype Output = u16
1.0.0sourceimpl Shr<usize> for u32sourcetype Output = u32
1.0.0sourceimpl Shr<usize> for u64sourcetype Output = u64
1.0.0sourceimpl Shr<usize> for u128sourcetype Output = u128
1.0.0sourceimpl Shr<usize> for Wrapping<i8>sourcetype Output = Wrapping<i8>
1.0.0sourceimpl Shr<usize> for Wrapping<i16>sourcetype Output = Wrapping<i16>
1.0.0sourceimpl Shr<usize> for Wrapping<i32>sourcetype Output = Wrapping<i32>
1.0.0sourceimpl Shr<usize> for Wrapping<i64>sourcetype Output = Wrapping<i64>
1.0.0sourceimpl Shr<usize> for Wrapping<i128>sourcetype Output = Wrapping<i128>
1.0.0sourceimpl Shr<usize> for Wrapping<isize>sourcetype Output = Wrapping<isize>
1.0.0sourceimpl Shr<usize> for Wrapping<u8>sourcetype Output = Wrapping<u8>
1.0.0sourceimpl Shr<usize> for Wrapping<u16>sourcetype Output = Wrapping<u16>
1.0.0sourceimpl Shr<usize> for Wrapping<u32>sourcetype Output = Wrapping<u32>
1.0.0sourceimpl Shr<usize> for Wrapping<u64>sourcetype Output = Wrapping<u64>
1.0.0sourceimpl Shr<usize> for Wrapping<u128>sourcetype Output = Wrapping<u128>
1.0.0sourceimpl Shr<usize> for Wrapping<usize>sourcetype Output = Wrapping<usize>
1.0.0sourceimpl<'a> Shr<i8> for &'a i8sourcetype Output = <i8 as Shr>::Output
1.0.0sourceimpl<'a> Shr<i8> for &'a i16sourcetype Output = <i16 as Shr<i8>>::Output
1.0.0sourceimpl<'a> Shr<i8> for &'a i32sourcetype Output = <i32 as Shr<i8>>::Output
1.0.0sourceimpl<'a> Shr<i8> for &'a i64sourcetype Output = <i64 as Shr<i8>>::Output
1.0.0sourceimpl<'a> Shr<i8> for &'a i128sourcetype Output = <i128 as Shr<i8>>::Output
1.0.0sourceimpl<'a> Shr<i8> for &'a isizesourcetype Output = <isize as Shr<i8>>::Output
1.0.0sourceimpl<'a> Shr<i8> for &'a u8sourcetype Output = <u8 as Shr<i8>>::Output
1.0.0sourceimpl<'a> Shr<i8> for &'a u16sourcetype Output = <u16 as Shr<i8>>::Output
1.0.0sourceimpl<'a> Shr<i8> for &'a u32sourcetype Output = <u32 as Shr<i8>>::Output
1.0.0sourceimpl<'a> Shr<i8> for &'a u64sourcetype Output = <u64 as Shr<i8>>::Output
1.0.0sourceimpl<'a> Shr<i8> for &'a u128sourcetype Output = <u128 as Shr<i8>>::Output
1.0.0sourceimpl<'a> Shr<i8> for &'a usizesourcetype Output = <usize as Shr<i8>>::Output
1.0.0sourceimpl<'a> Shr<i16> for &'a i8sourcetype Output = <i8 as Shr<i16>>::Output
1.0.0sourceimpl<'a> Shr<i16> for &'a i16sourcetype Output = <i16 as Shr>::Output
1.0.0sourceimpl<'a> Shr<i16> for &'a i32sourcetype Output = <i32 as Shr<i16>>::Output
1.0.0sourceimpl<'a> Shr<i16> for &'a i64sourcetype Output = <i64 as Shr<i16>>::Output
1.0.0sourceimpl<'a> Shr<i16> for &'a i128sourcetype Output = <i128 as Shr<i16>>::Output
1.0.0sourceimpl<'a> Shr<i16> for &'a isizesourcetype Output = <isize as Shr<i16>>::Output
1.0.0sourceimpl<'a> Shr<i16> for &'a u8sourcetype Output = <u8 as Shr<i16>>::Output
1.0.0sourceimpl<'a> Shr<i16> for &'a u16sourcetype Output = <u16 as Shr<i16>>::Output
1.0.0sourceimpl<'a> Shr<i16> for &'a u32sourcetype Output = <u32 as Shr<i16>>::Output
1.0.0sourceimpl<'a> Shr<i16> for &'a u64sourcetype Output = <u64 as Shr<i16>>::Output
1.0.0sourceimpl<'a> Shr<i16> for &'a u128sourcetype Output = <u128 as Shr<i16>>::Output
1.0.0sourceimpl<'a> Shr<i16> for &'a usizesourcetype Output = <usize as Shr<i16>>::Output
1.0.0sourceimpl<'a> Shr<i32> for &'a i8sourcetype Output = <i8 as Shr<i32>>::Output
1.0.0sourceimpl<'a> Shr<i32> for &'a i16sourcetype Output = <i16 as Shr<i32>>::Output
1.0.0sourceimpl<'a> Shr<i32> for &'a i32sourcetype Output = <i32 as Shr>::Output
1.0.0sourceimpl<'a> Shr<i32> for &'a i64sourcetype Output = <i64 as Shr<i32>>::Output
1.0.0sourceimpl<'a> Shr<i32> for &'a i128sourcetype Output = <i128 as Shr<i32>>::Output
1.0.0sourceimpl<'a> Shr<i32> for &'a isizesourcetype Output = <isize as Shr<i32>>::Output
1.0.0sourceimpl<'a> Shr<i32> for &'a u8sourcetype Output = <u8 as Shr<i32>>::Output
1.0.0sourceimpl<'a> Shr<i32> for &'a u16sourcetype Output = <u16 as Shr<i32>>::Output
1.0.0sourceimpl<'a> Shr<i32> for &'a u32sourcetype Output = <u32 as Shr<i32>>::Output
1.0.0sourceimpl<'a> Shr<i32> for &'a u64sourcetype Output = <u64 as Shr<i32>>::Output
1.0.0sourceimpl<'a> Shr<i32> for &'a u128sourcetype Output = <u128 as Shr<i32>>::Output
1.0.0sourceimpl<'a> Shr<i32> for &'a usizesourcetype Output = <usize as Shr<i32>>::Output
1.0.0sourceimpl<'a> Shr<i64> for &'a i8sourcetype Output = <i8 as Shr<i64>>::Output
1.0.0sourceimpl<'a> Shr<i64> for &'a i16sourcetype Output = <i16 as Shr<i64>>::Output
1.0.0sourceimpl<'a> Shr<i64> for &'a i32sourcetype Output = <i32 as Shr<i64>>::Output
1.0.0sourceimpl<'a> Shr<i64> for &'a i64sourcetype Output = <i64 as Shr>::Output
1.0.0sourceimpl<'a> Shr<i64> for &'a i128sourcetype Output = <i128 as Shr<i64>>::Output
1.0.0sourceimpl<'a> Shr<i64> for &'a isizesourcetype Output = <isize as Shr<i64>>::Output
1.0.0sourceimpl<'a> Shr<i64> for &'a u8sourcetype Output = <u8 as Shr<i64>>::Output
1.0.0sourceimpl<'a> Shr<i64> for &'a u16sourcetype Output = <u16 as Shr<i64>>::Output
1.0.0sourceimpl<'a> Shr<i64> for &'a u32sourcetype Output = <u32 as Shr<i64>>::Output
1.0.0sourceimpl<'a> Shr<i64> for &'a u64sourcetype Output = <u64 as Shr<i64>>::Output
1.0.0sourceimpl<'a> Shr<i64> for &'a u128sourcetype Output = <u128 as Shr<i64>>::Output
1.0.0sourceimpl<'a> Shr<i64> for &'a usizesourcetype Output = <usize as Shr<i64>>::Output
1.0.0sourceimpl<'a> Shr<i128> for &'a i8sourcetype Output = <i8 as Shr<i128>>::Output
1.0.0sourceimpl<'a> Shr<i128> for &'a i16sourcetype Output = <i16 as Shr<i128>>::Output
1.0.0sourceimpl<'a> Shr<i128> for &'a i32sourcetype Output = <i32 as Shr<i128>>::Output
1.0.0sourceimpl<'a> Shr<i128> for &'a i64sourcetype Output = <i64 as Shr<i128>>::Output
1.0.0sourceimpl<'a> Shr<i128> for &'a i128sourcetype Output = <i128 as Shr>::Output
1.0.0sourceimpl<'a> Shr<i128> for &'a isizesourcetype Output = <isize as Shr<i128>>::Output
1.0.0sourceimpl<'a> Shr<i128> for &'a u8sourcetype Output = <u8 as Shr<i128>>::Output
1.0.0sourceimpl<'a> Shr<i128> for &'a u16sourcetype Output = <u16 as Shr<i128>>::Output
1.0.0sourceimpl<'a> Shr<i128> for &'a u32sourcetype Output = <u32 as Shr<i128>>::Output
1.0.0sourceimpl<'a> Shr<i128> for &'a u64sourcetype Output = <u64 as Shr<i128>>::Output
1.0.0sourceimpl<'a> Shr<i128> for &'a u128sourcetype Output = <u128 as Shr<i128>>::Output
1.0.0sourceimpl<'a> Shr<i128> for &'a usizesourcetype Output = <usize as Shr<i128>>::Output
1.0.0sourceimpl<'a> Shr<isize> for &'a i8sourcetype Output = <i8 as Shr<isize>>::Output
1.0.0sourceimpl<'a> Shr<isize> for &'a i16sourcetype Output = <i16 as Shr<isize>>::Output
1.0.0sourceimpl<'a> Shr<isize> for &'a i32sourcetype Output = <i32 as Shr<isize>>::Output
1.0.0sourceimpl<'a> Shr<isize> for &'a i64sourcetype Output = <i64 as Shr<isize>>::Output
1.0.0sourceimpl<'a> Shr<isize> for &'a i128sourcetype Output = <i128 as Shr<isize>>::Output
1.0.0sourceimpl<'a> Shr<isize> for &'a isizesourcetype Output = <isize as Shr>::Output
1.0.0sourceimpl<'a> Shr<isize> for &'a u8sourcetype Output = <u8 as Shr<isize>>::Output
1.0.0sourceimpl<'a> Shr<isize> for &'a u16sourcetype Output = <u16 as Shr<isize>>::Output
1.0.0sourceimpl<'a> Shr<isize> for &'a u32sourcetype Output = <u32 as Shr<isize>>::Output
1.0.0sourceimpl<'a> Shr<isize> for &'a u64sourcetype Output = <u64 as Shr<isize>>::Output
1.0.0sourceimpl<'a> Shr<isize> for &'a u128sourcetype Output = <u128 as Shr<isize>>::Output
1.0.0sourceimpl<'a> Shr<isize> for &'a usizesourcetype Output = <usize as Shr<isize>>::Output
1.0.0sourceimpl<'a> Shr<u8> for &'a i8sourcetype Output = <i8 as Shr<u8>>::Output
1.0.0sourceimpl<'a> Shr<u8> for &'a i16sourcetype Output = <i16 as Shr<u8>>::Output
1.0.0sourceimpl<'a> Shr<u8> for &'a i32sourcetype Output = <i32 as Shr<u8>>::Output
1.0.0sourceimpl<'a> Shr<u8> for &'a i64sourcetype Output = <i64 as Shr<u8>>::Output
1.0.0sourceimpl<'a> Shr<u8> for &'a i128sourcetype Output = <i128 as Shr<u8>>::Output
1.0.0sourceimpl<'a> Shr<u8> for &'a isizesourcetype Output = <isize as Shr<u8>>::Output
1.0.0sourceimpl<'a> Shr<u8> for &'a u8sourcetype Output = <u8 as Shr>::Output
1.0.0sourceimpl<'a> Shr<u8> for &'a u16sourcetype Output = <u16 as Shr<u8>>::Output
1.0.0sourceimpl<'a> Shr<u8> for &'a u32sourcetype Output = <u32 as Shr<u8>>::Output
1.0.0sourceimpl<'a> Shr<u8> for &'a u64sourcetype Output = <u64 as Shr<u8>>::Output
1.0.0sourceimpl<'a> Shr<u8> for &'a u128sourcetype Output = <u128 as Shr<u8>>::Output
1.0.0sourceimpl<'a> Shr<u8> for &'a usizesourcetype Output = <usize as Shr<u8>>::Output
1.0.0sourceimpl<'a> Shr<u16> for &'a i8sourcetype Output = <i8 as Shr<u16>>::Output
1.0.0sourceimpl<'a> Shr<u16> for &'a i16sourcetype Output = <i16 as Shr<u16>>::Output
1.0.0sourceimpl<'a> Shr<u16> for &'a i32sourcetype Output = <i32 as Shr<u16>>::Output
1.0.0sourceimpl<'a> Shr<u16> for &'a i64sourcetype Output = <i64 as Shr<u16>>::Output
1.0.0sourceimpl<'a> Shr<u16> for &'a i128sourcetype Output = <i128 as Shr<u16>>::Output
1.0.0sourceimpl<'a> Shr<u16> for &'a isizesourcetype Output = <isize as Shr<u16>>::Output
1.0.0sourceimpl<'a> Shr<u16> for &'a u8sourcetype Output = <u8 as Shr<u16>>::Output
1.0.0sourceimpl<'a> Shr<u16> for &'a u16sourcetype Output = <u16 as Shr>::Output
1.0.0sourceimpl<'a> Shr<u16> for &'a u32sourcetype Output = <u32 as Shr<u16>>::Output
1.0.0sourceimpl<'a> Shr<u16> for &'a u64sourcetype Output = <u64 as Shr<u16>>::Output
1.0.0sourceimpl<'a> Shr<u16> for &'a u128sourcetype Output = <u128 as Shr<u16>>::Output
1.0.0sourceimpl<'a> Shr<u16> for &'a usizesourcetype Output = <usize as Shr<u16>>::Output
1.0.0sourceimpl<'a> Shr<u32> for &'a i8sourcetype Output = <i8 as Shr<u32>>::Output
1.0.0sourceimpl<'a> Shr<u32> for &'a i16sourcetype Output = <i16 as Shr<u32>>::Output
1.0.0sourceimpl<'a> Shr<u32> for &'a i32sourcetype Output = <i32 as Shr<u32>>::Output
1.0.0sourceimpl<'a> Shr<u32> for &'a i64sourcetype Output = <i64 as Shr<u32>>::Output
1.0.0sourceimpl<'a> Shr<u32> for &'a i128sourcetype Output = <i128 as Shr<u32>>::Output
1.0.0sourceimpl<'a> Shr<u32> for &'a isizesourcetype Output = <isize as Shr<u32>>::Output
1.0.0sourceimpl<'a> Shr<u32> for &'a u8sourcetype Output = <u8 as Shr<u32>>::Output
1.0.0sourceimpl<'a> Shr<u32> for &'a u16sourcetype Output = <u16 as Shr<u32>>::Output
1.0.0sourceimpl<'a> Shr<u32> for &'a u32sourcetype Output = <u32 as Shr>::Output
1.0.0sourceimpl<'a> Shr<u32> for &'a u64sourcetype Output = <u64 as Shr<u32>>::Output
1.0.0sourceimpl<'a> Shr<u32> for &'a u128sourcetype Output = <u128 as Shr<u32>>::Output
1.0.0sourceimpl<'a> Shr<u32> for &'a usizesourcetype Output = <usize as Shr<u32>>::Output
1.0.0sourceimpl<'a> Shr<u64> for &'a i8sourcetype Output = <i8 as Shr<u64>>::Output
1.0.0sourceimpl<'a> Shr<u64> for &'a i16sourcetype Output = <i16 as Shr<u64>>::Output
1.0.0sourceimpl<'a> Shr<u64> for &'a i32sourcetype Output = <i32 as Shr<u64>>::Output
1.0.0sourceimpl<'a> Shr<u64> for &'a i64sourcetype Output = <i64 as Shr<u64>>::Output
1.0.0sourceimpl<'a> Shr<u64> for &'a i128sourcetype Output = <i128 as Shr<u64>>::Output
1.0.0sourceimpl<'a> Shr<u64> for &'a isizesourcetype Output = <isize as Shr<u64>>::Output
1.0.0sourceimpl<'a> Shr<u64> for &'a u8sourcetype Output = <u8 as Shr<u64>>::Output
1.0.0sourceimpl<'a> Shr<u64> for &'a u16sourcetype Output = <u16 as Shr<u64>>::Output
1.0.0sourceimpl<'a> Shr<u64> for &'a u32sourcetype Output = <u32 as Shr<u64>>::Output
1.0.0sourceimpl<'a> Shr<u64> for &'a u64sourcetype Output = <u64 as Shr>::Output
1.0.0sourceimpl<'a> Shr<u64> for &'a u128sourcetype Output = <u128 as Shr<u64>>::Output
1.0.0sourceimpl<'a> Shr<u64> for &'a usizesourcetype Output = <usize as Shr<u64>>::Output
1.0.0sourceimpl<'a> Shr<u128> for &'a i8sourcetype Output = <i8 as Shr<u128>>::Output
1.0.0sourceimpl<'a> Shr<u128> for &'a i16sourcetype Output = <i16 as Shr<u128>>::Output
1.0.0sourceimpl<'a> Shr<u128> for &'a i32sourcetype Output = <i32 as Shr<u128>>::Output
1.0.0sourceimpl<'a> Shr<u128> for &'a i64sourcetype Output = <i64 as Shr<u128>>::Output
1.0.0sourceimpl<'a> Shr<u128> for &'a i128sourcetype Output = <i128 as Shr<u128>>::Output
1.0.0sourceimpl<'a> Shr<u128> for &'a isizesourcetype Output = <isize as Shr<u128>>::Output
1.0.0sourceimpl<'a> Shr<u128> for &'a u8sourcetype Output = <u8 as Shr<u128>>::Output
1.0.0sourceimpl<'a> Shr<u128> for &'a u16sourcetype Output = <u16 as Shr<u128>>::Output
1.0.0sourceimpl<'a> Shr<u128> for &'a u32sourcetype Output = <u32 as Shr<u128>>::Output
1.0.0sourceimpl<'a> Shr<u128> for &'a u64sourcetype Output = <u64 as Shr<u128>>::Output
1.0.0sourceimpl<'a> Shr<u128> for &'a u128sourcetype Output = <u128 as Shr>::Output
1.0.0sourceimpl<'a> Shr<u128> for &'a usizesourcetype Output = <usize as Shr<u128>>::Output
1.0.0sourceimpl<'a> Shr<usize> for &'a i8sourcetype Output = <i8 as Shr<usize>>::Output
1.0.0sourceimpl<'a> Shr<usize> for &'a i16sourcetype Output = <i16 as Shr<usize>>::Output
1.0.0sourceimpl<'a> Shr<usize> for &'a i32sourcetype Output = <i32 as Shr<usize>>::Output
1.0.0sourceimpl<'a> Shr<usize> for &'a i64sourcetype Output = <i64 as Shr<usize>>::Output
1.0.0sourceimpl<'a> Shr<usize> for &'a i128sourcetype Output = <i128 as Shr<usize>>::Output
1.0.0sourceimpl<'a> Shr<usize> for &'a isizesourcetype Output = <isize as Shr<usize>>::Output
1.0.0sourceimpl<'a> Shr<usize> for &'a u8sourcetype Output = <u8 as Shr<usize>>::Output
1.0.0sourceimpl<'a> Shr<usize> for &'a u16sourcetype Output = <u16 as Shr<usize>>::Output
1.0.0sourceimpl<'a> Shr<usize> for &'a u32sourcetype Output = <u32 as Shr<usize>>::Output
1.0.0sourceimpl<'a> Shr<usize> for &'a u64sourcetype Output = <u64 as Shr<usize>>::Output
1.0.0sourceimpl<'a> Shr<usize> for &'a u128sourcetype Output = <u128 as Shr<usize>>::Output
1.0.0sourceimpl<'a> Shr<usize> for &'a usizesourcetype Output = <usize as Shr>::Output
1.39.0sourceimpl<'a> Shr<usize> for &'a Wrapping<i8>sourcetype Output = <Wrapping<i8> as Shr<usize>>::Output
1.39.0sourceimpl<'a> Shr<usize> for &'a Wrapping<i16>sourcetype Output = <Wrapping<i16> as Shr<usize>>::Output
1.39.0sourceimpl<'a> Shr<usize> for &'a Wrapping<i32>sourcetype Output = <Wrapping<i32> as Shr<usize>>::Output
1.39.0sourceimpl<'a> Shr<usize> for &'a Wrapping<i64>sourcetype Output = <Wrapping<i64> as Shr<usize>>::Output
1.39.0sourceimpl<'a> Shr<usize> for &'a Wrapping<i128>sourcetype Output = <Wrapping<i128> as Shr<usize>>::Output
1.39.0sourceimpl<'a> Shr<usize> for &'a Wrapping<isize>sourcetype Output = <Wrapping<isize> as Shr<usize>>::Output
1.39.0sourceimpl<'a> Shr<usize> for &'a Wrapping<u8>sourcetype Output = <Wrapping<u8> as Shr<usize>>::Output
1.39.0sourceimpl<'a> Shr<usize> for &'a Wrapping<u16>sourcetype Output = <Wrapping<u16> as Shr<usize>>::Output
1.39.0sourceimpl<'a> Shr<usize> for &'a Wrapping<u32>sourcetype Output = <Wrapping<u32> as Shr<usize>>::Output
1.39.0sourceimpl<'a> Shr<usize> for &'a Wrapping<u64>sourcetype Output = <Wrapping<u64> as Shr<usize>>::Output
1.39.0sourceimpl<'a> Shr<usize> for &'a Wrapping<u128>sourcetype Output = <Wrapping<u128> as Shr<usize>>::Output
1.39.0sourceimpl<'a> Shr<usize> for &'a Wrapping<usize>sourcetype Output = <Wrapping<usize> as Shr<usize>>::Output
sourceimpl<'lhs, 'rhs, T, const N: usize> Shr<&'rhs Simd<T, N>> for &'lhs Simd<T, N>where
    T: SimdElement,
    Simd<T, N>: Shr<Output = Simd<T, N>>,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<T, N>
sourceimpl<'lhs, const N: usize> Shr<&i8> for &'lhs Simd<i8, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i8, N>
sourceimpl<'lhs, const N: usize> Shr<&i16> for &'lhs Simd<i16, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i16, N>
sourceimpl<'lhs, const N: usize> Shr<&i32> for &'lhs Simd<i32, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i32, N>
sourceimpl<'lhs, const N: usize> Shr<&i64> for &'lhs Simd<i64, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i64, N>
sourceimpl<'lhs, const N: usize> Shr<&isize> for &'lhs Simd<isize, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<isize, N>
sourceimpl<'lhs, const N: usize> Shr<&u8> for &'lhs Simd<u8, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u8, N>
sourceimpl<'lhs, const N: usize> Shr<&u16> for &'lhs Simd<u16, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u16, N>
sourceimpl<'lhs, const N: usize> Shr<&u32> for &'lhs Simd<u32, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u32, N>
sourceimpl<'lhs, const N: usize> Shr<&u64> for &'lhs Simd<u64, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u64, N>
sourceimpl<'lhs, const N: usize> Shr<&usize> for &'lhs Simd<usize, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<usize, N>
sourceimpl<'lhs, const N: usize> Shr<i8> for &'lhs Simd<i8, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i8, N>
sourceimpl<'lhs, const N: usize> Shr<i16> for &'lhs Simd<i16, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i16, N>
sourceimpl<'lhs, const N: usize> Shr<i32> for &'lhs Simd<i32, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i32, N>
sourceimpl<'lhs, const N: usize> Shr<i64> for &'lhs Simd<i64, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i64, N>
sourceimpl<'lhs, const N: usize> Shr<isize> for &'lhs Simd<isize, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<isize, N>
sourceimpl<'lhs, const N: usize> Shr<u8> for &'lhs Simd<u8, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u8, N>
sourceimpl<'lhs, const N: usize> Shr<u16> for &'lhs Simd<u16, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u16, N>
sourceimpl<'lhs, const N: usize> Shr<u32> for &'lhs Simd<u32, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u32, N>
sourceimpl<'lhs, const N: usize> Shr<u64> for &'lhs Simd<u64, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u64, N>
sourceimpl<'lhs, const N: usize> Shr<usize> for &'lhs Simd<usize, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<usize, N>
sourceimpl<T, const N: usize> Shr<&Simd<T, N>> for Simd<T, N>where
    T: SimdElement,
    Simd<T, N>: Shr<Output = Simd<T, N>>,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<T, N>
sourceimpl<T, const N: usize> Shr<Simd<T, N>> for &Simd<T, N>where
    T: SimdElement,
    Simd<T, N>: Shr<Output = Simd<T, N>>,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<T, N>
sourceimpl<const N: usize> Shr for Simd<i8, N>where
    i8: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i8, N>
sourceimpl<const N: usize> Shr for Simd<i16, N>where
    i16: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i16, N>
sourceimpl<const N: usize> Shr for Simd<i32, N>where
    i32: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i32, N>
sourceimpl<const N: usize> Shr for Simd<i64, N>where
    i64: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i64, N>
sourceimpl<const N: usize> Shr for Simd<isize, N>where
    isize: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<isize, N>
sourceimpl<const N: usize> Shr for Simd<u8, N>where
    u8: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u8, N>
sourceimpl<const N: usize> Shr for Simd<u16, N>where
    u16: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u16, N>
sourceimpl<const N: usize> Shr for Simd<u32, N>where
    u32: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u32, N>
sourceimpl<const N: usize> Shr for Simd<u64, N>where
    u64: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u64, N>
sourceimpl<const N: usize> Shr for Simd<usize, N>where
    usize: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<usize, N>
sourceimpl<const N: usize> Shr<&i8> for Simd<i8, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i8, N>
sourceimpl<const N: usize> Shr<&i16> for Simd<i16, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i16, N>
sourceimpl<const N: usize> Shr<&i32> for Simd<i32, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i32, N>
sourceimpl<const N: usize> Shr<&i64> for Simd<i64, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i64, N>
sourceimpl<const N: usize> Shr<&isize> for Simd<isize, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<isize, N>
sourceimpl<const N: usize> Shr<&u8> for Simd<u8, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u8, N>
sourceimpl<const N: usize> Shr<&u16> for Simd<u16, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u16, N>
sourceimpl<const N: usize> Shr<&u32> for Simd<u32, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u32, N>
sourceimpl<const N: usize> Shr<&u64> for Simd<u64, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u64, N>
sourceimpl<const N: usize> Shr<&usize> for Simd<usize, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<usize, N>
sourceimpl<const N: usize> Shr<i8> for Simd<i8, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i8, N>
sourceimpl<const N: usize> Shr<i16> for Simd<i16, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i16, N>
sourceimpl<const N: usize> Shr<i32> for Simd<i32, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i32, N>
sourceimpl<const N: usize> Shr<i64> for Simd<i64, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i64, N>
sourceimpl<const N: usize> Shr<isize> for Simd<isize, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<isize, N>
sourceimpl<const N: usize> Shr<u8> for Simd<u8, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u8, N>
sourceimpl<const N: usize> Shr<u16> for Simd<u16, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u16, N>
sourceimpl<const N: usize> Shr<u32> for Simd<u32, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u32, N>
sourceimpl<const N: usize> Shr<u64> for Simd<u64, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u64, N>
sourceimpl<const N: usize> Shr<usize> for Simd<usize, N>where
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<usize, N>

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/ops/trait.Shr.html


std/intrinsics/mir/fn.staticmut
-----------------------------------------------------------
Function StaticMut
pub fn StaticMut<T>(s: T) -> *mut T
ðŸ”¬This is a nightly-only experimental API. (custom_mir)

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/mir/fn.StaticMut.html


std/str/struct.escapedebug
-----------------------------------------------------------
Struct EscapeDebug
pub struct EscapeDebug<'a> { /* private fields */ }
The return type of str::escape_debug. Trait Implementations
1.34.0sourceimpl<'a> Clone for EscapeDebug<'a>
sourcefn clone(&self) -> EscapeDebug<'a> â“˜Returns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.34.0sourceimpl<'a> Debug for EscapeDebug<'a>
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.34.0sourceimpl<'a> Display for EscapeDebug<'a>
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.34.0sourceimpl<'a> Iterator for EscapeDebug<'a>
sourcetype Item = charThe type of the elements being iterated over.
sourcefn next(&mut self) -> Option<char>Advances the iterator and returns the next value. Read more
sourcefn size_hint(&self) -> (usize, Option<usize>)Returns the bounds on the remaining length of the iterator. Read more
sourcefn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> Rwhere
    EscapeDebug<'a>: Sized,
    Fold: FnMut(Acc, <EscapeDebug<'a> as Iterator>::Item) -> R,
    R: Try<Output = Acc>,An iterator method that applies a function as long as it returns successfully, producing a single, final value. Read more
sourcefn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Accwhere
    Fold: FnMut(Acc, <EscapeDebug<'a> as Iterator>::Item) -> Acc,Folds every element into an accumulator by applying an operation, returning the final result. Read more
sourcefn next_chunk<const N: usize>(
    &mut self,
) -> Result<[Self::Item; N], IntoIter<Self::Item, N>>where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_next_chunk #98326)
Advances the iterator and returns an array containing the next N values. Read more
1.0.0sourcefn count(self) -> usizewhere
    Self: Sized,Consumes the iterator, counting the number of iterations and returning it. Read more
1.0.0sourcefn last(self) -> Option<Self::Item>where
    Self: Sized,Consumes the iterator, returning the last element. Read more
sourcefn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator by n elements. Read more
1.0.0sourcefn nth(&mut self, n: usize) -> Option<Self::Item>Returns the nth element of the iterator. Read more
1.28.0sourcefn step_by(self, step: usize) -> StepBy<Self> â“˜where
    Self: Sized,Creates an iterator starting at the same point, but stepping by the given amount at each iteration. Read more
1.0.0sourcefn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator<Item = Self::Item>,Takes two iterators and creates a new iterator over both in sequence. Read more
1.0.0sourcefn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator,â€˜Zips upâ€™ two iterators into a single iterator of pairs. Read more
sourcefn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G> â“˜where
    Self: Sized,
    G: FnMut() -> Self::Item,
ðŸ”¬This is a nightly-only experimental API. (iter_intersperse #79524)
Creates a new iterator which places an item generated by separator between adjacent items of the original iterator. Read more
1.0.0sourcefn map<B, F>(self, f: F) -> Map<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> B,Takes a closure and creates an iterator which calls that closure on each element. Read more
1.21.0sourcefn for_each<F>(self, f: F)where
    Self: Sized,
    F: FnMut(Self::Item),Calls a closure on each element of an iterator. Read more
1.0.0sourcefn filter<P>(self, predicate: P) -> Filter<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator which uses a closure to determine if an element should be yielded. Read more
1.0.0sourcefn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Creates an iterator that both filters and maps. Read more
1.0.0sourcefn enumerate(self) -> Enumerate<Self> â“˜where
    Self: Sized,Creates an iterator which gives the current iteration count as well as the next value. Read more
1.0.0sourcefn peekable(self) -> Peekable<Self> â“˜where
    Self: Sized,Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information. Read more
1.0.0sourcefn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that skips elements based on a predicate. Read more
1.0.0sourcefn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that yields elements based on a predicate. Read more
1.57.0sourcefn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(Self::Item) -> Option<B>,Creates an iterator that both yields elements based on a predicate and maps. Read more
1.0.0sourcefn skip(self, n: usize) -> Skip<Self> â“˜where
    Self: Sized,Creates an iterator that skips the first n elements. Read more
1.0.0sourcefn take(self, n: usize) -> Take<Self> â“˜where
    Self: Sized,Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner. Read more
1.0.0sourcefn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> â“˜where
    Self: Sized,
    F: FnMut(&mut St, Self::Item) -> Option<B>,An iterator adapter which, like fold, holds internal state, but unlike fold, produces a new iterator. Read more
1.0.0sourcefn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F> â“˜where
    Self: Sized,
    U: IntoIterator,
    F: FnMut(Self::Item) -> U,Creates an iterator that works like map, but flattens nested structure. Read more
sourcefn map_windows<F, R, const N: usize>(self, f: F) -> MapWindows<Self, F, N> â“˜where
    Self: Sized,
    F: FnMut(&[Self::Item; N]) -> R,
ðŸ”¬This is a nightly-only experimental API. (iter_map_windows #87155)
Calls the given function f for each contiguous window of size N over self and returns an iterator over the outputs of f. Like slice::windows(), the windows during mapping overlap as well. Read more
1.0.0sourcefn fuse(self) -> Fuse<Self> â“˜where
    Self: Sized,Creates an iterator which ends after the first None. Read more
1.0.0sourcefn inspect<F>(self, f: F) -> Inspect<Self, F> â“˜where
    Self: Sized,
    F: FnMut(&Self::Item),Does something with each element of an iterator, passing the value on. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Borrows an iterator, rather than consuming it. Read more
1.0.0sourcefn collect<B>(self) -> Bwhere
    B: FromIterator<Self::Item>,
    Self: Sized,Transforms an iterator into a collection. Read more
sourcefn collect_into<E>(self, collection: &mut E) -> &mut Ewhere
    E: Extend<Self::Item>,
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_collect_into #94780)
Collects all the items from an iterator into a collection. Read more
1.0.0sourcefn partition<B, F>(self, f: F) -> (B, B)where
    Self: Sized,
    B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool,Consumes an iterator, creating two collections from it. Read more
sourcefn is_partitioned<P>(self, predicate: P) -> boolwhere
    Self: Sized,
    P: FnMut(Self::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_is_partitioned #62544)
Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false. Read more
1.27.0sourcefn try_for_each<F, R>(&mut self, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(Self::Item) -> R,
    R: Try<Output = ()>,An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. Read more
1.51.0sourcefn reduce<F>(self, f: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(Self::Item, Self::Item) -> Self::Item,Reduces the elements to a single one, by repeatedly applying a reducing operation. Read more
sourcefn try_reduce<R>(
    &mut self,
    f: impl FnMut(Self::Item, Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = Self::Item>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (iterator_try_reduce #87053)
Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. Read more
1.0.0sourcefn all<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if every element of the iterator matches a predicate. Read more
1.0.0sourcefn any<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if any element of the iterator matches a predicate. Read more
1.0.0sourcefn find<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator that satisfies a predicate. Read more
1.30.0sourcefn find_map<B, F>(&mut self, f: F) -> Option<B>where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Applies function to the elements of iterator and returns the first non-none result. Read more
sourcefn try_find<R>(
    &mut self,
    f: impl FnMut(&Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = bool>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (try_find #63178)
Applies function to the elements of iterator and returns the first true result or the first error. Read more
1.0.0sourcefn position<P>(&mut self, predicate: P) -> Option<usize>where
    Self: Sized,
    P: FnMut(Self::Item) -> bool,Searches for an element in an iterator, returning its index. Read more
1.6.0sourcefn max_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the maximum value from the specified function. Read more
1.15.0sourcefn max_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the maximum value with respect to the specified comparison function. Read more
1.6.0sourcefn min_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the minimum value from the specified function. Read more
1.15.0sourcefn min_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the minimum value with respect to the specified comparison function. Read more
1.0.0sourcefn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)where
    FromA: Default + Extend<A>,
    FromB: Default + Extend<B>,
    Self: Sized + Iterator<Item = (A, B)>,Converts an iterator of pairs into a pair of containers. Read more
1.36.0sourcefn copied<'a, T>(self) -> Copied<Self> â“˜where
    T: 'a + Copy,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which copies all of its elements. Read more
1.0.0sourcefn cloned<'a, T>(self) -> Cloned<Self> â“˜where
    T: 'a + Clone,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which clones all of its elements. Read more
1.0.0sourcefn cycle(self) -> Cycle<Self> â“˜where
    Self: Sized + Clone,Repeats an iterator endlessly. Read more
sourcefn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N> â“˜where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_array_chunks #100450)
Returns an iterator over N elements of the iterator at a time. Read more
1.11.0sourcefn sum<S>(self) -> Swhere
    Self: Sized,
    S: Sum<Self::Item>,Sums the elements of an iterator. Read more
1.11.0sourcefn product<P>(self) -> Pwhere
    Self: Sized,
    P: Product<Self::Item>,Iterates over the entire iterator, multiplying all the elements Read more
sourcefn cmp_by<I, F>(self, other: I, cmp: F) -> Orderingwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn partial_cmp<I>(self, other: I) -> Option<Ordering>where
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,
Lexicographically compares the PartialOrd elements of this Iterator with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. Read more
sourcefn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering>where
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Option<Ordering>,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn eq<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are equal to those of another. Read more
sourcefn eq_by<I, F>(self, other: I, eq: F) -> boolwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function. Read more
1.5.0sourcefn ne<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are not equal to those of another. Read more
1.5.0sourcefn lt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less than those of another. Read more
1.5.0sourcefn le<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less or equal to those of another. Read more
1.5.0sourcefn gt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than those of another. Read more
1.5.0sourcefn ge<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than or equal to those of another. Read more
1.82.0sourcefn is_sorted_by<F>(self, compare: F) -> boolwhere
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> bool,Checks if the elements of this iterator are sorted using the given comparator function. Read more
1.82.0sourcefn is_sorted_by_key<F, K>(self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> K,
    K: PartialOrd,Checks if the elements of this iterator are sorted using the given key extraction function. Read more

1.34.0sourceimpl<'a> FusedIterator for EscapeDebug<'a>
Auto Trait Implementations
impl<'a> Freeze for EscapeDebug<'a>impl<'a> RefUnwindSafe for EscapeDebug<'a>impl<'a> Send for EscapeDebug<'a>impl<'a> Sync for EscapeDebug<'a>impl<'a> Unpin for EscapeDebug<'a>impl<'a> UnwindSafe for EscapeDebug<'a>
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<I> IntoIterator for Iwhere
    I: Iterator,
sourcetype Item = <I as Iterator>::ItemThe type of the elements being iterated over.
sourcetype IntoIter = IWhich kind of iterator are we turning this into?
sourcefn into_iter(self) -> ICreates an iterator from a value. Read more

sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T> ToString for Twhere
    T: Display + ?Sized,
sourcedefault fn to_string(&self) -> StringConverts the given value to a String. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/str/struct.EscapeDebug.html


std/cmp/derive.partialeq
-----------------------------------------------------------
Derive Macro PartialEq
#[derive(PartialEq)]
Derive macro generating an impl of the trait PartialEq. The behavior of this macro is described in detail here.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/cmp/derive.PartialEq.html


std/ffi/c_str/struct.frombytesuntilnulerror
-----------------------------------------------------------
Struct FromBytesUntilNulError
pub struct FromBytesUntilNulError(/* private fields */);
ðŸ”¬This is a nightly-only experimental API. (c_str_module #112134)
An error indicating that no nul byte was present. A slice used to create a CStr must contain a nul byte somewhere within the slice. This error is created by the CStr::from_bytes_until_nul method. Trait Implementations
1.69.0sourceimpl Clone for FromBytesUntilNulError
sourcefn clone(&self) -> FromBytesUntilNulErrorReturns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.69.0sourceimpl Debug for FromBytesUntilNulError
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.69.0sourceimpl Display for FromBytesUntilNulError
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.69.0sourceimpl Error for FromBytesUntilNulError
1.30.0sourcefn source(&self) -> Option<&(dyn Error + 'static)>Returns the lower-level source of this error, if any. Read more
1.0.0sourcefn description(&self) -> &str
ðŸ‘ŽDeprecated since 1.42.0: use the Display impl or to_string()
 Read more
1.0.0sourcefn cause(&self) -> Option<&dyn Error>
ðŸ‘ŽDeprecated since 1.33.0: replaced by Error::source, which can support downcasting
sourcefn provide<'a>(&'a self, request: &mut Request<'a>)
ðŸ”¬This is a nightly-only experimental API. (error_generic_member_access #99301)
Provides type-based access to context intended for error reports. Read more

1.69.0sourceimpl PartialEq for FromBytesUntilNulError
sourcefn eq(&self, other: &FromBytesUntilNulError) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.69.0sourceimpl Eq for FromBytesUntilNulError1.69.0sourceimpl StructuralPartialEq for FromBytesUntilNulError
Auto Trait Implementations
impl Freeze for FromBytesUntilNulErrorimpl RefUnwindSafe for FromBytesUntilNulErrorimpl Send for FromBytesUntilNulErrorimpl Sync for FromBytesUntilNulErrorimpl Unpin for FromBytesUntilNulErrorimpl UnwindSafe for FromBytesUntilNulError
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T> ToString for Twhere
    T: Display + ?Sized,
sourcedefault fn to_string(&self) -> StringConverts the given value to a String. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/ffi/c_str/struct.FromBytesUntilNulError.html


std/os/wasi/fs/fn.symlink_path
-----------------------------------------------------------
Function symlink_path
pub fn symlink_path<P: AsRef<Path>, U: AsRef<Path>>(
    old_path: P,
    new_path: U,
) -> Result<()>
ðŸ”¬This is a nightly-only experimental API. (wasi_ext #71213)
Available on WASI only.Creates a symbolic link. This is a convenience API similar to std::os::unix::fs::symlink and std::os::windows::fs::symlink_file and std::os::windows::fs::symlink_dir.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/os/wasi/fs/fn.symlink_path.html


std/char/struct.decodeutf16
-----------------------------------------------------------
Struct DecodeUtf16
pub struct DecodeUtf16<I>where
    I: Iterator<Item = u16>,{ /* private fields */ }
An iterator that decodes UTF-16 encoded code points from an iterator of u16s. This struct is created by the decode_utf16 method on char. See its documentation for more. Trait Implementations
1.9.0sourceimpl<I> Clone for DecodeUtf16<I>where
    I: Clone + Iterator<Item = u16>,
sourcefn clone(&self) -> DecodeUtf16<I> â“˜Returns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.9.0sourceimpl<I> Debug for DecodeUtf16<I>where
    I: Debug + Iterator<Item = u16>,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.9.0sourceimpl<I> Iterator for DecodeUtf16<I>where
    I: Iterator<Item = u16>,
sourcetype Item = Result<char, DecodeUtf16Error>The type of the elements being iterated over.
sourcefn next(&mut self) -> Option<Result<char, DecodeUtf16Error>>Advances the iterator and returns the next value. Read more
sourcefn size_hint(&self) -> (usize, Option<usize>)Returns the bounds on the remaining length of the iterator. Read more
sourcefn next_chunk<const N: usize>(
    &mut self,
) -> Result<[Self::Item; N], IntoIter<Self::Item, N>>where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_next_chunk #98326)
Advances the iterator and returns an array containing the next N values. Read more
1.0.0sourcefn count(self) -> usizewhere
    Self: Sized,Consumes the iterator, counting the number of iterations and returning it. Read more
1.0.0sourcefn last(self) -> Option<Self::Item>where
    Self: Sized,Consumes the iterator, returning the last element. Read more
sourcefn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator by n elements. Read more
1.0.0sourcefn nth(&mut self, n: usize) -> Option<Self::Item>Returns the nth element of the iterator. Read more
1.28.0sourcefn step_by(self, step: usize) -> StepBy<Self> â“˜where
    Self: Sized,Creates an iterator starting at the same point, but stepping by the given amount at each iteration. Read more
1.0.0sourcefn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator<Item = Self::Item>,Takes two iterators and creates a new iterator over both in sequence. Read more
1.0.0sourcefn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator,â€˜Zips upâ€™ two iterators into a single iterator of pairs. Read more
sourcefn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G> â“˜where
    Self: Sized,
    G: FnMut() -> Self::Item,
ðŸ”¬This is a nightly-only experimental API. (iter_intersperse #79524)
Creates a new iterator which places an item generated by separator between adjacent items of the original iterator. Read more
1.0.0sourcefn map<B, F>(self, f: F) -> Map<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> B,Takes a closure and creates an iterator which calls that closure on each element. Read more
1.21.0sourcefn for_each<F>(self, f: F)where
    Self: Sized,
    F: FnMut(Self::Item),Calls a closure on each element of an iterator. Read more
1.0.0sourcefn filter<P>(self, predicate: P) -> Filter<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator which uses a closure to determine if an element should be yielded. Read more
1.0.0sourcefn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Creates an iterator that both filters and maps. Read more
1.0.0sourcefn enumerate(self) -> Enumerate<Self> â“˜where
    Self: Sized,Creates an iterator which gives the current iteration count as well as the next value. Read more
1.0.0sourcefn peekable(self) -> Peekable<Self> â“˜where
    Self: Sized,Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information. Read more
1.0.0sourcefn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that skips elements based on a predicate. Read more
1.0.0sourcefn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that yields elements based on a predicate. Read more
1.57.0sourcefn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(Self::Item) -> Option<B>,Creates an iterator that both yields elements based on a predicate and maps. Read more
1.0.0sourcefn skip(self, n: usize) -> Skip<Self> â“˜where
    Self: Sized,Creates an iterator that skips the first n elements. Read more
1.0.0sourcefn take(self, n: usize) -> Take<Self> â“˜where
    Self: Sized,Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner. Read more
1.0.0sourcefn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> â“˜where
    Self: Sized,
    F: FnMut(&mut St, Self::Item) -> Option<B>,An iterator adapter which, like fold, holds internal state, but unlike fold, produces a new iterator. Read more
1.0.0sourcefn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F> â“˜where
    Self: Sized,
    U: IntoIterator,
    F: FnMut(Self::Item) -> U,Creates an iterator that works like map, but flattens nested structure. Read more
sourcefn map_windows<F, R, const N: usize>(self, f: F) -> MapWindows<Self, F, N> â“˜where
    Self: Sized,
    F: FnMut(&[Self::Item; N]) -> R,
ðŸ”¬This is a nightly-only experimental API. (iter_map_windows #87155)
Calls the given function f for each contiguous window of size N over self and returns an iterator over the outputs of f. Like slice::windows(), the windows during mapping overlap as well. Read more
1.0.0sourcefn fuse(self) -> Fuse<Self> â“˜where
    Self: Sized,Creates an iterator which ends after the first None. Read more
1.0.0sourcefn inspect<F>(self, f: F) -> Inspect<Self, F> â“˜where
    Self: Sized,
    F: FnMut(&Self::Item),Does something with each element of an iterator, passing the value on. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Borrows an iterator, rather than consuming it. Read more
1.0.0sourcefn collect<B>(self) -> Bwhere
    B: FromIterator<Self::Item>,
    Self: Sized,Transforms an iterator into a collection. Read more
sourcefn collect_into<E>(self, collection: &mut E) -> &mut Ewhere
    E: Extend<Self::Item>,
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_collect_into #94780)
Collects all the items from an iterator into a collection. Read more
1.0.0sourcefn partition<B, F>(self, f: F) -> (B, B)where
    Self: Sized,
    B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool,Consumes an iterator, creating two collections from it. Read more
sourcefn is_partitioned<P>(self, predicate: P) -> boolwhere
    Self: Sized,
    P: FnMut(Self::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_is_partitioned #62544)
Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false. Read more
1.27.0sourcefn try_fold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> R,
    R: Try<Output = B>,An iterator method that applies a function as long as it returns successfully, producing a single, final value. Read more
1.27.0sourcefn try_for_each<F, R>(&mut self, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(Self::Item) -> R,
    R: Try<Output = ()>,An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. Read more
1.0.0sourcefn fold<B, F>(self, init: B, f: F) -> Bwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> B,Folds every element into an accumulator by applying an operation, returning the final result. Read more
1.51.0sourcefn reduce<F>(self, f: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(Self::Item, Self::Item) -> Self::Item,Reduces the elements to a single one, by repeatedly applying a reducing operation. Read more
sourcefn try_reduce<R>(
    &mut self,
    f: impl FnMut(Self::Item, Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = Self::Item>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (iterator_try_reduce #87053)
Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. Read more
1.0.0sourcefn all<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if every element of the iterator matches a predicate. Read more
1.0.0sourcefn any<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if any element of the iterator matches a predicate. Read more
1.0.0sourcefn find<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator that satisfies a predicate. Read more
1.30.0sourcefn find_map<B, F>(&mut self, f: F) -> Option<B>where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Applies function to the elements of iterator and returns the first non-none result. Read more
sourcefn try_find<R>(
    &mut self,
    f: impl FnMut(&Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = bool>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (try_find #63178)
Applies function to the elements of iterator and returns the first true result or the first error. Read more
1.0.0sourcefn position<P>(&mut self, predicate: P) -> Option<usize>where
    Self: Sized,
    P: FnMut(Self::Item) -> bool,Searches for an element in an iterator, returning its index. Read more
1.6.0sourcefn max_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the maximum value from the specified function. Read more
1.15.0sourcefn max_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the maximum value with respect to the specified comparison function. Read more
1.6.0sourcefn min_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the minimum value from the specified function. Read more
1.15.0sourcefn min_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the minimum value with respect to the specified comparison function. Read more
1.0.0sourcefn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)where
    FromA: Default + Extend<A>,
    FromB: Default + Extend<B>,
    Self: Sized + Iterator<Item = (A, B)>,Converts an iterator of pairs into a pair of containers. Read more
1.36.0sourcefn copied<'a, T>(self) -> Copied<Self> â“˜where
    T: 'a + Copy,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which copies all of its elements. Read more
1.0.0sourcefn cloned<'a, T>(self) -> Cloned<Self> â“˜where
    T: 'a + Clone,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which clones all of its elements. Read more
sourcefn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N> â“˜where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_array_chunks #100450)
Returns an iterator over N elements of the iterator at a time. Read more
1.11.0sourcefn sum<S>(self) -> Swhere
    Self: Sized,
    S: Sum<Self::Item>,Sums the elements of an iterator. Read more
1.11.0sourcefn product<P>(self) -> Pwhere
    Self: Sized,
    P: Product<Self::Item>,Iterates over the entire iterator, multiplying all the elements Read more
sourcefn cmp_by<I, F>(self, other: I, cmp: F) -> Orderingwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn partial_cmp<I>(self, other: I) -> Option<Ordering>where
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,
Lexicographically compares the PartialOrd elements of this Iterator with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. Read more
sourcefn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering>where
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Option<Ordering>,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn eq<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are equal to those of another. Read more
sourcefn eq_by<I, F>(self, other: I, eq: F) -> boolwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function. Read more
1.5.0sourcefn ne<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are not equal to those of another. Read more
1.5.0sourcefn lt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less than those of another. Read more
1.5.0sourcefn le<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less or equal to those of another. Read more
1.5.0sourcefn gt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than those of another. Read more
1.5.0sourcefn ge<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than or equal to those of another. Read more
1.82.0sourcefn is_sorted_by<F>(self, compare: F) -> boolwhere
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> bool,Checks if the elements of this iterator are sorted using the given comparator function. Read more
1.82.0sourcefn is_sorted_by_key<F, K>(self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> K,
    K: PartialOrd,Checks if the elements of this iterator are sorted using the given key extraction function. Read more

1.75.0sourceimpl<I> FusedIterator for DecodeUtf16<I>where
    I: Iterator<Item = u16> + FusedIterator,
Auto Trait Implementations
impl<I> Freeze for DecodeUtf16<I>where
    I: Freeze,impl<I> RefUnwindSafe for DecodeUtf16<I>where
    I: RefUnwindSafe,impl<I> Send for DecodeUtf16<I>where
    I: Send,impl<I> Sync for DecodeUtf16<I>where
    I: Sync,impl<I> Unpin for DecodeUtf16<I>where
    I: Unpin,impl<I> UnwindSafe for DecodeUtf16<I>where
    I: UnwindSafe,
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<I> IntoIterator for Iwhere
    I: Iterator,
sourcetype Item = <I as Iterator>::ItemThe type of the elements being iterated over.
sourcetype IntoIter = IWhich kind of iterator are we turning this into?
sourcefn into_iter(self) -> ICreates an iterator from a value. Read more

sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/char/struct.DecodeUtf16.html


std/str/fn.from_utf8_mut
-----------------------------------------------------------
Function from_utf8_mut
pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error>
Converts a mutable slice of bytes to a mutable string slice. Examples Basic usage: use std::str;
// "Hello, Rust!" as a mutable vector
let mut hellorust = vec![72, 101, 108, 108, 111, 44, 32, 82, 117, 115, 116, 33];
// As we know these bytes are valid, we can use `unwrap()`
let outstr = str::from_utf8_mut(&mut hellorust).unwrap();
assert_eq!("Hello, Rust!", outstr); Incorrect bytes: use std::str;
// Some invalid bytes in a mutable vector
let mut invalid = vec![128, 223];
assert!(str::from_utf8_mut(&mut invalid).is_err()); See the docs for Utf8Error for more details on the kinds of errors that can be returned.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/str/fn.from_utf8_mut.html


std/simd/type.mask16x16
-----------------------------------------------------------
Type Alias mask16x16
pub type mask16x16 = Mask<i16, 16>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD mask with 16 elements for vectors with 16-bit element types. The layout of this type is unspecified, and may change between platforms and/or Rust versions, and code should not assume that it is equivalent to [i16; 16]. Aliased Type
struct mask16x16(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/type.mask16x16.html


std/arch/macro.is_powerpc_feature_detected
-----------------------------------------------------------
Macro is_powerpc_feature_detected
macro_rules! is_powerpc_feature_detected {
    ("altivec") => { ... };
    ("vsx") => { ... };
    ("power8") => { ... };
    ($t:tt,) => { ... };
    ($t:tt) => { ... };
}
ðŸ”¬This is a nightly-only experimental API. (stdarch_powerpc_feature_detection #111191)
Checks if powerpc feature is enabled.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/arch/macro.is_powerpc_feature_detected.html


std/simd/type.u16x1
-----------------------------------------------------------
Type Alias u16x1
pub type u16x1 = Simd<u16, 1>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with one element of type u16. Aliased Type
struct u16x1(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/type.u16x1.html


std/macro.matches
-----------------------------------------------------------
Macro matches
macro_rules! matches {
    ($expression:expr, $pattern:pat $(if $guard:expr)? $(,)?) => { ... };
}
Returns whether the given expression matches the provided pattern. The pattern syntax is exactly the same as found in a match arm. The optional if guard can be used to add additional checks that must be true for the matched value, otherwise this macro will return false. When testing that a value matches a pattern, itâ€™s generally preferable to use assert_matches! as it will print the debug representation of the value if the assertion fails. Examples let foo = 'f';
assert!(matches!(foo, 'A'..='Z' | 'a'..='z'));
let bar = Some(4);
assert!(matches!(bar, Some(x) if x > 2));
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/macro.matches.html


std/intrinsics/fn.fmuladdf64
-----------------------------------------------------------
Function fmuladdf64
pub unsafe extern "rust-intrinsic" fn fmuladdf64(
    a: f64,
    b: f64,
    c: f64,
) -> f64
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Returns a * b + c for f64 values, non-deterministically executing either a fused multiply-add or two operations with rounding of the intermediate result. The operation is fused if the code generator determines that target instruction set has support for a fused operation, and that the fused operation is more efficient than the equivalent, separate pair of mul and add instructions. It is unspecified whether or not a fused operation is selected, and that may depend on optimization level and context, for example.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.fmuladdf64.html


std/macro.line
-----------------------------------------------------------
Macro line
macro_rules! line {
    () => { ... };
}
Expands to the line number on which it was invoked. With column! and file!, these macros provide debugging information for developers about the location within the source. The expanded expression has type u32 and is 1-based, so the first line in each file evaluates to 1, the second to 2, etc. This is consistent with error messages by common compilers or popular editors. The returned line is not necessarily the line of the line! invocation itself, but rather the first macro invocation leading up to the invocation of the line! macro. Examples let current_line = line!();
println!("defined on line: {current_line}");
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/macro.line.html


std/sync/struct.once
-----------------------------------------------------------
Struct Once
pub struct Once { /* private fields */ }
A low-level synchronization primitive for one-time global execution. Previously this was the only â€œexecute onceâ€ synchronization in std. Other libraries implemented novel synchronizing types with Once, like OnceLock<T> or LazyLock<T, F>, before those were added to std. OnceLock<T> in particular supersedes Once in functionality and should be preferred for the common case where the Once is associated with data. This type can only be constructed with Once::new(). Examples use std::sync::Once;
static START: Once = Once::new();
START.call_once(|| {
    // run initialization here
}); Implementations
sourceimpl Once
1.2.0 (const: 1.32.0)sourcepub const fn new() -> Once
Creates a new Once value. 
1.0.0sourcepub fn call_once<F>(&self, f: F)where
    F: FnOnce(),
Performs an initialization routine once and only once. The given closure will be executed if this is the first time call_once has been called, and otherwise the routine will not be invoked. This method will block the calling thread if another initialization routine is currently running. When this function returns, it is guaranteed that some initialization has run and completed (it might not be the closure specified). It is also guaranteed that any memory writes performed by the executed closure can be reliably observed by other threads at this point (there is a happens-before relation between the closure and code executing after the return). If the given closure recursively invokes call_once on the same Once instance, the exact behavior is not specified: allowed outcomes are a panic or a deadlock. Examples use std::sync::Once;
static mut VAL: usize = 0;
static INIT: Once = Once::new();
// Accessing a `static mut` is unsafe much of the time, but if we do so
// in a synchronized fashion (e.g., write once or read all) then we're
// good to go!
//
// This function will only call `expensive_computation` once, and will
// otherwise always return the value returned from the first invocation.
fn get_cached_val() -> usize {
    unsafe {
        INIT.call_once(|| {
            VAL = expensive_computation();
        });
        VAL
    }
}
fn expensive_computation() -> usize {
    // ...
} Panics The closure f will only be executed once even if this is called concurrently amongst many threads. If that closure panics, however, then it will poison this Once instance, causing all future invocations of call_once to also panic. This is similar to poisoning with mutexes. 
1.51.0sourcepub fn call_once_force<F>(&self, f: F)where
    F: FnOnce(&OnceState),
Performs the same function as call_once() except ignores poisoning. Unlike call_once(), if this Once has been poisoned (i.e., a previous call to call_once() or call_once_force() caused a panic), calling call_once_force() will still invoke the closure f and will not result in an immediate panic. If f panics, the Once will remain in a poison state. If f does not panic, the Once will no longer be in a poison state and all future calls to call_once() or call_once_force() will be no-ops. The closure f is yielded a OnceState structure which can be used to query the poison status of the Once. Examples use std::sync::Once;
use std::thread;
static INIT: Once = Once::new();
// poison the once
let handle = thread::spawn(|| {
    INIT.call_once(|| panic!());
});
assert!(handle.join().is_err());
// poisoning propagates
let handle = thread::spawn(|| {
    INIT.call_once(|| {});
});
assert!(handle.join().is_err());
// call_once_force will still run and reset the poisoned state
INIT.call_once_force(|state| {
    assert!(state.is_poisoned());
});
// once any success happens, we stop propagating the poison
INIT.call_once(|| {}); 
1.43.0sourcepub fn is_completed(&self) -> bool
Returns true if some call_once() call has completed successfully. Specifically, is_completed will return false in the following situations:  
call_once() was not called at all, 
call_once() was called, but has not yet completed, the Once instance is poisoned  This function returning false does not mean that Once has not been executed. For example, it may have been executed in the time between when is_completed starts executing and when it returns, in which case the false return value would be stale (but still permissible). Examples use std::sync::Once;
static INIT: Once = Once::new();
assert_eq!(INIT.is_completed(), false);
INIT.call_once(|| {
    assert_eq!(INIT.is_completed(), false);
});
assert_eq!(INIT.is_completed(), true); use std::sync::Once;
use std::thread;
static INIT: Once = Once::new();
assert_eq!(INIT.is_completed(), false);
let handle = thread::spawn(|| {
    INIT.call_once(|| panic!());
});
assert!(handle.join().is_err());
assert_eq!(INIT.is_completed(), false); 
sourcepub fn wait(&self)
ðŸ”¬This is a nightly-only experimental API. (once_wait #127527)
Blocks the current thread until initialization has completed. Example #![feature(once_wait)]
use std::sync::Once;
use std::thread;
static READY: Once = Once::new();
let thread = thread::spawn(|| {
    READY.wait();
    println!("everything is ready");
});
READY.call_once(|| println!("performing setup")); Panics If this Once has been poisoned because an initialization closure has panicked, this method will also panic. Use wait_force if this behaviour is not desired. 
sourcepub fn wait_force(&self)
ðŸ”¬This is a nightly-only experimental API. (once_wait #127527)
Blocks the current thread until initialization has completed, ignoring poisoning. 

Trait Implementations
1.16.0sourceimpl Debug for Once
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

1.59.0sourceimpl RefUnwindSafe for Once1.59.0sourceimpl UnwindSafe for Once
Auto Trait Implementations
impl !Freeze for Onceimpl Send for Onceimpl Sync for Onceimpl Unpin for Once
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/sync/struct.Once.html


std/process/struct.commandenvs
-----------------------------------------------------------
Struct CommandEnvs
pub struct CommandEnvs<'a> { /* private fields */ }
An iterator over the command environment variables. This struct is created by Command::get_envs. See its documentation for more. Trait Implementations
1.57.0sourceimpl<'a> Debug for CommandEnvs<'a>
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

1.57.0sourceimpl<'a> ExactSizeIterator for CommandEnvs<'a>
sourcefn len(&self) -> usizeReturns the exact remaining length of the iterator. Read more
sourcefn is_empty(&self) -> bool
ðŸ”¬This is a nightly-only experimental API. (exact_size_is_empty #35428)
Returns true if the iterator is empty. Read more

1.57.0sourceimpl<'a> Iterator for CommandEnvs<'a>
sourcetype Item = (&'a OsStr, Option<&'a OsStr>)The type of the elements being iterated over.
sourcefn next(&mut self) -> Option<Self::Item>Advances the iterator and returns the next value. Read more
sourcefn size_hint(&self) -> (usize, Option<usize>)Returns the bounds on the remaining length of the iterator. Read more
sourcefn next_chunk<const N: usize>(
    &mut self,
) -> Result<[Self::Item; N], IntoIter<Self::Item, N>>where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_next_chunk #98326)
Advances the iterator and returns an array containing the next N values. Read more
1.0.0sourcefn count(self) -> usizewhere
    Self: Sized,Consumes the iterator, counting the number of iterations and returning it. Read more
1.0.0sourcefn last(self) -> Option<Self::Item>where
    Self: Sized,Consumes the iterator, returning the last element. Read more
sourcefn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator by n elements. Read more
1.0.0sourcefn nth(&mut self, n: usize) -> Option<Self::Item>Returns the nth element of the iterator. Read more
1.28.0sourcefn step_by(self, step: usize) -> StepBy<Self> â“˜where
    Self: Sized,Creates an iterator starting at the same point, but stepping by the given amount at each iteration. Read more
1.0.0sourcefn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator<Item = Self::Item>,Takes two iterators and creates a new iterator over both in sequence. Read more
1.0.0sourcefn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator,â€˜Zips upâ€™ two iterators into a single iterator of pairs. Read more
sourcefn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G> â“˜where
    Self: Sized,
    G: FnMut() -> Self::Item,
ðŸ”¬This is a nightly-only experimental API. (iter_intersperse #79524)
Creates a new iterator which places an item generated by separator between adjacent items of the original iterator. Read more
1.0.0sourcefn map<B, F>(self, f: F) -> Map<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> B,Takes a closure and creates an iterator which calls that closure on each element. Read more
1.21.0sourcefn for_each<F>(self, f: F)where
    Self: Sized,
    F: FnMut(Self::Item),Calls a closure on each element of an iterator. Read more
1.0.0sourcefn filter<P>(self, predicate: P) -> Filter<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator which uses a closure to determine if an element should be yielded. Read more
1.0.0sourcefn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Creates an iterator that both filters and maps. Read more
1.0.0sourcefn enumerate(self) -> Enumerate<Self> â“˜where
    Self: Sized,Creates an iterator which gives the current iteration count as well as the next value. Read more
1.0.0sourcefn peekable(self) -> Peekable<Self> â“˜where
    Self: Sized,Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information. Read more
1.0.0sourcefn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that skips elements based on a predicate. Read more
1.0.0sourcefn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that yields elements based on a predicate. Read more
1.57.0sourcefn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(Self::Item) -> Option<B>,Creates an iterator that both yields elements based on a predicate and maps. Read more
1.0.0sourcefn skip(self, n: usize) -> Skip<Self> â“˜where
    Self: Sized,Creates an iterator that skips the first n elements. Read more
1.0.0sourcefn take(self, n: usize) -> Take<Self> â“˜where
    Self: Sized,Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner. Read more
1.0.0sourcefn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> â“˜where
    Self: Sized,
    F: FnMut(&mut St, Self::Item) -> Option<B>,An iterator adapter which, like fold, holds internal state, but unlike fold, produces a new iterator. Read more
1.0.0sourcefn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F> â“˜where
    Self: Sized,
    U: IntoIterator,
    F: FnMut(Self::Item) -> U,Creates an iterator that works like map, but flattens nested structure. Read more
sourcefn map_windows<F, R, const N: usize>(self, f: F) -> MapWindows<Self, F, N> â“˜where
    Self: Sized,
    F: FnMut(&[Self::Item; N]) -> R,
ðŸ”¬This is a nightly-only experimental API. (iter_map_windows #87155)
Calls the given function f for each contiguous window of size N over self and returns an iterator over the outputs of f. Like slice::windows(), the windows during mapping overlap as well. Read more
1.0.0sourcefn fuse(self) -> Fuse<Self> â“˜where
    Self: Sized,Creates an iterator which ends after the first None. Read more
1.0.0sourcefn inspect<F>(self, f: F) -> Inspect<Self, F> â“˜where
    Self: Sized,
    F: FnMut(&Self::Item),Does something with each element of an iterator, passing the value on. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Borrows an iterator, rather than consuming it. Read more
1.0.0sourcefn collect<B>(self) -> Bwhere
    B: FromIterator<Self::Item>,
    Self: Sized,Transforms an iterator into a collection. Read more
sourcefn collect_into<E>(self, collection: &mut E) -> &mut Ewhere
    E: Extend<Self::Item>,
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_collect_into #94780)
Collects all the items from an iterator into a collection. Read more
1.0.0sourcefn partition<B, F>(self, f: F) -> (B, B)where
    Self: Sized,
    B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool,Consumes an iterator, creating two collections from it. Read more
sourcefn is_partitioned<P>(self, predicate: P) -> boolwhere
    Self: Sized,
    P: FnMut(Self::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_is_partitioned #62544)
Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false. Read more
1.27.0sourcefn try_fold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> R,
    R: Try<Output = B>,An iterator method that applies a function as long as it returns successfully, producing a single, final value. Read more
1.27.0sourcefn try_for_each<F, R>(&mut self, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(Self::Item) -> R,
    R: Try<Output = ()>,An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. Read more
1.0.0sourcefn fold<B, F>(self, init: B, f: F) -> Bwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> B,Folds every element into an accumulator by applying an operation, returning the final result. Read more
1.51.0sourcefn reduce<F>(self, f: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(Self::Item, Self::Item) -> Self::Item,Reduces the elements to a single one, by repeatedly applying a reducing operation. Read more
sourcefn try_reduce<R>(
    &mut self,
    f: impl FnMut(Self::Item, Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = Self::Item>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (iterator_try_reduce #87053)
Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. Read more
1.0.0sourcefn all<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if every element of the iterator matches a predicate. Read more
1.0.0sourcefn any<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if any element of the iterator matches a predicate. Read more
1.0.0sourcefn find<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator that satisfies a predicate. Read more
1.30.0sourcefn find_map<B, F>(&mut self, f: F) -> Option<B>where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Applies function to the elements of iterator and returns the first non-none result. Read more
sourcefn try_find<R>(
    &mut self,
    f: impl FnMut(&Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = bool>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (try_find #63178)
Applies function to the elements of iterator and returns the first true result or the first error. Read more
1.0.0sourcefn position<P>(&mut self, predicate: P) -> Option<usize>where
    Self: Sized,
    P: FnMut(Self::Item) -> bool,Searches for an element in an iterator, returning its index. Read more
1.6.0sourcefn max_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the maximum value from the specified function. Read more
1.15.0sourcefn max_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the maximum value with respect to the specified comparison function. Read more
1.6.0sourcefn min_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the minimum value from the specified function. Read more
1.15.0sourcefn min_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the minimum value with respect to the specified comparison function. Read more
1.0.0sourcefn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)where
    FromA: Default + Extend<A>,
    FromB: Default + Extend<B>,
    Self: Sized + Iterator<Item = (A, B)>,Converts an iterator of pairs into a pair of containers. Read more
1.36.0sourcefn copied<'a, T>(self) -> Copied<Self> â“˜where
    T: 'a + Copy,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which copies all of its elements. Read more
1.0.0sourcefn cloned<'a, T>(self) -> Cloned<Self> â“˜where
    T: 'a + Clone,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which clones all of its elements. Read more
sourcefn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N> â“˜where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_array_chunks #100450)
Returns an iterator over N elements of the iterator at a time. Read more
1.11.0sourcefn sum<S>(self) -> Swhere
    Self: Sized,
    S: Sum<Self::Item>,Sums the elements of an iterator. Read more
1.11.0sourcefn product<P>(self) -> Pwhere
    Self: Sized,
    P: Product<Self::Item>,Iterates over the entire iterator, multiplying all the elements Read more
sourcefn cmp_by<I, F>(self, other: I, cmp: F) -> Orderingwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn partial_cmp<I>(self, other: I) -> Option<Ordering>where
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,
Lexicographically compares the PartialOrd elements of this Iterator with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. Read more
sourcefn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering>where
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Option<Ordering>,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn eq<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are equal to those of another. Read more
sourcefn eq_by<I, F>(self, other: I, eq: F) -> boolwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function. Read more
1.5.0sourcefn ne<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are not equal to those of another. Read more
1.5.0sourcefn lt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less than those of another. Read more
1.5.0sourcefn le<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less or equal to those of another. Read more
1.5.0sourcefn gt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than those of another. Read more
1.5.0sourcefn ge<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than or equal to those of another. Read more
1.82.0sourcefn is_sorted_by<F>(self, compare: F) -> boolwhere
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> bool,Checks if the elements of this iterator are sorted using the given comparator function. Read more
1.82.0sourcefn is_sorted_by_key<F, K>(self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> K,
    K: PartialOrd,Checks if the elements of this iterator are sorted using the given key extraction function. Read more

Auto Trait Implementations
impl<'a> Freeze for CommandEnvs<'a>impl<'a> RefUnwindSafe for CommandEnvs<'a>impl<'a> Send for CommandEnvs<'a>impl<'a> Sync for CommandEnvs<'a>impl<'a> Unpin for CommandEnvs<'a>impl<'a> UnwindSafe for CommandEnvs<'a>
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<I> IntoIterator for Iwhere
    I: Iterator,
sourcetype Item = <I as Iterator>::ItemThe type of the elements being iterated over.
sourcetype IntoIter = IWhich kind of iterator are we turning this into?
sourcefn into_iter(self) -> ICreates an iterator from a value. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/process/struct.CommandEnvs.html


std/alloc/struct.global
-----------------------------------------------------------
Struct Global
pub struct Global;
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
The global memory allocator. This type implements the Allocator trait by forwarding calls to the allocator registered with the #[global_allocator] attribute if there is one, or the std crateâ€™s default. Note: while this type is unstable, the functionality it provides can be accessed through the free functions in alloc. Trait Implementations
sourceimpl Allocator for Global
sourcefn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError>
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Attempts to allocate a block of memory. Read more
sourcefn allocate_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError>
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Behaves like allocate, but also ensures that the returned memory is zero-initialized. Read more
sourceunsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout)
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Deallocates the memory referenced by ptr. Read more
sourceunsafe fn grow(
    &self,
    ptr: NonNull<u8>,
    old_layout: Layout,
    new_layout: Layout,
) -> Result<NonNull<[u8]>, AllocError>
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Attempts to extend the memory block. Read more
sourceunsafe fn grow_zeroed(
    &self,
    ptr: NonNull<u8>,
    old_layout: Layout,
    new_layout: Layout,
) -> Result<NonNull<[u8]>, AllocError>
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Behaves like grow, but also ensures that the new contents are set to zero before being returned. Read more
sourceunsafe fn shrink(
    &self,
    ptr: NonNull<u8>,
    old_layout: Layout,
    new_layout: Layout,
) -> Result<NonNull<[u8]>, AllocError>
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Attempts to shrink the memory block. Read more
sourcefn by_ref(&self) -> &Selfwhere
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Creates a â€œby referenceâ€ adapter for this instance of Allocator. Read more

sourceimpl Clone for Global
sourcefn clone(&self) -> GlobalReturns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

sourceimpl Debug for Global
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

sourceimpl Default for Global
sourcefn default() -> GlobalReturns the â€œdefault valueâ€ for a type. Read more

sourceimpl Copy for Global
Auto Trait Implementations
impl Freeze for Globalimpl RefUnwindSafe for Globalimpl Send for Globalimpl Sync for Globalimpl Unpin for Globalimpl UnwindSafe for Global
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/alloc/struct.Global.html


std/ffi/type.c_longlong
-----------------------------------------------------------
Type Alias c_longlong
pub type c_longlong = i64;
Equivalent to Câ€™s signed long long (long long) type. This type will almost always be i64, but may differ on some systems. The C standard technically only requires that this type be a signed integer that is at least 64 bits and at least the size of a long, although in practice, no system would have a long long that is not an i64, as most systems do not have a standardised i128 type.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/ffi/type.c_longlong.html


std/intrinsics/simd/fn.simd_flog
-----------------------------------------------------------
Function simd_flog
pub unsafe extern "rust-intrinsic" fn simd_flog<T>(a: T) -> T
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
T must be a vector of floats.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/simd/fn.simd_flog.html


std/intrinsics/mir/macro.place
-----------------------------------------------------------
Macro place
pub macro place($e:expr) {
    ...
}
ðŸ”¬This is a nightly-only experimental API. (custom_mir)
Helper macro that allows you to treat a value expression like a place expression. See the documentation on Variant for why this is necessary and how to use it.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/mir/macro.place.html


std/f16/consts/constant.frac_1_sqrt_3
-----------------------------------------------------------
Constant FRAC_1_SQRT_3
pub const FRAC_1_SQRT_3: f16 = 0.577350269189625764509148780501957456_f16; // 0.57715f16
ðŸ”¬This is a nightly-only experimental API. (f16 #116909)
1/sqrt(3)
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/f16/consts/constant.FRAC_1_SQRT_3.html


std/simd/prelude/type.u16x64
-----------------------------------------------------------
Type Alias u16x64
pub type u16x64 = Simd<u16, 64>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with 64 elements of type u16. Aliased Type
struct u16x64(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/prelude/type.u16x64.html


std/iter/struct.cloned
-----------------------------------------------------------
Struct Cloned
pub struct Cloned<I> { /* private fields */ }
An iterator that clones the elements of an underlying iterator. This struct is created by the cloned method on Iterator. See its documentation for more. Trait Implementations
1.1.0sourceimpl<I> Clone for Cloned<I>where
    I: Clone,
sourcefn clone(&self) -> Cloned<I> â“˜Returns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.1.0sourceimpl<I> Debug for Cloned<I>where
    I: Debug,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.70.0sourceimpl<I> Default for Cloned<I>where
    I: Default,
sourcefn default() -> Cloned<I> â“˜
Creates a Cloned iterator from the default value of I let iter: Cloned<slice::Iter<'_, u8>> = Default::default();
assert_eq!(iter.len(), 0); 
1.1.0sourceimpl<'a, I, T> DoubleEndedIterator for Cloned<I>where
    T: 'a + Clone,
    I: DoubleEndedIterator<Item = &'a T>,
sourcefn next_back(&mut self) -> Option<T>Removes and returns an element from the end of the iterator. Read more
sourcefn try_rfold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Cloned<I>: Sized,
    F: FnMut(B, <Cloned<I> as Iterator>::Item) -> R,
    R: Try<Output = B>,This is the reverse version of Iterator::try_fold(): it takes elements starting from the back of the iterator. Read more
sourcefn rfold<Acc, F>(self, init: Acc, f: F) -> Accwhere
    F: FnMut(Acc, <Cloned<I> as Iterator>::Item) -> Acc,An iterator method that reduces the iteratorâ€™s elements to a single, final value, starting from the back. Read more
sourcefn advance_back_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator from the back by n elements. Read more
1.37.0sourcefn nth_back(&mut self, n: usize) -> Option<Self::Item>Returns the nth element from the end of the iterator. Read more
1.27.0sourcefn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator from the back that satisfies a predicate. Read more

1.1.0sourceimpl<'a, I, T> ExactSizeIterator for Cloned<I>where
    T: 'a + Clone,
    I: ExactSizeIterator<Item = &'a T>,
sourcefn len(&self) -> usizeReturns the exact remaining length of the iterator. Read more
sourcefn is_empty(&self) -> bool
ðŸ”¬This is a nightly-only experimental API. (exact_size_is_empty #35428)
Returns true if the iterator is empty. Read more

1.1.0sourceimpl<'a, I, T> Iterator for Cloned<I>where
    T: 'a + Clone,
    I: Iterator<Item = &'a T>,
sourcetype Item = TThe type of the elements being iterated over.
sourcefn next(&mut self) -> Option<T>Advances the iterator and returns the next value. Read more
sourcefn size_hint(&self) -> (usize, Option<usize>)Returns the bounds on the remaining length of the iterator. Read more
sourcefn try_fold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Cloned<I>: Sized,
    F: FnMut(B, <Cloned<I> as Iterator>::Item) -> R,
    R: Try<Output = B>,An iterator method that applies a function as long as it returns successfully, producing a single, final value. Read more
sourcefn fold<Acc, F>(self, init: Acc, f: F) -> Accwhere
    F: FnMut(Acc, <Cloned<I> as Iterator>::Item) -> Acc,Folds every element into an accumulator by applying an operation, returning the final result. Read more
sourcefn next_chunk<const N: usize>(
    &mut self,
) -> Result<[Self::Item; N], IntoIter<Self::Item, N>>where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_next_chunk #98326)
Advances the iterator and returns an array containing the next N values. Read more
1.0.0sourcefn count(self) -> usizewhere
    Self: Sized,Consumes the iterator, counting the number of iterations and returning it. Read more
1.0.0sourcefn last(self) -> Option<Self::Item>where
    Self: Sized,Consumes the iterator, returning the last element. Read more
sourcefn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator by n elements. Read more
1.0.0sourcefn nth(&mut self, n: usize) -> Option<Self::Item>Returns the nth element of the iterator. Read more
1.28.0sourcefn step_by(self, step: usize) -> StepBy<Self> â“˜where
    Self: Sized,Creates an iterator starting at the same point, but stepping by the given amount at each iteration. Read more
1.0.0sourcefn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator<Item = Self::Item>,Takes two iterators and creates a new iterator over both in sequence. Read more
1.0.0sourcefn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator,â€˜Zips upâ€™ two iterators into a single iterator of pairs. Read more
sourcefn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G> â“˜where
    Self: Sized,
    G: FnMut() -> Self::Item,
ðŸ”¬This is a nightly-only experimental API. (iter_intersperse #79524)
Creates a new iterator which places an item generated by separator between adjacent items of the original iterator. Read more
1.0.0sourcefn map<B, F>(self, f: F) -> Map<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> B,Takes a closure and creates an iterator which calls that closure on each element. Read more
1.21.0sourcefn for_each<F>(self, f: F)where
    Self: Sized,
    F: FnMut(Self::Item),Calls a closure on each element of an iterator. Read more
1.0.0sourcefn filter<P>(self, predicate: P) -> Filter<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator which uses a closure to determine if an element should be yielded. Read more
1.0.0sourcefn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Creates an iterator that both filters and maps. Read more
1.0.0sourcefn enumerate(self) -> Enumerate<Self> â“˜where
    Self: Sized,Creates an iterator which gives the current iteration count as well as the next value. Read more
1.0.0sourcefn peekable(self) -> Peekable<Self> â“˜where
    Self: Sized,Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information. Read more
1.0.0sourcefn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that skips elements based on a predicate. Read more
1.0.0sourcefn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that yields elements based on a predicate. Read more
1.57.0sourcefn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(Self::Item) -> Option<B>,Creates an iterator that both yields elements based on a predicate and maps. Read more
1.0.0sourcefn skip(self, n: usize) -> Skip<Self> â“˜where
    Self: Sized,Creates an iterator that skips the first n elements. Read more
1.0.0sourcefn take(self, n: usize) -> Take<Self> â“˜where
    Self: Sized,Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner. Read more
1.0.0sourcefn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> â“˜where
    Self: Sized,
    F: FnMut(&mut St, Self::Item) -> Option<B>,An iterator adapter which, like fold, holds internal state, but unlike fold, produces a new iterator. Read more
1.0.0sourcefn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F> â“˜where
    Self: Sized,
    U: IntoIterator,
    F: FnMut(Self::Item) -> U,Creates an iterator that works like map, but flattens nested structure. Read more
sourcefn map_windows<F, R, const N: usize>(self, f: F) -> MapWindows<Self, F, N> â“˜where
    Self: Sized,
    F: FnMut(&[Self::Item; N]) -> R,
ðŸ”¬This is a nightly-only experimental API. (iter_map_windows #87155)
Calls the given function f for each contiguous window of size N over self and returns an iterator over the outputs of f. Like slice::windows(), the windows during mapping overlap as well. Read more
1.0.0sourcefn fuse(self) -> Fuse<Self> â“˜where
    Self: Sized,Creates an iterator which ends after the first None. Read more
1.0.0sourcefn inspect<F>(self, f: F) -> Inspect<Self, F> â“˜where
    Self: Sized,
    F: FnMut(&Self::Item),Does something with each element of an iterator, passing the value on. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Borrows an iterator, rather than consuming it. Read more
1.0.0sourcefn collect<B>(self) -> Bwhere
    B: FromIterator<Self::Item>,
    Self: Sized,Transforms an iterator into a collection. Read more
sourcefn collect_into<E>(self, collection: &mut E) -> &mut Ewhere
    E: Extend<Self::Item>,
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_collect_into #94780)
Collects all the items from an iterator into a collection. Read more
1.0.0sourcefn partition<B, F>(self, f: F) -> (B, B)where
    Self: Sized,
    B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool,Consumes an iterator, creating two collections from it. Read more
sourcefn is_partitioned<P>(self, predicate: P) -> boolwhere
    Self: Sized,
    P: FnMut(Self::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_is_partitioned #62544)
Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false. Read more
1.27.0sourcefn try_for_each<F, R>(&mut self, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(Self::Item) -> R,
    R: Try<Output = ()>,An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. Read more
1.51.0sourcefn reduce<F>(self, f: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(Self::Item, Self::Item) -> Self::Item,Reduces the elements to a single one, by repeatedly applying a reducing operation. Read more
sourcefn try_reduce<R>(
    &mut self,
    f: impl FnMut(Self::Item, Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = Self::Item>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (iterator_try_reduce #87053)
Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. Read more
1.0.0sourcefn all<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if every element of the iterator matches a predicate. Read more
1.0.0sourcefn any<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if any element of the iterator matches a predicate. Read more
1.0.0sourcefn find<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator that satisfies a predicate. Read more
1.30.0sourcefn find_map<B, F>(&mut self, f: F) -> Option<B>where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Applies function to the elements of iterator and returns the first non-none result. Read more
sourcefn try_find<R>(
    &mut self,
    f: impl FnMut(&Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = bool>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (try_find #63178)
Applies function to the elements of iterator and returns the first true result or the first error. Read more
1.0.0sourcefn position<P>(&mut self, predicate: P) -> Option<usize>where
    Self: Sized,
    P: FnMut(Self::Item) -> bool,Searches for an element in an iterator, returning its index. Read more
1.6.0sourcefn max_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the maximum value from the specified function. Read more
1.15.0sourcefn max_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the maximum value with respect to the specified comparison function. Read more
1.6.0sourcefn min_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the minimum value from the specified function. Read more
1.15.0sourcefn min_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the minimum value with respect to the specified comparison function. Read more
1.0.0sourcefn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)where
    FromA: Default + Extend<A>,
    FromB: Default + Extend<B>,
    Self: Sized + Iterator<Item = (A, B)>,Converts an iterator of pairs into a pair of containers. Read more
1.36.0sourcefn copied<'a, T>(self) -> Copied<Self> â“˜where
    T: 'a + Copy,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which copies all of its elements. Read more
1.0.0sourcefn cloned<'a, T>(self) -> Cloned<Self> â“˜where
    T: 'a + Clone,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which clones all of its elements. Read more
sourcefn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N> â“˜where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_array_chunks #100450)
Returns an iterator over N elements of the iterator at a time. Read more
1.11.0sourcefn sum<S>(self) -> Swhere
    Self: Sized,
    S: Sum<Self::Item>,Sums the elements of an iterator. Read more
1.11.0sourcefn product<P>(self) -> Pwhere
    Self: Sized,
    P: Product<Self::Item>,Iterates over the entire iterator, multiplying all the elements Read more
sourcefn cmp_by<I, F>(self, other: I, cmp: F) -> Orderingwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn partial_cmp<I>(self, other: I) -> Option<Ordering>where
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,
Lexicographically compares the PartialOrd elements of this Iterator with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. Read more
sourcefn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering>where
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Option<Ordering>,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn eq<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are equal to those of another. Read more
sourcefn eq_by<I, F>(self, other: I, eq: F) -> boolwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function. Read more
1.5.0sourcefn ne<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are not equal to those of another. Read more
1.5.0sourcefn lt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less than those of another. Read more
1.5.0sourcefn le<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less or equal to those of another. Read more
1.5.0sourcefn gt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than those of another. Read more
1.5.0sourcefn ge<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than or equal to those of another. Read more
1.82.0sourcefn is_sorted_by<F>(self, compare: F) -> boolwhere
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> bool,Checks if the elements of this iterator are sorted using the given comparator function. Read more
1.82.0sourcefn is_sorted_by_key<F, K>(self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> K,
    K: PartialOrd,Checks if the elements of this iterator are sorted using the given key extraction function. Read more

1.26.0sourceimpl<'a, I, T> FusedIterator for Cloned<I>where
    T: 'a + Clone,
    I: FusedIterator<Item = &'a T>,sourceimpl<'a, I, T> TrustedLen for Cloned<I>where
    T: 'a + Clone,
    I: TrustedLen<Item = &'a T>,
Auto Trait Implementations
impl<I> Freeze for Cloned<I>where
    I: Freeze,impl<I> RefUnwindSafe for Cloned<I>where
    I: RefUnwindSafe,impl<I> Send for Cloned<I>where
    I: Send,impl<I> Sync for Cloned<I>where
    I: Sync,impl<I> Unpin for Cloned<I>where
    I: Unpin,impl<I> UnwindSafe for Cloned<I>where
    I: UnwindSafe,
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<I> IntoIterator for Iwhere
    I: Iterator,
sourcetype Item = <I as Iterator>::ItemThe type of the elements being iterated over.
sourcetype IntoIter = IWhich kind of iterator are we turning this into?
sourcefn into_iter(self) -> ICreates an iterator from a value. Read more

sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/iter/struct.Cloned.html


std/intrinsics/fn.powf64
-----------------------------------------------------------
Function powf64
pub unsafe extern "rust-intrinsic" fn powf64(a: f64, x: f64) -> f64
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Raises an f64 to an f64 power. The stabilized version of this intrinsic is f64::powf
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.powf64.html


std/simd/prelude/type.u8x32
-----------------------------------------------------------
Type Alias u8x32
pub type u8x32 = Simd<u8, 32>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with 32 elements of type u8. Aliased Type
struct u8x32(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/prelude/type.u8x32.html


std/f64/consts/constant.tau
-----------------------------------------------------------
Constant TAU
pub const TAU: f64 = 6.28318530717958647692528676655900577_f64; // 6.2831853071795862f64
The full circle constant (Ï„) Equal to 2Ï€.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/f64/consts/constant.TAU.html


std/intrinsics/fn.sqrtf64
-----------------------------------------------------------
Function sqrtf64
pub unsafe extern "rust-intrinsic" fn sqrtf64(x: f64) -> f64
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Returns the square root of an f64 The stabilized version of this intrinsic is f64::sqrt
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.sqrtf64.html


std/os/unix/net/struct.socketancillary
-----------------------------------------------------------
Struct SocketAncillary
pub struct SocketAncillary<'a> { /* private fields */ }
ðŸ”¬This is a nightly-only experimental API. (unix_socket_ancillary_data #76915)
Available on (Android or Linux) and Unix only.A Unix socket Ancillary data struct. Example #![feature(unix_socket_ancillary_data)]
use std::os::unix::net::{UnixStream, SocketAncillary, AncillaryData};
use std::io::IoSliceMut;
fn main() -> std::io::Result<()> {
    let sock = UnixStream::connect("/tmp/sock")?;
    let mut fds = [0; 8];
    let mut ancillary_buffer = [0; 128];
    let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);
    let mut buf = [1; 8];
    let mut bufs = &mut [IoSliceMut::new(&mut buf[..])][..];
    sock.recv_vectored_with_ancillary(bufs, &mut ancillary)?;
    for ancillary_result in ancillary.messages() {
        if let AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {
            for fd in scm_rights {
                println!("receive file descriptor: {fd}");
            }
        }
    }
    Ok(())
} Implementations
sourceimpl<'a> SocketAncillary<'a>
sourcepub fn new(buffer: &'a mut [u8]) -> Self
ðŸ”¬This is a nightly-only experimental API. (unix_socket_ancillary_data #76915)
Creates an ancillary data with the given buffer. Example #![feature(unix_socket_ancillary_data)]
use std::os::unix::net::SocketAncillary;
let mut ancillary_buffer = [0; 128];
let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]); 
sourcepub fn capacity(&self) -> usize
ðŸ”¬This is a nightly-only experimental API. (unix_socket_ancillary_data #76915)
Returns the capacity of the buffer. 
sourcepub fn is_empty(&self) -> bool
ðŸ”¬This is a nightly-only experimental API. (unix_socket_ancillary_data #76915)
Returns true if the ancillary data is empty. 
sourcepub fn len(&self) -> usize
ðŸ”¬This is a nightly-only experimental API. (unix_socket_ancillary_data #76915)
Returns the number of used bytes. 
sourcepub fn messages(&self) -> Messages<'_> â“˜
ðŸ”¬This is a nightly-only experimental API. (unix_socket_ancillary_data #76915)
Returns the iterator of the control messages. 
sourcepub fn truncated(&self) -> bool
ðŸ”¬This is a nightly-only experimental API. (unix_socket_ancillary_data #76915)
Is true if during a recv operation the ancillary was truncated. Example #![feature(unix_socket_ancillary_data)]
use std::os::unix::net::{UnixStream, SocketAncillary};
use std::io::IoSliceMut;
fn main() -> std::io::Result<()> {
    let sock = UnixStream::connect("/tmp/sock")?;
    let mut ancillary_buffer = [0; 128];
    let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);
    let mut buf = [1; 8];
    let mut bufs = &mut [IoSliceMut::new(&mut buf[..])][..];
    sock.recv_vectored_with_ancillary(bufs, &mut ancillary)?;
    println!("Is truncated: {}", ancillary.truncated());
    Ok(())
} 
sourcepub fn add_fds(&mut self, fds: &[RawFd]) -> bool
ðŸ”¬This is a nightly-only experimental API. (unix_socket_ancillary_data #76915)
Add file descriptors to the ancillary data. The function returns true if there was enough space in the buffer. If there was not enough space then no file descriptors was appended. Technically, that means this operation adds a control message with the level SOL_SOCKET and type SCM_RIGHTS. Example #![feature(unix_socket_ancillary_data)]
use std::os::unix::net::{UnixStream, SocketAncillary};
use std::os::unix::io::AsRawFd;
use std::io::IoSlice;
fn main() -> std::io::Result<()> {
    let sock = UnixStream::connect("/tmp/sock")?;
    let mut ancillary_buffer = [0; 128];
    let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);
    ancillary.add_fds(&[sock.as_raw_fd()][..]);
    let buf = [1; 8];
    let mut bufs = &mut [IoSlice::new(&buf[..])][..];
    sock.send_vectored_with_ancillary(bufs, &mut ancillary)?;
    Ok(())
} 
sourcepub fn add_creds(&mut self, creds: &[SocketCred]) -> bool
ðŸ”¬This is a nightly-only experimental API. (unix_socket_ancillary_data #76915)
Add credentials to the ancillary data. The function returns true if there is enough space in the buffer. If there is not enough space then no credentials will be appended. Technically, that means this operation adds a control message with the level SOL_SOCKET and type SCM_CREDENTIALS, SCM_CREDS, or SCM_CREDS2. 
sourcepub fn clear(&mut self)
ðŸ”¬This is a nightly-only experimental API. (unix_socket_ancillary_data #76915)
Clears the ancillary data, removing all values. Example #![feature(unix_socket_ancillary_data)]
use std::os::unix::net::{UnixStream, SocketAncillary, AncillaryData};
use std::io::IoSliceMut;
fn main() -> std::io::Result<()> {
    let sock = UnixStream::connect("/tmp/sock")?;
    let mut fds1 = [0; 8];
    let mut fds2 = [0; 8];
    let mut ancillary_buffer = [0; 128];
    let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);
    let mut buf = [1; 8];
    let mut bufs = &mut [IoSliceMut::new(&mut buf[..])][..];
    sock.recv_vectored_with_ancillary(bufs, &mut ancillary)?;
    for ancillary_result in ancillary.messages() {
        if let AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {
            for fd in scm_rights {
                println!("receive file descriptor: {fd}");
            }
        }
    }
    ancillary.clear();
    sock.recv_vectored_with_ancillary(bufs, &mut ancillary)?;
    for ancillary_result in ancillary.messages() {
        if let AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {
            for fd in scm_rights {
                println!("receive file descriptor: {fd}");
            }
        }
    }
    Ok(())
} 

Trait Implementations
sourceimpl<'a> Debug for SocketAncillary<'a>
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

Auto Trait Implementations
impl<'a> Freeze for SocketAncillary<'a>impl<'a> RefUnwindSafe for SocketAncillary<'a>impl<'a> Send for SocketAncillary<'a>impl<'a> Sync for SocketAncillary<'a>impl<'a> Unpin for SocketAncillary<'a>impl<'a> !UnwindSafe for SocketAncillary<'a>
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/os/unix/net/struct.SocketAncillary.html


std/intrinsics/fn.atomic_cxchgweak_relaxed_seqcst
-----------------------------------------------------------
Function atomic_cxchgweak_relaxed_seqcst
pub unsafe extern "rust-intrinsic" fn atomic_cxchgweak_relaxed_seqcst<T>(
    dst: *mut T,
    old: T,
    src: T,
) -> (T, bool)where
    T: Copy,
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Stores a value if the current value is the same as the old value. The stabilized version of this intrinsic is available on the atomic types via the compare_exchange_weak method by passing Ordering::Relaxed and Ordering::SeqCst as the success and failure parameters. For example, AtomicBool::compare_exchange_weak.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.atomic_cxchgweak_relaxed_seqcst.html


std/ops/enum.coroutinestate
-----------------------------------------------------------
Enum CoroutineState
pub enum CoroutineState<Y, R> {
    Yielded(Y),
    Complete(R),
}
ðŸ”¬This is a nightly-only experimental API. (coroutine_trait #43122)
The result of a coroutine resumption. This enum is returned from the Coroutine::resume method and indicates the possible return values of a coroutine. Currently this corresponds to either a suspension point (Yielded) or a termination point (Complete). Variants
Yielded(Y)
ðŸ”¬This is a nightly-only experimental API. (coroutine_trait #43122)
The coroutine suspended with a value. This state indicates that a coroutine has been suspended, and typically corresponds to a yield statement. The value provided in this variant corresponds to the expression passed to yield and allows coroutines to provide a value each time they yield. 
Complete(R)
ðŸ”¬This is a nightly-only experimental API. (coroutine_trait #43122)
The coroutine completed with a return value. This state indicates that a coroutine has finished execution with the provided value. Once a coroutine has returned Complete it is considered a programmer error to call resume again. 
Trait Implementations
sourceimpl<Y, R> Clone for CoroutineState<Y, R>where
    Y: Clone,
    R: Clone,
sourcefn clone(&self) -> CoroutineState<Y, R>Returns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

sourceimpl<Y, R> Debug for CoroutineState<Y, R>where
    Y: Debug,
    R: Debug,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

sourceimpl<Y, R> Hash for CoroutineState<Y, R>where
    Y: Hash,
    R: Hash,
sourcefn hash<__H>(&self, state: &mut __H)where
    __H: Hasher,Feeds this value into the given Hasher. Read more
1.3.0sourcefn hash_slice<H>(data: &[Self], state: &mut H)where
    H: Hasher,
    Self: Sized,Feeds a slice of this type into the given Hasher. Read more

sourceimpl<Y, R> Ord for CoroutineState<Y, R>where
    Y: Ord,
    R: Ord,
sourcefn cmp(&self, other: &CoroutineState<Y, R>) -> OrderingThis method returns an Ordering between self and other. Read more
1.21.0sourcefn max(self, other: Self) -> Selfwhere
    Self: Sized,Compares and returns the maximum of two values. Read more
1.21.0sourcefn min(self, other: Self) -> Selfwhere
    Self: Sized,Compares and returns the minimum of two values. Read more
1.50.0sourcefn clamp(self, min: Self, max: Self) -> Selfwhere
    Self: Sized,Restrict a value to a certain interval. Read more

sourceimpl<Y, R> PartialEq for CoroutineState<Y, R>where
    Y: PartialEq,
    R: PartialEq,
sourcefn eq(&self, other: &CoroutineState<Y, R>) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
sourceimpl<Y, R> PartialOrd for CoroutineState<Y, R>where
    Y: PartialOrd,
    R: PartialOrd,
sourcefn partial_cmp(&self, other: &CoroutineState<Y, R>) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
1.0.0sourcefn lt(&self, other: &Rhs) -> boolTests less than (for self and other) and is used by the < operator. Read more
1.0.0sourcefn le(&self, other: &Rhs) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
1.0.0sourcefn gt(&self, other: &Rhs) -> boolTests greater than (for self and other) and is used by the > operator. Read more
1.0.0sourcefn ge(&self, other: &Rhs) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

sourceimpl<Y, R> Copy for CoroutineState<Y, R>where
    Y: Copy,
    R: Copy,sourceimpl<Y, R> Eq for CoroutineState<Y, R>where
    Y: Eq,
    R: Eq,sourceimpl<Y, R> StructuralPartialEq for CoroutineState<Y, R>
Auto Trait Implementations
impl<Y, R> Freeze for CoroutineState<Y, R>where
    Y: Freeze,
    R: Freeze,impl<Y, R> RefUnwindSafe for CoroutineState<Y, R>where
    Y: RefUnwindSafe,
    R: RefUnwindSafe,impl<Y, R> Send for CoroutineState<Y, R>where
    Y: Send,
    R: Send,impl<Y, R> Sync for CoroutineState<Y, R>where
    Y: Sync,
    R: Sync,impl<Y, R> Unpin for CoroutineState<Y, R>where
    Y: Unpin,
    R: Unpin,impl<Y, R> UnwindSafe for CoroutineState<Y, R>where
    Y: UnwindSafe,
    R: UnwindSafe,
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/ops/enum.CoroutineState.html


std/keyword.false
-----------------------------------------------------------
Keyword false
A value of type bool representing logical false. false is the logical opposite of true. See the documentation for true for more information.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/keyword.false.html


std/f32/consts/constant.frac_1_sqrt_2pi
-----------------------------------------------------------
Constant FRAC_1_SQRT_2PI
pub const FRAC_1_SQRT_2PI: f32 = 0.398942280401432677939946059934381868_f32; // 0.398942292f32
ðŸ”¬This is a nightly-only experimental API. (more_float_constants #103883)
1/sqrt(2Ï€)
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/f32/consts/constant.FRAC_1_SQRT_2PI.html


std/intrinsics/fn.cosf64
-----------------------------------------------------------
Function cosf64
pub unsafe extern "rust-intrinsic" fn cosf64(x: f64) -> f64
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Returns the cosine of an f64. The stabilized version of this intrinsic is f64::cos
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.cosf64.html


std/f16/consts/constant.pi
-----------------------------------------------------------
Constant PI
pub const PI: f16 = 3.14159265358979323846264338327950288_f16; // 3.1406f16
ðŸ”¬This is a nightly-only experimental API. (f16 #116909)
Archimedesâ€™ constant (Ï€)
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/f16/consts/constant.PI.html


std/marker/derive.constparamty
-----------------------------------------------------------
Derive Macro ConstParamTy
#[derive(ConstParamTy)]
ðŸ”¬This is a nightly-only experimental API. (adt_const_params #95174)
Derive macro generating an impl of the trait ConstParamTy.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/marker/derive.ConstParamTy.html


std/collections/struct.tryreserveerror
-----------------------------------------------------------
Struct TryReserveError
pub struct TryReserveError { /* private fields */ }
The error type for try_reserve methods. Implementations
sourceimpl TryReserveError
sourcepub fn kind(&self) -> TryReserveErrorKind
ðŸ”¬This is a nightly-only experimental API. (try_reserve_kind #48043)
Details about the allocation that caused the error 

Trait Implementations
1.57.0sourceimpl Clone for TryReserveError
sourcefn clone(&self) -> TryReserveErrorReturns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.57.0sourceimpl Debug for TryReserveError
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.57.0sourceimpl Display for TryReserveError
sourcefn fmt(&self, fmt: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.57.0sourceimpl Error for TryReserveError
1.30.0sourcefn source(&self) -> Option<&(dyn Error + 'static)>Returns the lower-level source of this error, if any. Read more
1.0.0sourcefn description(&self) -> &str
ðŸ‘ŽDeprecated since 1.42.0: use the Display impl or to_string()
 Read more
1.0.0sourcefn cause(&self) -> Option<&dyn Error>
ðŸ‘ŽDeprecated since 1.33.0: replaced by Error::source, which can support downcasting
sourcefn provide<'a>(&'a self, request: &mut Request<'a>)
ðŸ”¬This is a nightly-only experimental API. (error_generic_member_access #99301)
Provides type-based access to context intended for error reports. Read more

1.78.0sourceimpl From<TryReserveError> for Error
sourcefn from(_: TryReserveError) -> Error
Converts TryReserveError to an error with ErrorKind::OutOfMemory. TryReserveError wonâ€™t be available as the error source(), but this may change in the future. 
sourceimpl From<TryReserveErrorKind> for TryReserveError
sourcefn from(kind: TryReserveErrorKind) -> TryReserveErrorConverts to this type from the input type.
1.57.0sourceimpl PartialEq for TryReserveError
sourcefn eq(&self, other: &TryReserveError) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.57.0sourceimpl Eq for TryReserveError1.57.0sourceimpl StructuralPartialEq for TryReserveError
Auto Trait Implementations
impl Freeze for TryReserveErrorimpl RefUnwindSafe for TryReserveErrorimpl Send for TryReserveErrorimpl Sync for TryReserveErrorimpl Unpin for TryReserveErrorimpl UnwindSafe for TryReserveError
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T> ToString for Twhere
    T: Display + ?Sized,
sourcedefault fn to_string(&self) -> StringConverts the given value to a String. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/collections/struct.TryReserveError.html


std/panic/fn.panic_any
-----------------------------------------------------------
Function panic_any
pub fn panic_any<M: 'static + Any + Send>(msg: M) -> !
Panics the current thread with the given message as the panic payload. The message can be of any (Any + Send) type, not just strings. The message is wrapped in a Box<'static + Any + Send>, which can be accessed later using PanicHookInfo::payload. See the panic! macro for more information about panicking.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/panic/fn.panic_any.html


std/intrinsics/fn.minnumf32
-----------------------------------------------------------
Function minnumf32
pub extern "rust-intrinsic" fn minnumf32(x: f32, y: f32) -> f32
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Returns the minimum of two f32 values. Note that, unlike most intrinsics, this is safe to call; it does not require an unsafe block. Therefore, implementations must not require the user to uphold any safety invariants. The stabilized version of this intrinsic is f32::min
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.minnumf32.html


std/os/unix/raw/type.gid_t
-----------------------------------------------------------
Type Alias gid_t
pub type gid_t = u32;
ðŸ‘ŽDeprecated since 1.8.0: these type aliases are no longer supported by the standard library, the libc crate on crates.io should be used instead for the correct definitions
Available on Unix only.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/os/unix/raw/type.gid_t.html


reference/expressions/tuple-expr
-----------------------------------------------------------
Tuple and tuple indexing expressions Tuple expressions  Syntax TupleExpression : ( TupleElements? ) TupleElements : ( Expression , )+ Expression?  A tuple expression constructs tuple values. The syntax for tuple expressions is a parenthesized, comma separated list of expressions, called the tuple initializer operands. 1-ary tuple expressions require a comma after their tuple initializer operand to be disambiguated with a parenthetical expression. Tuple expressions are a value expression that evaluate into a newly constructed value of a tuple type. The number of tuple initializer operands is the arity of the constructed tuple. Tuple expressions without any tuple initializer operands produce the unit tuple. For other tuple expressions, the first written tuple initializer operand initializes the field 0 and subsequent operands initializes the next highest field. For example, in the tuple expression ('a', 'b', 'c'), 'a' initializes the value of the field 0, 'b' field 1, and 'c' field 2. Examples of tuple expressions and their types: 

Expression
Type
 
()
() (unit)
 
(0.0, 4.5)
(f64, f64)
 
("x".to_string(), )
(String, )
 
("a", 4usize, true)
(&'static str, usize, bool)
 
  Tuple indexing expressions  Syntax TupleIndexingExpression : Expression . TUPLE_INDEX  A tuple indexing expression accesses fields of tuples and tuple structs. The syntax for a tuple index expression is an expression, called the tuple operand, then a ., then finally a tuple index. The syntax for the tuple index is a decimal literal with no leading zeros, underscores, or suffix. For example 0 and 2 are valid tuple indices but not 01, 0_, nor 0i32. The type of the tuple operand must be a tuple type or a tuple struct. The tuple index must be a name of a field of the type of the tuple operand. Evaluation of tuple index expressions has no side effects beyond evaluation of its tuple operand. As a place expression, it evaluates to the location of the field of the tuple operand with the same name as the tuple index. Examples of tuple indexing expressions: #![allow(unused)]
fn main() {
// Indexing a tuple
let pair = ("a string", 2);
assert_eq!(pair.1, 2);
// Indexing a tuple struct
struct Point(f32, f32);
let point = Point(1.0, 0.0);
assert_eq!(point.0, 1.0);
assert_eq!(point.1, 0.0);
}  Note: Unlike field access expressions, tuple index expressions can be the function operand of a call expression as it cannot be confused with a method call since method names cannot be numbers.   Note: Although arrays and slices also have elements, you must use an array or slice indexing expression or a slice pattern to access their elements. 
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/reference/expressions/tuple-expr.html


std/mem/fn.size_of
-----------------------------------------------------------
Function size_of
pub const fn size_of<T>() -> usize
Returns the size of a type in bytes. More specifically, this is the offset in bytes between successive elements in an array with that item type including alignment padding. Thus, for any type T and length n, [T; n] has a size of n * size_of::<T>(). In general, the size of a type is not stable across compilations, but specific types such as primitives are. The following table gives the size for primitives. 

Type
size_of::<Type>()
 
()
0
 
bool
1
 
u8
1
 
u16
2
 
u32
4
 
u64
8
 
u128
16
 
i8
1
 
i16
2
 
i32
4
 
i64
8
 
i128
16
 
f32
4
 
f64
8
 
char
4
 
  Furthermore, usize and isize have the same size. The types *const T, &T, Box<T>, Option<&T>, and Option<Box<T>> all have the same size. If T is Sized, all of those types have the same size as usize. The mutability of a pointer does not change its size. As such, &T and &mut T have the same size. Likewise for *const T and *mut T. Size of #[repr(C)] items The C representation for items has a defined layout. With this layout, the size of items is also stable as long as all fields have a stable size. Size of Structs For structs, the size is determined by the following algorithm. For each field in the struct ordered by declaration order:  Add the size of the field. Round up the current size to the nearest multiple of the next fieldâ€™s alignment.  Finally, round the size of the struct to the nearest multiple of its alignment. The alignment of the struct is usually the largest alignment of all its fields; this can be changed with the use of repr(align(N)). Unlike C, zero sized structs are not rounded up to one byte in size. Size of Enums Enums that carry no data other than the discriminant have the same size as C enums on the platform they are compiled for. Size of Unions The size of a union is the size of its largest field. Unlike C, zero sized unions are not rounded up to one byte in size. Examples use std::mem;
// Some primitives
assert_eq!(4, mem::size_of::<i32>());
assert_eq!(8, mem::size_of::<f64>());
assert_eq!(0, mem::size_of::<()>());
// Some arrays
assert_eq!(8, mem::size_of::<[i32; 2]>());
assert_eq!(12, mem::size_of::<[i32; 3]>());
assert_eq!(0, mem::size_of::<[i32; 0]>());

// Pointer size equality
assert_eq!(mem::size_of::<&i32>(), mem::size_of::<*const i32>());
assert_eq!(mem::size_of::<&i32>(), mem::size_of::<Box<i32>>());
assert_eq!(mem::size_of::<&i32>(), mem::size_of::<Option<&i32>>());
assert_eq!(mem::size_of::<Box<i32>>(), mem::size_of::<Option<Box<i32>>>()); Using #[repr(C)]. use std::mem;
#[repr(C)]
struct FieldStruct {
    first: u8,
    second: u16,
    third: u8
}
// The size of the first field is 1, so add 1 to the size. Size is 1.
// The alignment of the second field is 2, so add 1 to the size for padding. Size is 2.
// The size of the second field is 2, so add 2 to the size. Size is 4.
// The alignment of the third field is 1, so add 0 to the size for padding. Size is 4.
// The size of the third field is 1, so add 1 to the size. Size is 5.
// Finally, the alignment of the struct is 2 (because the largest alignment amongst its
// fields is 2), so add 1 to the size for padding. Size is 6.
assert_eq!(6, mem::size_of::<FieldStruct>());
#[repr(C)]
struct TupleStruct(u8, u16, u8);
// Tuple structs follow the same rules.
assert_eq!(6, mem::size_of::<TupleStruct>());
// Note that reordering the fields can lower the size. We can remove both padding bytes
// by putting `third` before `second`.
#[repr(C)]
struct FieldStructOptimized {
    first: u8,
    third: u8,
    second: u16
}
assert_eq!(4, mem::size_of::<FieldStructOptimized>());
// Union size is the size of the largest field.
#[repr(C)]
union ExampleUnion {
    smaller: u8,
    larger: u16
}
assert_eq!(2, mem::size_of::<ExampleUnion>());
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/mem/fn.size_of.html


std/convert/trait.from
-----------------------------------------------------------
Trait From
pub trait From<T>: Sized {
    // Required method
    fn from(value: T) -> Self;
}
Used to do value-to-value conversions while consuming the input value. It is the reciprocal of Into. One should always prefer implementing From over Into because implementing From automatically provides one with an implementation of Into thanks to the blanket implementation in the standard library. Only implement Into when targeting a version prior to Rust 1.41 and converting to a type outside the current crate. From was not able to do these types of conversions in earlier versions because of Rustâ€™s orphaning rules. See Into for more details. Prefer using Into over using From when specifying trait bounds on a generic function. This way, types that directly implement Into can be used as arguments as well. The From trait is also very useful when performing error handling. When constructing a function that is capable of failing, the return type will generally be of the form Result<T, E>. From simplifies error handling by allowing a function to return a single error type that encapsulates multiple error types. See the â€œExamplesâ€ section and the book for more details. Note: This trait must not fail. The From trait is intended for perfect conversions. If the conversion can fail or is not perfect, use TryFrom. Generic Implementations  
From<T> for U implies Into<U> for T
 
From is reflexive, which means that From<T> for T is implemented  When to implement From
 While thereâ€™s no technical restrictions on which conversions can be done using a From implementation, the general expectation is that the conversions should typically be restricted as follows:   The conversion is infallible: if the conversion can fail, use TryFrom instead; donâ€™t provide a From impl that panics.   The conversion is lossless: semantically, it should not lose or discard information. For example, i32: From<u16> exists, where the original value can be recovered using u16: TryFrom<i32>. And String: From<&str> exists, where you can get something equivalent to the original value via Deref. But From cannot be used to convert from u32 to u16, since that cannot succeed in a lossless way. (Thereâ€™s some wiggle room here for information not considered semantically relevant. For example, Box<[T]>: From<Vec<T>> exists even though it might not preserve capacity, like how two vectors can be equal despite differing capacities.)   The conversion is value-preserving: the conceptual kind and meaning of the resulting value is the same, even though the Rust type and technical representation might be different. For example -1_i8 as u8 is lossless, since as casting back can recover the original value, but that conversion is not available via From because -1 and 255 are different conceptual values (despite being identical bit patterns technically). But f32: From<i16> is available because 1_i16 and 1.0_f32 are conceptually the same real number (despite having very different bit patterns technically). String: From<char> is available because theyâ€™re both text, but String: From<u32> is not available, since 1 (a number) and "1" (text) are too different. (Converting values to text is instead covered by the Display trait.)   The conversion is obvious: itâ€™s the only reasonable conversion between the two types. Otherwise itâ€™s better to have it be a named method or constructor, like how str::as_bytes is a method and how integers have methods like u32::from_ne_bytes, u32::from_le_bytes, and u32::from_be_bytes, none of which are From implementations. Whereas thereâ€™s only one reasonable way to wrap an Ipv6Addr into an IpAddr, thus IpAddr: From<Ipv6Addr> exists.   Examples String implements From<&str>: An explicit conversion from a &str to a String is done as follows: let string = "hello".to_string();
let other_string = String::from("hello");
assert_eq!(string, other_string); While performing error handling it is often useful to implement From for your own error type. By converting underlying error types to our own custom error type that encapsulates the underlying error type, we can return a single error type without losing information on the underlying cause. The â€˜?â€™ operator automatically converts the underlying error type to our custom error type with From::from. use std::fs;
use std::io;
use std::num;
enum CliError {
    IoError(io::Error),
    ParseError(num::ParseIntError),
}
impl From<io::Error> for CliError {
    fn from(error: io::Error) -> Self {
        CliError::IoError(error)
    }
}
impl From<num::ParseIntError> for CliError {
    fn from(error: num::ParseIntError) -> Self {
        CliError::ParseError(error)
    }
}
fn open_and_parse_file(file_name: &str) -> Result<i32, CliError> {
    let mut contents = fs::read_to_string(&file_name)?;
    let num: i32 = contents.trim().parse()?;
    Ok(num)
} Required Methods
1.0.0sourcefn from(value: T) -> Self
Converts to this type from the input type. 
Object Safety
This trait is not object safe.
Implementors
1.17.0sourceimpl From<&str> for Box<str>1.21.0sourceimpl From<&str> for Rc<str>1.0.0sourceimpl From<&str> for String1.21.0sourceimpl From<&str> for Arc<str>1.0.0sourceimpl From<&str> for Vec<u8>1.17.0sourceimpl From<&CStr> for Box<CStr>1.7.0sourceimpl From<&CStr> for CString1.24.0sourceimpl From<&CStr> for Rc<CStr>1.24.0sourceimpl From<&CStr> for Arc<CStr>1.17.0sourceimpl From<&OsStr> for Box<OsStr>1.24.0sourceimpl From<&OsStr> for Rc<OsStr>1.24.0sourceimpl From<&OsStr> for Arc<OsStr>1.17.0sourceimpl From<&Path> for Box<Path>1.24.0sourceimpl From<&Path> for Rc<Path>1.24.0sourceimpl From<&Path> for Arc<Path>1.35.0sourceimpl From<&String> for String1.44.0sourceimpl From<&mut str> for Stringsourceimpl From<AsciiChar> for charsourceimpl From<AsciiChar> for u8sourceimpl From<AsciiChar> for u16sourceimpl From<AsciiChar> for u32sourceimpl From<AsciiChar> for u64sourceimpl From<AsciiChar> for u1281.45.0sourceimpl From<Cow<'_, str>> for Box<str>1.45.0sourceimpl From<Cow<'_, CStr>> for Box<CStr>1.45.0sourceimpl From<Cow<'_, OsStr>> for Box<OsStr>1.45.0sourceimpl From<Cow<'_, Path>> for Box<Path>sourceimpl From<TryReserveErrorKind> for TryReserveError1.14.0sourceimpl From<ErrorKind> for Error
Intended for use for errors not exposed to the user, where allocating onto the heap (for normal construction via Error::new) is too costly. 
1.36.0sourceimpl From<Infallible> for TryFromSliceError1.34.0sourceimpl From<Infallible> for TryFromIntError1.68.0sourceimpl From<bool> for f321.68.0sourceimpl From<bool> for f641.28.0sourceimpl From<bool> for i81.28.0sourceimpl From<bool> for i161.28.0sourceimpl From<bool> for i321.28.0sourceimpl From<bool> for i641.28.0sourceimpl From<bool> for i1281.28.0sourceimpl From<bool> for isize1.28.0sourceimpl From<bool> for u81.28.0sourceimpl From<bool> for u161.28.0sourceimpl From<bool> for u321.28.0sourceimpl From<bool> for u641.28.0sourceimpl From<bool> for u1281.28.0sourceimpl From<bool> for usize1.24.0sourceimpl From<bool> for AtomicBool1.13.0sourceimpl From<char> for u321.51.0sourceimpl From<char> for u641.51.0sourceimpl From<char> for u1281.46.0sourceimpl From<char> for String1.6.0sourceimpl From<f16> for f641.6.0sourceimpl From<f16> for f1281.6.0sourceimpl From<f32> for f641.6.0sourceimpl From<f32> for f1281.6.0sourceimpl From<f64> for f1281.6.0sourceimpl From<i8> for f321.6.0sourceimpl From<i8> for f641.5.0sourceimpl From<i8> for i161.5.0sourceimpl From<i8> for i321.5.0sourceimpl From<i8> for i641.26.0sourceimpl From<i8> for i1281.5.0sourceimpl From<i8> for isize1.34.0sourceimpl From<i8> for AtomicI81.6.0sourceimpl From<i16> for f321.6.0sourceimpl From<i16> for f641.5.0sourceimpl From<i16> for i321.5.0sourceimpl From<i16> for i641.26.0sourceimpl From<i16> for i1281.26.0sourceimpl From<i16> for isize1.34.0sourceimpl From<i16> for AtomicI161.6.0sourceimpl From<i32> for f641.5.0sourceimpl From<i32> for i641.26.0sourceimpl From<i32> for i1281.34.0sourceimpl From<i32> for AtomicI321.26.0sourceimpl From<i64> for i1281.34.0sourceimpl From<i64> for AtomicI641.23.0sourceimpl From<isize> for AtomicIsize1.34.0sourceimpl From<!> for Infalliblesourceimpl From<!> for TryFromIntError1.13.0sourceimpl From<u8> for char
Maps a byte in 0x00..=0xFF to a char whose code point has the same value, in U+0000..=U+00FF. Unicode is designed such that this effectively decodes bytes with the character encoding that IANA calls ISO-8859-1. This encoding is compatible with ASCII. Note that this is different from ISO/IEC 8859-1 a.k.a. ISO 8859-1 (with one less hyphen), which leaves some â€œblanksâ€, byte values that are not assigned to any character. ISO-8859-1 (the IANA one) assigns them to the C0 and C1 control codes. Note that this is also different from Windows-1252 a.k.a. code page 1252, which is a superset ISO/IEC 8859-1 that assigns some (not all!) blanks to punctuation and various Latin characters. To confuse things further, on the Web ascii, iso-8859-1, and windows-1252 are all aliases for a superset of Windows-1252 that fills the remaining blanks with corresponding C0 and C1 control codes. 
1.6.0sourceimpl From<u8> for f321.6.0sourceimpl From<u8> for f641.5.0sourceimpl From<u8> for i161.5.0sourceimpl From<u8> for i321.5.0sourceimpl From<u8> for i641.26.0sourceimpl From<u8> for i1281.26.0sourceimpl From<u8> for isize1.5.0sourceimpl From<u8> for u161.5.0sourceimpl From<u8> for u321.5.0sourceimpl From<u8> for u641.26.0sourceimpl From<u8> for u1281.5.0sourceimpl From<u8> for usize1.61.0sourceimpl From<u8> for ExitCode1.34.0sourceimpl From<u8> for AtomicU81.6.0sourceimpl From<u16> for f321.6.0sourceimpl From<u16> for f641.5.0sourceimpl From<u16> for i321.5.0sourceimpl From<u16> for i641.26.0sourceimpl From<u16> for i1281.5.0sourceimpl From<u16> for u321.5.0sourceimpl From<u16> for u641.26.0sourceimpl From<u16> for u1281.26.0sourceimpl From<u16> for usize1.34.0sourceimpl From<u16> for AtomicU161.6.0sourceimpl From<u32> for f641.5.0sourceimpl From<u32> for i641.26.0sourceimpl From<u32> for i1281.5.0sourceimpl From<u32> for u641.26.0sourceimpl From<u32> for u1281.1.0sourceimpl From<u32> for Ipv4Addr1.34.0sourceimpl From<u32> for AtomicU321.26.0sourceimpl From<u64> for i1281.26.0sourceimpl From<u64> for u1281.34.0sourceimpl From<u64> for AtomicU641.26.0sourceimpl From<u128> for Ipv6Addr1.23.0sourceimpl From<usize> for AtomicUsizesourceimpl From<__m128> for Simd<f32, 4>sourceimpl From<__m128d> for Simd<f64, 2>sourceimpl From<__m128i> for Simd<i8, 16>sourceimpl From<__m128i> for Simd<i16, 8>sourceimpl From<__m128i> for Simd<i32, 4>sourceimpl From<__m128i> for Simd<i64, 2>sourceimpl From<__m128i> for Simd<isize, 2>sourceimpl From<__m128i> for Simd<u8, 16>sourceimpl From<__m128i> for Simd<u16, 8>sourceimpl From<__m128i> for Simd<u32, 4>sourceimpl From<__m128i> for Simd<u64, 2>sourceimpl From<__m128i> for Simd<usize, 2>sourceimpl From<__m256> for Simd<f32, 8>sourceimpl From<__m256d> for Simd<f64, 4>sourceimpl From<__m256i> for Simd<i8, 32>sourceimpl From<__m256i> for Simd<i16, 16>sourceimpl From<__m256i> for Simd<i32, 8>sourceimpl From<__m256i> for Simd<i64, 4>sourceimpl From<__m256i> for Simd<isize, 4>sourceimpl From<__m256i> for Simd<u8, 32>sourceimpl From<__m256i> for Simd<u16, 16>sourceimpl From<__m256i> for Simd<u32, 8>sourceimpl From<__m256i> for Simd<u64, 4>sourceimpl From<__m256i> for Simd<usize, 4>sourceimpl From<__m512> for Simd<f32, 16>sourceimpl From<__m512d> for Simd<f64, 8>sourceimpl From<__m512i> for Simd<i8, 64>sourceimpl From<__m512i> for Simd<i16, 32>sourceimpl From<__m512i> for Simd<i32, 16>sourceimpl From<__m512i> for Simd<i64, 8>sourceimpl From<__m512i> for Simd<isize, 8>sourceimpl From<__m512i> for Simd<u8, 64>sourceimpl From<__m512i> for Simd<u16, 32>sourceimpl From<__m512i> for Simd<u32, 16>sourceimpl From<__m512i> for Simd<u64, 8>sourceimpl From<__m512i> for Simd<usize, 8>sourceimpl From<LayoutError> for TryReserveErrorKind1.18.0sourceimpl From<Box<str>> for String1.18.0sourceimpl From<Box<CStr>> for CString1.18.0sourceimpl From<Box<OsStr>> for OsString1.18.0sourceimpl From<Box<Path>> for PathBuf1.78.0sourceimpl From<TryReserveError> for Error1.0.0sourceimpl From<NulError> for Error1.20.0sourceimpl From<CString> for Box<CStr>1.24.0sourceimpl From<CString> for Rc<CStr>1.24.0sourceimpl From<CString> for Arc<CStr>1.7.0sourceimpl From<CString> for Vec<u8>1.20.0sourceimpl From<OsString> for Box<OsStr>1.0.0sourceimpl From<OsString> for PathBuf1.24.0sourceimpl From<OsString> for Rc<OsStr>1.24.0sourceimpl From<OsString> for Arc<OsStr>1.63.0sourceimpl From<File> for OwnedFd1.63.0sourceimpl From<File> for OwnedHandleAvailable on Windows only.1.20.0sourceimpl From<File> for Stdio1.74.0sourceimpl From<Stderr> for Stdio1.74.0sourceimpl From<Stdout> for Stdio1.16.0sourceimpl From<Ipv4Addr> for IpAddr1.1.0sourceimpl From<Ipv4Addr> for u321.16.0sourceimpl From<Ipv6Addr> for IpAddr1.26.0sourceimpl From<Ipv6Addr> for u1281.16.0sourceimpl From<SocketAddrV4> for SocketAddr1.16.0sourceimpl From<SocketAddrV6> for SocketAddr1.63.0sourceimpl From<TcpListener> for OwnedFd1.63.0sourceimpl From<TcpListener> for OwnedSocketAvailable on Windows only.1.63.0sourceimpl From<TcpStream> for OwnedFd1.63.0sourceimpl From<TcpStream> for OwnedSocketAvailable on Windows only.1.63.0sourceimpl From<UdpSocket> for OwnedFd1.63.0sourceimpl From<UdpSocket> for OwnedSocketAvailable on Windows only.1.41.0sourceimpl From<NonZero<i8>> for NonZero<i16>1.41.0sourceimpl From<NonZero<i8>> for NonZero<i32>1.41.0sourceimpl From<NonZero<i8>> for NonZero<i64>1.41.0sourceimpl From<NonZero<i8>> for NonZero<i128>1.41.0sourceimpl From<NonZero<i8>> for NonZero<isize>1.41.0sourceimpl From<NonZero<i16>> for NonZero<i32>1.41.0sourceimpl From<NonZero<i16>> for NonZero<i64>1.41.0sourceimpl From<NonZero<i16>> for NonZero<i128>1.41.0sourceimpl From<NonZero<i16>> for NonZero<isize>1.41.0sourceimpl From<NonZero<i32>> for NonZero<i64>1.41.0sourceimpl From<NonZero<i32>> for NonZero<i128>1.41.0sourceimpl From<NonZero<i64>> for NonZero<i128>1.41.0sourceimpl From<NonZero<u8>> for NonZero<i16>1.41.0sourceimpl From<NonZero<u8>> for NonZero<i32>1.41.0sourceimpl From<NonZero<u8>> for NonZero<i64>1.41.0sourceimpl From<NonZero<u8>> for NonZero<i128>1.41.0sourceimpl From<NonZero<u8>> for NonZero<isize>1.41.0sourceimpl From<NonZero<u8>> for NonZero<u16>1.41.0sourceimpl From<NonZero<u8>> for NonZero<u32>1.41.0sourceimpl From<NonZero<u8>> for NonZero<u64>1.41.0sourceimpl From<NonZero<u8>> for NonZero<u128>1.41.0sourceimpl From<NonZero<u8>> for NonZero<usize>1.41.0sourceimpl From<NonZero<u16>> for NonZero<i32>1.41.0sourceimpl From<NonZero<u16>> for NonZero<i64>1.41.0sourceimpl From<NonZero<u16>> for NonZero<i128>1.41.0sourceimpl From<NonZero<u16>> for NonZero<u32>1.41.0sourceimpl From<NonZero<u16>> for NonZero<u64>1.41.0sourceimpl From<NonZero<u16>> for NonZero<u128>1.41.0sourceimpl From<NonZero<u16>> for NonZero<usize>1.41.0sourceimpl From<NonZero<u32>> for NonZero<i64>1.41.0sourceimpl From<NonZero<u32>> for NonZero<i128>1.41.0sourceimpl From<NonZero<u32>> for NonZero<u64>1.41.0sourceimpl From<NonZero<u32>> for NonZero<u128>1.41.0sourceimpl From<NonZero<u64>> for NonZero<i128>1.41.0sourceimpl From<NonZero<u64>> for NonZero<u128>1.63.0sourceimpl From<OwnedFd> for File1.63.0sourceimpl From<OwnedFd> for TcpListener1.63.0sourceimpl From<OwnedFd> for TcpStream1.63.0sourceimpl From<OwnedFd> for UdpSocketsourceimpl From<OwnedFd> for PidFdAvailable on Linux only.1.63.0sourceimpl From<OwnedFd> for UnixDatagramAvailable on Unix only.1.63.0sourceimpl From<OwnedFd> for UnixListenerAvailable on Unix only.1.63.0sourceimpl From<OwnedFd> for UnixStreamAvailable on Unix only.sourceimpl From<OwnedFd> for PipeReadersourceimpl From<OwnedFd> for PipeWriter1.74.0sourceimpl From<OwnedFd> for ChildStderrAvailable on Unix only.
Creates a ChildStderr from the provided OwnedFd. The provided file descriptor must point to a pipe with the CLOEXEC flag set. 
1.74.0sourceimpl From<OwnedFd> for ChildStdinAvailable on Unix only.
Creates a ChildStdin from the provided OwnedFd. The provided file descriptor must point to a pipe with the CLOEXEC flag set. 
1.74.0sourceimpl From<OwnedFd> for ChildStdoutAvailable on Unix only.
Creates a ChildStdout from the provided OwnedFd. The provided file descriptor must point to a pipe with the CLOEXEC flag set. 
1.63.0sourceimpl From<OwnedFd> for StdioAvailable on Unix only.sourceimpl From<PidFd> for OwnedFdAvailable on Linux only.1.63.0sourceimpl From<UnixDatagram> for OwnedFdAvailable on Unix only.1.63.0sourceimpl From<UnixListener> for OwnedFdAvailable on Unix only.1.63.0sourceimpl From<UnixStream> for OwnedFdAvailable on Unix only.1.63.0sourceimpl From<OwnedHandle> for FileAvailable on Windows only.1.74.0sourceimpl From<OwnedHandle> for ChildStderrAvailable on Windows only.
Creates a ChildStderr from the provided OwnedHandle. The provided handle must be asynchronous, as reading and writing from and to it is implemented using asynchronous APIs. 
1.74.0sourceimpl From<OwnedHandle> for ChildStdinAvailable on Windows only.
Creates a ChildStdin from the provided OwnedHandle. The provided handle must be asynchronous, as reading and writing from and to it is implemented using asynchronous APIs. 
1.74.0sourceimpl From<OwnedHandle> for ChildStdoutAvailable on Windows only.
Creates a ChildStdout from the provided OwnedHandle. The provided handle must be asynchronous, as reading and writing from and to it is implemented using asynchronous APIs. 
1.63.0sourceimpl From<OwnedHandle> for StdioAvailable on Windows only.1.63.0sourceimpl From<OwnedSocket> for TcpListenerAvailable on Windows only.1.63.0sourceimpl From<OwnedSocket> for TcpStreamAvailable on Windows only.1.63.0sourceimpl From<OwnedSocket> for UdpSocketAvailable on Windows only.1.20.0sourceimpl From<PathBuf> for Box<Path>1.14.0sourceimpl From<PathBuf> for OsString1.24.0sourceimpl From<PathBuf> for Rc<Path>1.24.0sourceimpl From<PathBuf> for Arc<Path>sourceimpl From<PipeReader> for OwnedFdsourceimpl From<PipeReader> for Stdiosourceimpl From<PipeWriter> for OwnedFdsourceimpl From<PipeWriter> for Stdio1.63.0sourceimpl From<Child> for OwnedHandleAvailable on Windows only.1.63.0sourceimpl From<ChildStderr> for OwnedFdAvailable on Unix only.1.63.0sourceimpl From<ChildStderr> for OwnedHandleAvailable on Windows only.1.20.0sourceimpl From<ChildStderr> for Stdio1.63.0sourceimpl From<ChildStdin> for OwnedFdAvailable on Unix only.1.63.0sourceimpl From<ChildStdin> for OwnedHandleAvailable on Windows only.1.20.0sourceimpl From<ChildStdin> for Stdio1.63.0sourceimpl From<ChildStdout> for OwnedFdAvailable on Unix only.1.63.0sourceimpl From<ChildStdout> for OwnedHandleAvailable on Windows only.1.20.0sourceimpl From<ChildStdout> for Stdiosourceimpl From<ExitStatusError> for ExitStatussourceimpl From<Alignment> for usizesourceimpl From<Alignment> for NonZero<usize>1.62.0sourceimpl From<Rc<str>> for Rc<[u8]>sourceimpl From<Simd<f32, 4>> for __m128sourceimpl From<Simd<f32, 8>> for __m256sourceimpl From<Simd<f32, 16>> for __m512sourceimpl From<Simd<f64, 2>> for __m128dsourceimpl From<Simd<f64, 4>> for __m256dsourceimpl From<Simd<f64, 8>> for __m512dsourceimpl From<Simd<i8, 16>> for __m128isourceimpl From<Simd<i8, 32>> for __m256isourceimpl From<Simd<i8, 64>> for __m512isourceimpl From<Simd<i16, 8>> for __m128isourceimpl From<Simd<i16, 16>> for __m256isourceimpl From<Simd<i16, 32>> for __m512isourceimpl From<Simd<i32, 4>> for __m128isourceimpl From<Simd<i32, 8>> for __m256isourceimpl From<Simd<i32, 16>> for __m512isourceimpl From<Simd<i64, 2>> for __m128isourceimpl From<Simd<i64, 4>> for __m256isourceimpl From<Simd<i64, 8>> for __m512isourceimpl From<Simd<isize, 2>> for __m128isourceimpl From<Simd<isize, 4>> for __m256isourceimpl From<Simd<isize, 8>> for __m512isourceimpl From<Simd<u8, 16>> for __m128isourceimpl From<Simd<u8, 32>> for __m256isourceimpl From<Simd<u8, 64>> for __m512isourceimpl From<Simd<u16, 8>> for __m128isourceimpl From<Simd<u16, 16>> for __m256isourceimpl From<Simd<u16, 32>> for __m512isourceimpl From<Simd<u32, 4>> for __m128isourceimpl From<Simd<u32, 8>> for __m256isourceimpl From<Simd<u32, 16>> for __m512isourceimpl From<Simd<u64, 2>> for __m128isourceimpl From<Simd<u64, 4>> for __m256isourceimpl From<Simd<u64, 8>> for __m512isourceimpl From<Simd<usize, 2>> for __m128isourceimpl From<Simd<usize, 4>> for __m256isourceimpl From<Simd<usize, 8>> for __m512i1.20.0sourceimpl From<String> for Box<str>1.0.0sourceimpl From<String> for OsString1.0.0sourceimpl From<String> for PathBuf1.21.0sourceimpl From<String> for Rc<str>1.21.0sourceimpl From<String> for Arc<str>1.14.0sourceimpl From<String> for Vec<u8>1.24.0sourceimpl From<RecvError> for RecvTimeoutError1.24.0sourceimpl From<RecvError> for TryRecvError1.62.0sourceimpl From<Arc<str>> for Arc<[u8]>1.43.0sourceimpl From<Vec<NonZero<u8>>> for CString1.17.0sourceimpl From<[u8; 4]> for IpAddr1.9.0sourceimpl From<[u8; 4]> for Ipv4Addr1.17.0sourceimpl From<[u8; 16]> for IpAddr1.9.0sourceimpl From<[u8; 16]> for Ipv6Addr1.17.0sourceimpl From<[u16; 8]> for IpAddr1.16.0sourceimpl From<[u16; 8]> for Ipv6Addr1.0.0sourceimpl<'a> From<&'a str> for Cow<'a, str>1.28.0sourceimpl<'a> From<&'a CStr> for Cow<'a, CStr>1.28.0sourceimpl<'a> From<&'a CString> for Cow<'a, CStr>1.28.0sourceimpl<'a> From<&'a OsStr> for Cow<'a, OsStr>1.28.0sourceimpl<'a> From<&'a OsString> for Cow<'a, OsStr>1.6.0sourceimpl<'a> From<&'a Path> for Cow<'a, Path>1.28.0sourceimpl<'a> From<&'a PathBuf> for Cow<'a, Path>1.28.0sourceimpl<'a> From<&'a String> for Cow<'a, str>1.6.0sourceimpl<'a> From<&str> for Box<dyn Error + 'a>1.0.0sourceimpl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a>1.14.0sourceimpl<'a> From<Cow<'a, str>> for String1.28.0sourceimpl<'a> From<Cow<'a, CStr>> for CString1.28.0sourceimpl<'a> From<Cow<'a, OsStr>> for OsString1.28.0sourceimpl<'a> From<Cow<'a, Path>> for PathBuf1.28.0sourceimpl<'a> From<CString> for Cow<'a, CStr>1.28.0sourceimpl<'a> From<OsString> for Cow<'a, OsStr>1.6.0sourceimpl<'a> From<PathBuf> for Cow<'a, Path>1.0.0sourceimpl<'a> From<String> for Cow<'a, str>1.6.0sourceimpl<'a> From<String> for Box<dyn Error + 'a>1.0.0sourceimpl<'a> From<String> for Box<dyn Error + Send + Sync + 'a>1.22.0sourceimpl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + 'a>1.22.0sourceimpl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a>1.45.0sourceimpl<'a, B> From<Cow<'a, B>> for Rc<B>where
    B: ToOwned + ?Sized,
    Rc<B>: From<&'a B> + From<<B as ToOwned>::Owned>,1.45.0sourceimpl<'a, B> From<Cow<'a, B>> for Arc<B>where
    B: ToOwned + ?Sized,
    Arc<B>: From<&'a B> + From<<B as ToOwned>::Owned>,1.0.0sourceimpl<'a, E> From<E> for Box<dyn Error + 'a>where
    E: Error + 'a,1.0.0sourceimpl<'a, E> From<E> for Box<dyn Error + Send + Sync + 'a>where
    E: Error + Send + Sync + 'a,1.30.0sourceimpl<'a, T> From<&'a Option<T>> for Option<&'a T>1.8.0sourceimpl<'a, T> From<&'a [T]> for Cow<'a, [T]>where
    T: Clone,1.28.0sourceimpl<'a, T> From<&'a Vec<T>> for Cow<'a, [T]>where
    T: Clone,1.30.0sourceimpl<'a, T> From<&'a mut Option<T>> for Option<&'a mut T>1.14.0sourceimpl<'a, T> From<Cow<'a, [T]>> for Vec<T>where
    [T]: ToOwned<Owned = Vec<T>>,1.8.0sourceimpl<'a, T> From<Vec<T>> for Cow<'a, [T]>where
    T: Clone,1.77.0sourceimpl<'a, T, const N: usize> From<&'a [T; N]> for Cow<'a, [T]>where
    T: Clone,sourceimpl<'data> From<&'data mut [u8]> for BorrowedBuf<'data>
Creates a new BorrowedBuf from a fully initialized slice. 
sourceimpl<'data> From<&'data mut [MaybeUninit<u8>]> for BorrowedBuf<'data>
Creates a new BorrowedBuf from an uninitialized buffer. Use set_init if part of the buffer is known to be already initialized. 
1.19.0sourceimpl<A> From<Box<str, A>> for Box<[u8], A>where
    A: Allocator,sourceimpl<E> From<E> for Report<E>where
    E: Error,1.17.0sourceimpl<I> From<(I, u16)> for SocketAddrwhere
    I: Into<IpAddr>,1.56.0sourceimpl<K, V, const N: usize> From<[(K, V); N]> for BTreeMap<K, V>where
    K: Ord,1.56.0sourceimpl<K, V, const N: usize> From<[(K, V); N]> for HashMap<K, V, RandomState>where
    K: Eq + Hash,1.17.0sourceimpl<T> From<&[T]> for Box<[T]>where
    T: Clone,1.21.0sourceimpl<T> From<&[T]> for Rc<[T]>where
    T: Clone,1.21.0sourceimpl<T> From<&[T]> for Arc<[T]>where
    T: Clone,1.0.0sourceimpl<T> From<&[T]> for Vec<T>where
    T: Clone,1.19.0sourceimpl<T> From<&mut [T]> for Vec<T>where
    T: Clone,1.45.0sourceimpl<T> From<Cow<'_, [T]>> for Box<[T]>where
    T: Clone,1.71.0sourceimpl<T> From<[T; N]> for (Tâ‚, Tâ‚‚, â€¦, Tâ‚™)
This trait is implemented for tuples up to twelve items long. 
1.34.0sourceimpl<T> From<!> for T
Stability note: This impl does not yet exist, but we are â€œreserving spaceâ€ to add it in the future. See rust-lang/rust#64715 for details. 
1.23.0sourceimpl<T> From<*mut T> for AtomicPtr<T>1.25.0sourceimpl<T> From<&T> for NonNull<T>where
    T: ?Sized,1.25.0sourceimpl<T> From<&mut T> for NonNull<T>where
    T: ?Sized,1.71.0sourceimpl<T> From<(Tâ‚, Tâ‚‚, â€¦, Tâ‚™)> for [T; N]
This trait is implemented for tuples up to twelve items long. 
sourceimpl<T> From<Range<T>> for std::ops::Range<T>sourceimpl<T> From<RangeFrom<T>> for std::ops::RangeFrom<T>sourceimpl<T> From<RangeInclusive<T>> for std::ops::RangeInclusive<T>1.31.0sourceimpl<T> From<NonZero<T>> for Twhere
    T: ZeroablePrimitive,sourceimpl<T> From<Range<T>> for core::range::Range<T>sourceimpl<T> From<RangeFrom<T>> for core::range::RangeFrom<T>sourceimpl<T> From<RangeInclusive<T>> for core::range::RangeInclusive<T>sourceimpl<T> From<SendError<T>> for SendTimeoutError<T>1.24.0sourceimpl<T> From<SendError<T>> for TrySendError<T>1.0.0sourceimpl<T> From<PoisonError<T>> for TryLockError<T>1.63.0sourceimpl<T> From<JoinHandle<T>> for OwnedHandleAvailable on Windows only.1.12.0sourceimpl<T> From<T> for Option<T>1.36.0sourceimpl<T> From<T> for Poll<T>1.6.0sourceimpl<T> From<T> for Box<T>1.12.0sourceimpl<T> From<T> for Cell<T>1.70.0sourceimpl<T> From<T> for OnceCell<T>1.12.0sourceimpl<T> From<T> for RefCell<T>sourceimpl<T> From<T> for SyncUnsafeCell<T>1.12.0sourceimpl<T> From<T> for UnsafeCell<T>1.6.0sourceimpl<T> From<T> for Rc<T>1.6.0sourceimpl<T> From<T> for Arc<T>sourceimpl<T> From<T> for Exclusive<T>1.24.0sourceimpl<T> From<T> for Mutex<T>1.70.0sourceimpl<T> From<T> for OnceLock<T>sourceimpl<T> From<T> for ReentrantLock<T>1.24.0sourceimpl<T> From<T> for RwLock<T>1.0.0sourceimpl<T> From<T> for T1.18.0sourceimpl<T, A> From<Box<[T], A>> for Vec<T, A>where
    A: Allocator,1.33.0sourceimpl<T, A> From<Box<T, A>> for Pin<Box<T, A>>where
    A: Allocator + 'static,
    T: ?Sized,1.21.0sourceimpl<T, A> From<Box<T, A>> for Rc<T, A>where
    A: Allocator,
    T: ?Sized,1.21.0sourceimpl<T, A> From<Box<T, A>> for Arc<T, A>where
    A: Allocator,
    T: ?Sized,1.5.0sourceimpl<T, A> From<BinaryHeap<T, A>> for Vec<T, A>where
    A: Allocator,1.10.0sourceimpl<T, A> From<VecDeque<T, A>> for Vec<T, A>where
    A: Allocator,1.20.0sourceimpl<T, A> From<Vec<T, A>> for Box<[T], A>where
    A: Allocator,1.5.0sourceimpl<T, A> From<Vec<T, A>> for BinaryHeap<T, A>where
    T: Ord,
    A: Allocator,1.10.0sourceimpl<T, A> From<Vec<T, A>> for VecDeque<T, A>where
    A: Allocator,1.21.0sourceimpl<T, A> From<Vec<T, A>> for Rc<[T], A>where
    A: Allocator,1.21.0sourceimpl<T, A> From<Vec<T, A>> for Arc<[T], A>where
    A: Allocator + Clone,1.74.0sourceimpl<T, const N: usize> From<&[T; N]> for Vec<T>where
    T: Clone,1.74.0sourceimpl<T, const N: usize> From<&mut [T; N]> for Vec<T>where
    T: Clone,1.45.0sourceimpl<T, const N: usize> From<[T; N]> for Box<[T]>1.56.0sourceimpl<T, const N: usize> From<[T; N]> for BinaryHeap<T>where
    T: Ord,1.56.0sourceimpl<T, const N: usize> From<[T; N]> for BTreeSet<T>where
    T: Ord,1.56.0sourceimpl<T, const N: usize> From<[T; N]> for HashSet<T, RandomState>where
    T: Eq + Hash,1.56.0sourceimpl<T, const N: usize> From<[T; N]> for LinkedList<T>1.56.0sourceimpl<T, const N: usize> From<[T; N]> for VecDeque<T>1.74.0sourceimpl<T, const N: usize> From<[T; N]> for Rc<[T]>sourceimpl<T, const N: usize> From<[T; N]> for Simd<T, N>where
    LaneCount<N>: SupportedLaneCount,
    T: SimdElement,1.74.0sourceimpl<T, const N: usize> From<[T; N]> for Arc<[T]>1.44.0sourceimpl<T, const N: usize> From<[T; N]> for Vec<T>sourceimpl<T, const N: usize> From<Mask<T, N>> for [bool; N]where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,sourceimpl<T, const N: usize> From<Simd<T, N>> for [T; N]where
    LaneCount<N>: SupportedLaneCount,
    T: SimdElement,sourceimpl<T, const N: usize> From<Mask<T, N>> for Simd<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,sourceimpl<T, const N: usize> From<[bool; N]> for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,1.0.0sourceimpl<T: ?Sized + AsRef<OsStr>> From<&T> for OsString1.0.0sourceimpl<T: ?Sized + AsRef<OsStr>> From<&T> for PathBuf1.0.0sourceimpl<W> From<IntoInnerError<W>> for Errorsourceimpl<W> From<Rc<W>> for LocalWakerwhere
    W: LocalWake + 'static,sourceimpl<W> From<Rc<W>> for RawWakerwhere
    W: LocalWake + 'static,1.51.0sourceimpl<W> From<Arc<W>> for RawWakerwhere
    W: Wake + Send + Sync + 'static,1.51.0sourceimpl<W> From<Arc<W>> for Wakerwhere
    W: Wake + Send + Sync + 'static,sourceimpl<const N: usize> From<Mask<i8, N>> for Mask<i16, N>where
    LaneCount<N>: SupportedLaneCount,sourceimpl<const N: usize> From<Mask<i8, N>> for Mask<i32, N>where
    LaneCount<N>: SupportedLaneCount,sourceimpl<const N: usize> From<Mask<i8, N>> for Mask<i64, N>where
    LaneCount<N>: SupportedLaneCount,sourceimpl<const N: usize> From<Mask<i8, N>> for Mask<isize, N>where
    LaneCount<N>: SupportedLaneCount,sourceimpl<const N: usize> From<Mask<i16, N>> for Mask<i8, N>where
    LaneCount<N>: SupportedLaneCount,sourceimpl<const N: usize> From<Mask<i16, N>> for Mask<i32, N>where
    LaneCount<N>: SupportedLaneCount,sourceimpl<const N: usize> From<Mask<i16, N>> for Mask<i64, N>where
    LaneCount<N>: SupportedLaneCount,sourceimpl<const N: usize> From<Mask<i16, N>> for Mask<isize, N>where
    LaneCount<N>: SupportedLaneCount,sourceimpl<const N: usize> From<Mask<i32, N>> for Mask<i8, N>where
    LaneCount<N>: SupportedLaneCount,sourceimpl<const N: usize> From<Mask<i32, N>> for Mask<i16, N>where
    LaneCount<N>: SupportedLaneCount,sourceimpl<const N: usize> From<Mask<i32, N>> for Mask<i64, N>where
    LaneCount<N>: SupportedLaneCount,sourceimpl<const N: usize> From<Mask<i32, N>> for Mask<isize, N>where
    LaneCount<N>: SupportedLaneCount,sourceimpl<const N: usize> From<Mask<i64, N>> for Mask<i8, N>where
    LaneCount<N>: SupportedLaneCount,sourceimpl<const N: usize> From<Mask<i64, N>> for Mask<i16, N>where
    LaneCount<N>: SupportedLaneCount,sourceimpl<const N: usize> From<Mask<i64, N>> for Mask<i32, N>where
    LaneCount<N>: SupportedLaneCount,sourceimpl<const N: usize> From<Mask<i64, N>> for Mask<isize, N>where
    LaneCount<N>: SupportedLaneCount,sourceimpl<const N: usize> From<Mask<isize, N>> for Mask<i8, N>where
    LaneCount<N>: SupportedLaneCount,sourceimpl<const N: usize> From<Mask<isize, N>> for Mask<i16, N>where
    LaneCount<N>: SupportedLaneCount,sourceimpl<const N: usize> From<Mask<isize, N>> for Mask<i32, N>where
    LaneCount<N>: SupportedLaneCount,sourceimpl<const N: usize> From<Mask<isize, N>> for Mask<i64, N>where
    LaneCount<N>: SupportedLaneCount,

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/convert/trait.From.html


std/collections/enum.tryreserveerrorkind
-----------------------------------------------------------
Enum TryReserveErrorKind
pub enum TryReserveErrorKind {
    CapacityOverflow,
    AllocError {
        layout: Layout,
        /* private fields */
    },
}
ðŸ”¬This is a nightly-only experimental API. (try_reserve_kind #48043)
Details of the allocation that caused a TryReserveError Variants
CapacityOverflow
ðŸ”¬This is a nightly-only experimental API. (try_reserve_kind #48043)
Error due to the computed capacity exceeding the collectionâ€™s maximum (usually isize::MAX bytes). 
AllocError
ðŸ”¬This is a nightly-only experimental API. (try_reserve_kind #48043)
The memory allocator returned an error 
Fields
layout: Layout
ðŸ”¬This is a nightly-only experimental API. (try_reserve_kind #48043)
The layout of allocation request that failed 

Trait Implementations
sourceimpl Clone for TryReserveErrorKind
sourcefn clone(&self) -> TryReserveErrorKindReturns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

sourceimpl Debug for TryReserveErrorKind
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

sourceimpl From<LayoutError> for TryReserveErrorKind
sourcefn from(_: LayoutError) -> TryReserveErrorKind
Always evaluates to TryReserveErrorKind::CapacityOverflow. 
sourceimpl From<TryReserveErrorKind> for TryReserveError
sourcefn from(kind: TryReserveErrorKind) -> TryReserveErrorConverts to this type from the input type.
sourceimpl PartialEq for TryReserveErrorKind
sourcefn eq(&self, other: &TryReserveErrorKind) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
sourceimpl Eq for TryReserveErrorKindsourceimpl StructuralPartialEq for TryReserveErrorKind
Auto Trait Implementations
impl Freeze for TryReserveErrorKindimpl RefUnwindSafe for TryReserveErrorKindimpl Send for TryReserveErrorKindimpl Sync for TryReserveErrorKindimpl Unpin for TryReserveErrorKindimpl UnwindSafe for TryReserveErrorKind
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/collections/enum.TryReserveErrorKind.html


std/ops/trait.bitand
-----------------------------------------------------------
Trait BitAnd
pub trait BitAnd<Rhs = Self> {
    type Output;
    // Required method
    fn bitand(self, rhs: Rhs) -> Self::Output;
}
The bitwise AND operator &. Note that Rhs is Self by default, but this is not mandatory. Examples An implementation of BitAnd for a wrapper around bool. use std::ops::BitAnd;
#[derive(Debug, PartialEq)]
struct Scalar(bool);
impl BitAnd for Scalar {
    type Output = Self;
    // rhs is the "right-hand side" of the expression `a & b`
    fn bitand(self, rhs: Self) -> Self::Output {
        Self(self.0 & rhs.0)
    }
}
assert_eq!(Scalar(true) & Scalar(true), Scalar(true));
assert_eq!(Scalar(true) & Scalar(false), Scalar(false));
assert_eq!(Scalar(false) & Scalar(true), Scalar(false));
assert_eq!(Scalar(false) & Scalar(false), Scalar(false)); An implementation of BitAnd for a wrapper around Vec<bool>. use std::ops::BitAnd;
#[derive(Debug, PartialEq)]
struct BooleanVector(Vec<bool>);
impl BitAnd for BooleanVector {
    type Output = Self;
    fn bitand(self, Self(rhs): Self) -> Self::Output {
        let Self(lhs) = self;
        assert_eq!(lhs.len(), rhs.len());
        Self(
            lhs.iter()
                .zip(rhs.iter())
                .map(|(x, y)| *x & *y)
                .collect()
        )
    }
}
let bv1 = BooleanVector(vec![true, true, false, false]);
let bv2 = BooleanVector(vec![true, false, true, false]);
let expected = BooleanVector(vec![true, false, false, false]);
assert_eq!(bv1 & bv2, expected); Required Associated Types
1.0.0sourcetype Output
The resulting type after applying the & operator. 
Required Methods
1.0.0sourcefn bitand(self, rhs: Rhs) -> Self::Output
Performs the & operation. Examples assert_eq!(true & false, false);
assert_eq!(true & true, true);
assert_eq!(5u8 & 1u8, 1);
assert_eq!(5u8 & 2u8, 0); 
Implementors
1.0.0sourceimpl BitAnd for boolsourcetype Output = bool
1.0.0sourceimpl BitAnd for i8sourcetype Output = i8
1.0.0sourceimpl BitAnd for i16sourcetype Output = i16
1.0.0sourceimpl BitAnd for i32sourcetype Output = i32
1.0.0sourceimpl BitAnd for i64sourcetype Output = i64
1.0.0sourceimpl BitAnd for i128sourcetype Output = i128
1.0.0sourceimpl BitAnd for isizesourcetype Output = isize
1.0.0sourceimpl BitAnd for u8sourcetype Output = u8
1.0.0sourceimpl BitAnd for u16sourcetype Output = u16
1.0.0sourceimpl BitAnd for u32sourcetype Output = u32
1.0.0sourceimpl BitAnd for u64sourcetype Output = u64
1.0.0sourceimpl BitAnd for u128sourcetype Output = u128
1.0.0sourceimpl BitAnd for usizesourcetype Output = usize
1.75.0sourceimpl BitAnd for Ipv4Addrsourcetype Output = Ipv4Addr
1.75.0sourceimpl BitAnd for Ipv6Addrsourcetype Output = Ipv6Addr
1.74.0sourceimpl BitAnd for Saturating<i8>sourcetype Output = Saturating<i8>
1.74.0sourceimpl BitAnd for Saturating<i16>sourcetype Output = Saturating<i16>
1.74.0sourceimpl BitAnd for Saturating<i32>sourcetype Output = Saturating<i32>
1.74.0sourceimpl BitAnd for Saturating<i64>sourcetype Output = Saturating<i64>
1.74.0sourceimpl BitAnd for Saturating<i128>sourcetype Output = Saturating<i128>
1.74.0sourceimpl BitAnd for Saturating<isize>sourcetype Output = Saturating<isize>
1.74.0sourceimpl BitAnd for Saturating<u8>sourcetype Output = Saturating<u8>
1.74.0sourceimpl BitAnd for Saturating<u16>sourcetype Output = Saturating<u16>
1.74.0sourceimpl BitAnd for Saturating<u32>sourcetype Output = Saturating<u32>
1.74.0sourceimpl BitAnd for Saturating<u64>sourcetype Output = Saturating<u64>
1.74.0sourceimpl BitAnd for Saturating<u128>sourcetype Output = Saturating<u128>
1.74.0sourceimpl BitAnd for Saturating<usize>sourcetype Output = Saturating<usize>
1.0.0sourceimpl BitAnd for Wrapping<i8>sourcetype Output = Wrapping<i8>
1.0.0sourceimpl BitAnd for Wrapping<i16>sourcetype Output = Wrapping<i16>
1.0.0sourceimpl BitAnd for Wrapping<i32>sourcetype Output = Wrapping<i32>
1.0.0sourceimpl BitAnd for Wrapping<i64>sourcetype Output = Wrapping<i64>
1.0.0sourceimpl BitAnd for Wrapping<i128>sourcetype Output = Wrapping<i128>
1.0.0sourceimpl BitAnd for Wrapping<isize>sourcetype Output = Wrapping<isize>
1.0.0sourceimpl BitAnd for Wrapping<u8>sourcetype Output = Wrapping<u8>
1.0.0sourceimpl BitAnd for Wrapping<u16>sourcetype Output = Wrapping<u16>
1.0.0sourceimpl BitAnd for Wrapping<u32>sourcetype Output = Wrapping<u32>
1.0.0sourceimpl BitAnd for Wrapping<u64>sourcetype Output = Wrapping<u64>
1.0.0sourceimpl BitAnd for Wrapping<u128>sourcetype Output = Wrapping<u128>
1.0.0sourceimpl BitAnd for Wrapping<usize>sourcetype Output = Wrapping<usize>
1.0.0sourceimpl BitAnd<&bool> for &boolsourcetype Output = <bool as BitAnd>::Output
1.0.0sourceimpl BitAnd<&bool> for boolsourcetype Output = <bool as BitAnd>::Output
1.0.0sourceimpl BitAnd<&i8> for &i8sourcetype Output = <i8 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&i8> for i8sourcetype Output = <i8 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&i16> for &i16sourcetype Output = <i16 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&i16> for i16sourcetype Output = <i16 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&i32> for &i32sourcetype Output = <i32 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&i32> for i32sourcetype Output = <i32 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&i64> for &i64sourcetype Output = <i64 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&i64> for i64sourcetype Output = <i64 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&i128> for &i128sourcetype Output = <i128 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&i128> for i128sourcetype Output = <i128 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&isize> for &isizesourcetype Output = <isize as BitAnd>::Output
1.0.0sourceimpl BitAnd<&isize> for isizesourcetype Output = <isize as BitAnd>::Output
1.0.0sourceimpl BitAnd<&u8> for &u8sourcetype Output = <u8 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&u8> for u8sourcetype Output = <u8 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&u16> for &u16sourcetype Output = <u16 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&u16> for u16sourcetype Output = <u16 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&u32> for &u32sourcetype Output = <u32 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&u32> for u32sourcetype Output = <u32 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&u64> for &u64sourcetype Output = <u64 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&u64> for u64sourcetype Output = <u64 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&u128> for &u128sourcetype Output = <u128 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&u128> for u128sourcetype Output = <u128 as BitAnd>::Output
1.0.0sourceimpl BitAnd<&usize> for &usizesourcetype Output = <usize as BitAnd>::Output
1.0.0sourceimpl BitAnd<&usize> for usizesourcetype Output = <usize as BitAnd>::Output
1.75.0sourceimpl BitAnd<&Ipv4Addr> for &Ipv4Addrsourcetype Output = Ipv4Addr
1.75.0sourceimpl BitAnd<&Ipv4Addr> for Ipv4Addrsourcetype Output = Ipv4Addr
1.75.0sourceimpl BitAnd<&Ipv6Addr> for &Ipv6Addrsourcetype Output = Ipv6Addr
1.75.0sourceimpl BitAnd<&Ipv6Addr> for Ipv6Addrsourcetype Output = Ipv6Addr
1.74.0sourceimpl BitAnd<&Saturating<i8>> for &Saturating<i8>sourcetype Output = <Saturating<i8> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<i8>> for Saturating<i8>sourcetype Output = <Saturating<i8> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<i16>> for &Saturating<i16>sourcetype Output = <Saturating<i16> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<i16>> for Saturating<i16>sourcetype Output = <Saturating<i16> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<i32>> for &Saturating<i32>sourcetype Output = <Saturating<i32> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<i32>> for Saturating<i32>sourcetype Output = <Saturating<i32> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<i64>> for &Saturating<i64>sourcetype Output = <Saturating<i64> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<i64>> for Saturating<i64>sourcetype Output = <Saturating<i64> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<i128>> for &Saturating<i128>sourcetype Output = <Saturating<i128> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<i128>> for Saturating<i128>sourcetype Output = <Saturating<i128> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<isize>> for &Saturating<isize>sourcetype Output = <Saturating<isize> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<isize>> for Saturating<isize>sourcetype Output = <Saturating<isize> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<u8>> for &Saturating<u8>sourcetype Output = <Saturating<u8> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<u8>> for Saturating<u8>sourcetype Output = <Saturating<u8> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<u16>> for &Saturating<u16>sourcetype Output = <Saturating<u16> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<u16>> for Saturating<u16>sourcetype Output = <Saturating<u16> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<u32>> for &Saturating<u32>sourcetype Output = <Saturating<u32> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<u32>> for Saturating<u32>sourcetype Output = <Saturating<u32> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<u64>> for &Saturating<u64>sourcetype Output = <Saturating<u64> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<u64>> for Saturating<u64>sourcetype Output = <Saturating<u64> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<u128>> for &Saturating<u128>sourcetype Output = <Saturating<u128> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<u128>> for Saturating<u128>sourcetype Output = <Saturating<u128> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<usize>> for &Saturating<usize>sourcetype Output = <Saturating<usize> as BitAnd>::Output
1.74.0sourceimpl BitAnd<&Saturating<usize>> for Saturating<usize>sourcetype Output = <Saturating<usize> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<i8>> for &Wrapping<i8>sourcetype Output = <Wrapping<i8> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<i8>> for Wrapping<i8>sourcetype Output = <Wrapping<i8> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<i16>> for &Wrapping<i16>sourcetype Output = <Wrapping<i16> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<i16>> for Wrapping<i16>sourcetype Output = <Wrapping<i16> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<i32>> for &Wrapping<i32>sourcetype Output = <Wrapping<i32> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<i32>> for Wrapping<i32>sourcetype Output = <Wrapping<i32> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<i64>> for &Wrapping<i64>sourcetype Output = <Wrapping<i64> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<i64>> for Wrapping<i64>sourcetype Output = <Wrapping<i64> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<i128>> for &Wrapping<i128>sourcetype Output = <Wrapping<i128> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<i128>> for Wrapping<i128>sourcetype Output = <Wrapping<i128> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<isize>> for &Wrapping<isize>sourcetype Output = <Wrapping<isize> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<isize>> for Wrapping<isize>sourcetype Output = <Wrapping<isize> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<u8>> for &Wrapping<u8>sourcetype Output = <Wrapping<u8> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<u8>> for Wrapping<u8>sourcetype Output = <Wrapping<u8> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<u16>> for &Wrapping<u16>sourcetype Output = <Wrapping<u16> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<u16>> for Wrapping<u16>sourcetype Output = <Wrapping<u16> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<u32>> for &Wrapping<u32>sourcetype Output = <Wrapping<u32> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<u32>> for Wrapping<u32>sourcetype Output = <Wrapping<u32> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<u64>> for &Wrapping<u64>sourcetype Output = <Wrapping<u64> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<u64>> for Wrapping<u64>sourcetype Output = <Wrapping<u64> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<u128>> for &Wrapping<u128>sourcetype Output = <Wrapping<u128> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<u128>> for Wrapping<u128>sourcetype Output = <Wrapping<u128> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<usize>> for &Wrapping<usize>sourcetype Output = <Wrapping<usize> as BitAnd>::Output
1.14.0sourceimpl BitAnd<&Wrapping<usize>> for Wrapping<usize>sourcetype Output = <Wrapping<usize> as BitAnd>::Output
1.75.0sourceimpl BitAnd<Ipv4Addr> for &Ipv4Addrsourcetype Output = Ipv4Addr
1.75.0sourceimpl BitAnd<Ipv6Addr> for &Ipv6Addrsourcetype Output = Ipv6Addr
1.0.0sourceimpl<'a> BitAnd<bool> for &'a boolsourcetype Output = <bool as BitAnd>::Output
1.0.0sourceimpl<'a> BitAnd<i8> for &'a i8sourcetype Output = <i8 as BitAnd>::Output
1.0.0sourceimpl<'a> BitAnd<i16> for &'a i16sourcetype Output = <i16 as BitAnd>::Output
1.0.0sourceimpl<'a> BitAnd<i32> for &'a i32sourcetype Output = <i32 as BitAnd>::Output
1.0.0sourceimpl<'a> BitAnd<i64> for &'a i64sourcetype Output = <i64 as BitAnd>::Output
1.0.0sourceimpl<'a> BitAnd<i128> for &'a i128sourcetype Output = <i128 as BitAnd>::Output
1.0.0sourceimpl<'a> BitAnd<isize> for &'a isizesourcetype Output = <isize as BitAnd>::Output
1.0.0sourceimpl<'a> BitAnd<u8> for &'a u8sourcetype Output = <u8 as BitAnd>::Output
1.0.0sourceimpl<'a> BitAnd<u16> for &'a u16sourcetype Output = <u16 as BitAnd>::Output
1.0.0sourceimpl<'a> BitAnd<u32> for &'a u32sourcetype Output = <u32 as BitAnd>::Output
1.0.0sourceimpl<'a> BitAnd<u64> for &'a u64sourcetype Output = <u64 as BitAnd>::Output
1.0.0sourceimpl<'a> BitAnd<u128> for &'a u128sourcetype Output = <u128 as BitAnd>::Output
1.0.0sourceimpl<'a> BitAnd<usize> for &'a usizesourcetype Output = <usize as BitAnd>::Output
1.74.0sourceimpl<'a> BitAnd<Saturating<i8>> for &'a Saturating<i8>sourcetype Output = <Saturating<i8> as BitAnd>::Output
1.74.0sourceimpl<'a> BitAnd<Saturating<i16>> for &'a Saturating<i16>sourcetype Output = <Saturating<i16> as BitAnd>::Output
1.74.0sourceimpl<'a> BitAnd<Saturating<i32>> for &'a Saturating<i32>sourcetype Output = <Saturating<i32> as BitAnd>::Output
1.74.0sourceimpl<'a> BitAnd<Saturating<i64>> for &'a Saturating<i64>sourcetype Output = <Saturating<i64> as BitAnd>::Output
1.74.0sourceimpl<'a> BitAnd<Saturating<i128>> for &'a Saturating<i128>sourcetype Output = <Saturating<i128> as BitAnd>::Output
1.74.0sourceimpl<'a> BitAnd<Saturating<isize>> for &'a Saturating<isize>sourcetype Output = <Saturating<isize> as BitAnd>::Output
1.74.0sourceimpl<'a> BitAnd<Saturating<u8>> for &'a Saturating<u8>sourcetype Output = <Saturating<u8> as BitAnd>::Output
1.74.0sourceimpl<'a> BitAnd<Saturating<u16>> for &'a Saturating<u16>sourcetype Output = <Saturating<u16> as BitAnd>::Output
1.74.0sourceimpl<'a> BitAnd<Saturating<u32>> for &'a Saturating<u32>sourcetype Output = <Saturating<u32> as BitAnd>::Output
1.74.0sourceimpl<'a> BitAnd<Saturating<u64>> for &'a Saturating<u64>sourcetype Output = <Saturating<u64> as BitAnd>::Output
1.74.0sourceimpl<'a> BitAnd<Saturating<u128>> for &'a Saturating<u128>sourcetype Output = <Saturating<u128> as BitAnd>::Output
1.74.0sourceimpl<'a> BitAnd<Saturating<usize>> for &'a Saturating<usize>sourcetype Output = <Saturating<usize> as BitAnd>::Output
1.14.0sourceimpl<'a> BitAnd<Wrapping<i8>> for &'a Wrapping<i8>sourcetype Output = <Wrapping<i8> as BitAnd>::Output
1.14.0sourceimpl<'a> BitAnd<Wrapping<i16>> for &'a Wrapping<i16>sourcetype Output = <Wrapping<i16> as BitAnd>::Output
1.14.0sourceimpl<'a> BitAnd<Wrapping<i32>> for &'a Wrapping<i32>sourcetype Output = <Wrapping<i32> as BitAnd>::Output
1.14.0sourceimpl<'a> BitAnd<Wrapping<i64>> for &'a Wrapping<i64>sourcetype Output = <Wrapping<i64> as BitAnd>::Output
1.14.0sourceimpl<'a> BitAnd<Wrapping<i128>> for &'a Wrapping<i128>sourcetype Output = <Wrapping<i128> as BitAnd>::Output
1.14.0sourceimpl<'a> BitAnd<Wrapping<isize>> for &'a Wrapping<isize>sourcetype Output = <Wrapping<isize> as BitAnd>::Output
1.14.0sourceimpl<'a> BitAnd<Wrapping<u8>> for &'a Wrapping<u8>sourcetype Output = <Wrapping<u8> as BitAnd>::Output
1.14.0sourceimpl<'a> BitAnd<Wrapping<u16>> for &'a Wrapping<u16>sourcetype Output = <Wrapping<u16> as BitAnd>::Output
1.14.0sourceimpl<'a> BitAnd<Wrapping<u32>> for &'a Wrapping<u32>sourcetype Output = <Wrapping<u32> as BitAnd>::Output
1.14.0sourceimpl<'a> BitAnd<Wrapping<u64>> for &'a Wrapping<u64>sourcetype Output = <Wrapping<u64> as BitAnd>::Output
1.14.0sourceimpl<'a> BitAnd<Wrapping<u128>> for &'a Wrapping<u128>sourcetype Output = <Wrapping<u128> as BitAnd>::Output
1.14.0sourceimpl<'a> BitAnd<Wrapping<usize>> for &'a Wrapping<usize>sourcetype Output = <Wrapping<usize> as BitAnd>::Output
sourceimpl<'lhs, 'rhs, T, const N: usize> BitAnd<&'rhs Simd<T, N>> for &'lhs Simd<T, N>where
    T: SimdElement,
    Simd<T, N>: BitAnd<Output = Simd<T, N>>,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<T, N>
1.0.0sourceimpl<T, A> BitAnd<&BTreeSet<T, A>> for &BTreeSet<T, A>where
    T: Ord + Clone,
    A: Allocator + Clone,sourcetype Output = BTreeSet<T, A>
1.0.0sourceimpl<T, S> BitAnd<&HashSet<T, S>> for &HashSet<T, S>where
    T: Eq + Hash + Clone,
    S: BuildHasher + Default,sourcetype Output = HashSet<T, S>
sourceimpl<T, const N: usize> BitAnd for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Mask<T, N>
sourceimpl<T, const N: usize> BitAnd<&Simd<T, N>> for Simd<T, N>where
    T: SimdElement,
    Simd<T, N>: BitAnd<Output = Simd<T, N>>,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<T, N>
sourceimpl<T, const N: usize> BitAnd<bool> for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Mask<T, N>
sourceimpl<T, const N: usize> BitAnd<Mask<T, N>> for boolwhere
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Mask<T, N>
sourceimpl<T, const N: usize> BitAnd<Simd<T, N>> for &Simd<T, N>where
    T: SimdElement,
    Simd<T, N>: BitAnd<Output = Simd<T, N>>,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<T, N>
sourceimpl<const N: usize> BitAnd for Simd<i8, N>where
    i8: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i8, N>
sourceimpl<const N: usize> BitAnd for Simd<i16, N>where
    i16: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i16, N>
sourceimpl<const N: usize> BitAnd for Simd<i32, N>where
    i32: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i32, N>
sourceimpl<const N: usize> BitAnd for Simd<i64, N>where
    i64: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<i64, N>
sourceimpl<const N: usize> BitAnd for Simd<isize, N>where
    isize: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<isize, N>
sourceimpl<const N: usize> BitAnd for Simd<u8, N>where
    u8: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u8, N>
sourceimpl<const N: usize> BitAnd for Simd<u16, N>where
    u16: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u16, N>
sourceimpl<const N: usize> BitAnd for Simd<u32, N>where
    u32: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u32, N>
sourceimpl<const N: usize> BitAnd for Simd<u64, N>where
    u64: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<u64, N>
sourceimpl<const N: usize> BitAnd for Simd<usize, N>where
    usize: SimdElement,
    LaneCount<N>: SupportedLaneCount,sourcetype Output = Simd<usize, N>

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/ops/trait.BitAnd.html


std/intrinsics/fn.nearbyintf64
-----------------------------------------------------------
Function nearbyintf64
pub unsafe extern "rust-intrinsic" fn nearbyintf64(x: f64) -> f64
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Returns the nearest integer to an f64. Changing the rounding mode is not possible in Rust, so this rounds half-way cases to the number with an even least significant digit. This intrinsic does not have a stable counterpart.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.nearbyintf64.html


std/slice/struct.arraychunks
-----------------------------------------------------------
Struct ArrayChunks
pub struct ArrayChunks<'a, T, const N: usize>where
    T: 'a,{ /* private fields */ }
ðŸ”¬This is a nightly-only experimental API. (array_chunks #74985)
An iterator over a slice in (non-overlapping) chunks (N elements at a time), starting at the beginning of the slice. When the slice len is not evenly divided by the chunk size, the last up to N-1 elements will be omitted but can be retrieved from the remainder function from the iterator. This struct is created by the array_chunks method on slices. Example #![feature(array_chunks)]
let slice = ['l', 'o', 'r', 'e', 'm'];
let mut iter = slice.array_chunks::<2>();
assert_eq!(iter.next(), Some(&['l', 'o']));
assert_eq!(iter.next(), Some(&['r', 'e']));
assert_eq!(iter.next(), None); Implementations
sourceimpl<'a, T, const N: usize> ArrayChunks<'a, T, N>
sourcepub fn remainder(&self) -> &'a [T]
ðŸ”¬This is a nightly-only experimental API. (array_chunks #74985)
Returns the remainder of the original slice that is not going to be returned by the iterator. The returned slice has at most N-1 elements. 

Trait Implementations
sourceimpl<T, const N: usize> Clone for ArrayChunks<'_, T, N>
sourcefn clone(&self) -> ArrayChunks<'_, T, N> â“˜Returns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

sourceimpl<'a, T, const N: usize> Debug for ArrayChunks<'a, T, N>where
    T: Debug + 'a,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

sourceimpl<'a, T, const N: usize> DoubleEndedIterator for ArrayChunks<'a, T, N>
sourcefn next_back(&mut self) -> Option<&'a [T; N]>Removes and returns an element from the end of the iterator. Read more
sourcefn nth_back(
    &mut self,
    n: usize,
) -> Option<<ArrayChunks<'a, T, N> as Iterator>::Item>Returns the nth element from the end of the iterator. Read more
sourcefn advance_back_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator from the back by n elements. Read more
1.27.0sourcefn try_rfold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> R,
    R: Try<Output = B>,This is the reverse version of Iterator::try_fold(): it takes elements starting from the back of the iterator. Read more
1.27.0sourcefn rfold<B, F>(self, init: B, f: F) -> Bwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> B,An iterator method that reduces the iteratorâ€™s elements to a single, final value, starting from the back. Read more
1.27.0sourcefn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator from the back that satisfies a predicate. Read more

sourceimpl<T, const N: usize> ExactSizeIterator for ArrayChunks<'_, T, N>
sourcefn is_empty(&self) -> bool
ðŸ”¬This is a nightly-only experimental API. (exact_size_is_empty #35428)
Returns true if the iterator is empty. Read more
1.0.0sourcefn len(&self) -> usizeReturns the exact remaining length of the iterator. Read more

sourceimpl<'a, T, const N: usize> Iterator for ArrayChunks<'a, T, N>
sourcetype Item = &'a [T; N]The type of the elements being iterated over.
sourcefn next(&mut self) -> Option<&'a [T; N]>Advances the iterator and returns the next value. Read more
sourcefn size_hint(&self) -> (usize, Option<usize>)Returns the bounds on the remaining length of the iterator. Read more
sourcefn count(self) -> usizeConsumes the iterator, counting the number of iterations and returning it. Read more
sourcefn nth(&mut self, n: usize) -> Option<<ArrayChunks<'a, T, N> as Iterator>::Item>Returns the nth element of the iterator. Read more
sourcefn last(self) -> Option<<ArrayChunks<'a, T, N> as Iterator>::Item>Consumes the iterator, returning the last element. Read more
sourcefn next_chunk<const N: usize>(
    &mut self,
) -> Result<[Self::Item; N], IntoIter<Self::Item, N>>where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_next_chunk #98326)
Advances the iterator and returns an array containing the next N values. Read more
sourcefn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator by n elements. Read more
1.28.0sourcefn step_by(self, step: usize) -> StepBy<Self> â“˜where
    Self: Sized,Creates an iterator starting at the same point, but stepping by the given amount at each iteration. Read more
1.0.0sourcefn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator<Item = Self::Item>,Takes two iterators and creates a new iterator over both in sequence. Read more
1.0.0sourcefn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator,â€˜Zips upâ€™ two iterators into a single iterator of pairs. Read more
sourcefn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G> â“˜where
    Self: Sized,
    G: FnMut() -> Self::Item,
ðŸ”¬This is a nightly-only experimental API. (iter_intersperse #79524)
Creates a new iterator which places an item generated by separator between adjacent items of the original iterator. Read more
1.0.0sourcefn map<B, F>(self, f: F) -> Map<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> B,Takes a closure and creates an iterator which calls that closure on each element. Read more
1.21.0sourcefn for_each<F>(self, f: F)where
    Self: Sized,
    F: FnMut(Self::Item),Calls a closure on each element of an iterator. Read more
1.0.0sourcefn filter<P>(self, predicate: P) -> Filter<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator which uses a closure to determine if an element should be yielded. Read more
1.0.0sourcefn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Creates an iterator that both filters and maps. Read more
1.0.0sourcefn enumerate(self) -> Enumerate<Self> â“˜where
    Self: Sized,Creates an iterator which gives the current iteration count as well as the next value. Read more
1.0.0sourcefn peekable(self) -> Peekable<Self> â“˜where
    Self: Sized,Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information. Read more
1.0.0sourcefn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that skips elements based on a predicate. Read more
1.0.0sourcefn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that yields elements based on a predicate. Read more
1.57.0sourcefn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(Self::Item) -> Option<B>,Creates an iterator that both yields elements based on a predicate and maps. Read more
1.0.0sourcefn skip(self, n: usize) -> Skip<Self> â“˜where
    Self: Sized,Creates an iterator that skips the first n elements. Read more
1.0.0sourcefn take(self, n: usize) -> Take<Self> â“˜where
    Self: Sized,Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner. Read more
1.0.0sourcefn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> â“˜where
    Self: Sized,
    F: FnMut(&mut St, Self::Item) -> Option<B>,An iterator adapter which, like fold, holds internal state, but unlike fold, produces a new iterator. Read more
1.0.0sourcefn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F> â“˜where
    Self: Sized,
    U: IntoIterator,
    F: FnMut(Self::Item) -> U,Creates an iterator that works like map, but flattens nested structure. Read more
sourcefn map_windows<F, R, const N: usize>(self, f: F) -> MapWindows<Self, F, N> â“˜where
    Self: Sized,
    F: FnMut(&[Self::Item; N]) -> R,
ðŸ”¬This is a nightly-only experimental API. (iter_map_windows #87155)
Calls the given function f for each contiguous window of size N over self and returns an iterator over the outputs of f. Like slice::windows(), the windows during mapping overlap as well. Read more
1.0.0sourcefn fuse(self) -> Fuse<Self> â“˜where
    Self: Sized,Creates an iterator which ends after the first None. Read more
1.0.0sourcefn inspect<F>(self, f: F) -> Inspect<Self, F> â“˜where
    Self: Sized,
    F: FnMut(&Self::Item),Does something with each element of an iterator, passing the value on. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Borrows an iterator, rather than consuming it. Read more
1.0.0sourcefn collect<B>(self) -> Bwhere
    B: FromIterator<Self::Item>,
    Self: Sized,Transforms an iterator into a collection. Read more
sourcefn collect_into<E>(self, collection: &mut E) -> &mut Ewhere
    E: Extend<Self::Item>,
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_collect_into #94780)
Collects all the items from an iterator into a collection. Read more
1.0.0sourcefn partition<B, F>(self, f: F) -> (B, B)where
    Self: Sized,
    B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool,Consumes an iterator, creating two collections from it. Read more
sourcefn partition_in_place<'a, T, P>(self, predicate: P) -> usizewhere
    T: 'a,
    Self: Sized + DoubleEndedIterator<Item = &'a mut T>,
    P: FnMut(&T) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_partition_in_place #62543)
Reorders the elements of this iterator in-place according to the given predicate, such that all those that return true precede all those that return false. Returns the number of true elements found. Read more
sourcefn is_partitioned<P>(self, predicate: P) -> boolwhere
    Self: Sized,
    P: FnMut(Self::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_is_partitioned #62544)
Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false. Read more
1.27.0sourcefn try_fold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> R,
    R: Try<Output = B>,An iterator method that applies a function as long as it returns successfully, producing a single, final value. Read more
1.27.0sourcefn try_for_each<F, R>(&mut self, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(Self::Item) -> R,
    R: Try<Output = ()>,An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. Read more
1.0.0sourcefn fold<B, F>(self, init: B, f: F) -> Bwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> B,Folds every element into an accumulator by applying an operation, returning the final result. Read more
1.51.0sourcefn reduce<F>(self, f: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(Self::Item, Self::Item) -> Self::Item,Reduces the elements to a single one, by repeatedly applying a reducing operation. Read more
sourcefn try_reduce<R>(
    &mut self,
    f: impl FnMut(Self::Item, Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = Self::Item>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (iterator_try_reduce #87053)
Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. Read more
1.0.0sourcefn all<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if every element of the iterator matches a predicate. Read more
1.0.0sourcefn any<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if any element of the iterator matches a predicate. Read more
1.0.0sourcefn find<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator that satisfies a predicate. Read more
1.30.0sourcefn find_map<B, F>(&mut self, f: F) -> Option<B>where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Applies function to the elements of iterator and returns the first non-none result. Read more
sourcefn try_find<R>(
    &mut self,
    f: impl FnMut(&Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = bool>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (try_find #63178)
Applies function to the elements of iterator and returns the first true result or the first error. Read more
1.0.0sourcefn position<P>(&mut self, predicate: P) -> Option<usize>where
    Self: Sized,
    P: FnMut(Self::Item) -> bool,Searches for an element in an iterator, returning its index. Read more
1.0.0sourcefn rposition<P>(&mut self, predicate: P) -> Option<usize>where
    P: FnMut(Self::Item) -> bool,
    Self: Sized + ExactSizeIterator + DoubleEndedIterator,Searches for an element in an iterator from the right, returning its index. Read more
1.6.0sourcefn max_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the maximum value from the specified function. Read more
1.15.0sourcefn max_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the maximum value with respect to the specified comparison function. Read more
1.6.0sourcefn min_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the minimum value from the specified function. Read more
1.15.0sourcefn min_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the minimum value with respect to the specified comparison function. Read more
1.0.0sourcefn rev(self) -> Rev<Self> â“˜where
    Self: Sized + DoubleEndedIterator,Reverses an iteratorâ€™s direction. Read more
1.0.0sourcefn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)where
    FromA: Default + Extend<A>,
    FromB: Default + Extend<B>,
    Self: Sized + Iterator<Item = (A, B)>,Converts an iterator of pairs into a pair of containers. Read more
1.36.0sourcefn copied<'a, T>(self) -> Copied<Self> â“˜where
    T: 'a + Copy,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which copies all of its elements. Read more
1.0.0sourcefn cloned<'a, T>(self) -> Cloned<Self> â“˜where
    T: 'a + Clone,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which clones all of its elements. Read more
1.0.0sourcefn cycle(self) -> Cycle<Self> â“˜where
    Self: Sized + Clone,Repeats an iterator endlessly. Read more
sourcefn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N> â“˜where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_array_chunks #100450)
Returns an iterator over N elements of the iterator at a time. Read more
1.11.0sourcefn sum<S>(self) -> Swhere
    Self: Sized,
    S: Sum<Self::Item>,Sums the elements of an iterator. Read more
1.11.0sourcefn product<P>(self) -> Pwhere
    Self: Sized,
    P: Product<Self::Item>,Iterates over the entire iterator, multiplying all the elements Read more
sourcefn cmp_by<I, F>(self, other: I, cmp: F) -> Orderingwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn partial_cmp<I>(self, other: I) -> Option<Ordering>where
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,
Lexicographically compares the PartialOrd elements of this Iterator with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. Read more
sourcefn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering>where
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Option<Ordering>,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn eq<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are equal to those of another. Read more
sourcefn eq_by<I, F>(self, other: I, eq: F) -> boolwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function. Read more
1.5.0sourcefn ne<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are not equal to those of another. Read more
1.5.0sourcefn lt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less than those of another. Read more
1.5.0sourcefn le<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less or equal to those of another. Read more
1.5.0sourcefn gt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than those of another. Read more
1.5.0sourcefn ge<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than or equal to those of another. Read more
1.82.0sourcefn is_sorted_by<F>(self, compare: F) -> boolwhere
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> bool,Checks if the elements of this iterator are sorted using the given comparator function. Read more
1.82.0sourcefn is_sorted_by_key<F, K>(self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> K,
    K: PartialOrd,Checks if the elements of this iterator are sorted using the given key extraction function. Read more

sourceimpl<T, const N: usize> FusedIterator for ArrayChunks<'_, T, N>sourceimpl<T, const N: usize> TrustedLen for ArrayChunks<'_, T, N>
Auto Trait Implementations
impl<'a, T, const N: usize> Freeze for ArrayChunks<'a, T, N>impl<'a, T, const N: usize> RefUnwindSafe for ArrayChunks<'a, T, N>where
    T: RefUnwindSafe,impl<'a, T, const N: usize> Send for ArrayChunks<'a, T, N>where
    T: Sync,impl<'a, T, const N: usize> Sync for ArrayChunks<'a, T, N>where
    T: Sync,impl<'a, T, const N: usize> Unpin for ArrayChunks<'a, T, N>impl<'a, T, const N: usize> UnwindSafe for ArrayChunks<'a, T, N>where
    T: RefUnwindSafe,
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<I> IntoIterator for Iwhere
    I: Iterator,
sourcetype Item = <I as Iterator>::ItemThe type of the elements being iterated over.
sourcetype IntoIter = IWhich kind of iterator are we turning this into?
sourcefn into_iter(self) -> ICreates an iterator from a value. Read more

sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/slice/struct.ArrayChunks.html


std/fmt/struct.debugtuple
-----------------------------------------------------------
Struct DebugTuple
pub struct DebugTuple<'a, 'b>where
    'b: 'a,{ /* private fields */ }
A struct to help with fmt::Debug implementations. This is useful when you wish to output a formatted tuple as a part of your Debug::fmt implementation. This can be constructed by the Formatter::debug_tuple method. Examples use std::fmt;
struct Foo(i32, String);
impl fmt::Debug for Foo {
    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        fmt.debug_tuple("Foo")
           .field(&self.0)
           .field(&self.1)
           .finish()
    }
}
assert_eq!(
    format!("{:?}", Foo(10, "Hello World".to_string())),
    r#"Foo(10, "Hello World")"#,
); Implementations
sourceimpl<'a, 'b> DebugTuple<'a, 'b>where
    'b: 'a,
1.2.0sourcepub fn field(&mut self, value: &dyn Debug) -> &mut DebugTuple<'a, 'b>
Adds a new field to the generated tuple struct output. Examples use std::fmt;
struct Foo(i32, String);
impl fmt::Debug for Foo {
    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        fmt.debug_tuple("Foo")
           .field(&self.0) // We add the first field.
           .field(&self.1) // We add the second field.
           .finish() // We're good to go!
    }
}
assert_eq!(
    format!("{:?}", Foo(10, "Hello World".to_string())),
    r#"Foo(10, "Hello World")"#,
); 
sourcepub fn field_with<F>(&mut self, value_fmt: F) -> &mut DebugTuple<'a, 'b>where
    F: FnOnce(&mut Formatter<'_>) -> Result<(), Error>,
ðŸ”¬This is a nightly-only experimental API. (debug_closure_helpers #117729)
Adds a new field to the generated tuple struct output. This method is equivalent to DebugTuple::field, but formats the value using a provided closure rather than by calling Debug::fmt. 
1.83.0sourcepub fn finish_non_exhaustive(&mut self) -> Result<(), Error>
Marks the tuple struct as non-exhaustive, indicating to the reader that there are some other fields that are not shown in the debug representation. Examples use std::fmt;
struct Foo(i32, String);
impl fmt::Debug for Foo {
    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        fmt.debug_tuple("Foo")
           .field(&self.0)
           .finish_non_exhaustive() // Show that some other field(s) exist.
    }
}
assert_eq!(
    format!("{:?}", Foo(10, "secret!".to_owned())),
    "Foo(10, ..)",
); 
1.2.0sourcepub fn finish(&mut self) -> Result<(), Error>
Finishes output and returns any error encountered. Examples use std::fmt;
struct Foo(i32, String);
impl fmt::Debug for Foo {
    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        fmt.debug_tuple("Foo")
           .field(&self.0)
           .field(&self.1)
           .finish() // You need to call it to "finish" the
                     // tuple formatting.
    }
}
assert_eq!(
    format!("{:?}", Foo(10, "Hello World".to_string())),
    r#"Foo(10, "Hello World")"#,
); 

Auto Trait Implementations
impl<'a, 'b> Freeze for DebugTuple<'a, 'b>impl<'a, 'b> !RefUnwindSafe for DebugTuple<'a, 'b>impl<'a, 'b> !Send for DebugTuple<'a, 'b>impl<'a, 'b> !Sync for DebugTuple<'a, 'b>impl<'a, 'b> Unpin for DebugTuple<'a, 'b>impl<'a, 'b> !UnwindSafe for DebugTuple<'a, 'b>
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/fmt/struct.DebugTuple.html


std/intrinsics/mir/fn.static
-----------------------------------------------------------
Function Static
pub fn Static<T>(s: T) -> &'static T
ðŸ”¬This is a nightly-only experimental API. (custom_mir)

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/mir/fn.Static.html


std/collections/btree_set/struct.unorderedkeyerror
-----------------------------------------------------------
Struct UnorderedKeyError
pub struct UnorderedKeyError {}
ðŸ”¬This is a nightly-only experimental API. (btree_cursors #107540)
Error type returned by CursorMut::insert_before and CursorMut::insert_after if the key being inserted is not properly ordered with regards to adjacent keys. Trait Implementations
sourceimpl Clone for UnorderedKeyError
sourcefn clone(&self) -> UnorderedKeyErrorReturns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

sourceimpl Debug for UnorderedKeyError
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

sourceimpl Display for UnorderedKeyError
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

sourceimpl Error for UnorderedKeyError
1.30.0sourcefn source(&self) -> Option<&(dyn Error + 'static)>Returns the lower-level source of this error, if any. Read more
1.0.0sourcefn description(&self) -> &str
ðŸ‘ŽDeprecated since 1.42.0: use the Display impl or to_string()
 Read more
1.0.0sourcefn cause(&self) -> Option<&dyn Error>
ðŸ‘ŽDeprecated since 1.33.0: replaced by Error::source, which can support downcasting
sourcefn provide<'a>(&'a self, request: &mut Request<'a>)
ðŸ”¬This is a nightly-only experimental API. (error_generic_member_access #99301)
Provides type-based access to context intended for error reports. Read more

sourceimpl PartialEq for UnorderedKeyError
sourcefn eq(&self, other: &UnorderedKeyError) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
sourceimpl Eq for UnorderedKeyErrorsourceimpl StructuralPartialEq for UnorderedKeyError
Auto Trait Implementations
impl Freeze for UnorderedKeyErrorimpl RefUnwindSafe for UnorderedKeyErrorimpl Send for UnorderedKeyErrorimpl Sync for UnorderedKeyErrorimpl Unpin for UnorderedKeyErrorimpl UnwindSafe for UnorderedKeyError
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T> ToString for Twhere
    T: Display + ?Sized,
sourcedefault fn to_string(&self) -> StringConverts the given value to a String. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/collections/btree_set/struct.UnorderedKeyError.html


std/f64/constant.min_positive
-----------------------------------------------------------
Constant MIN_POSITIVE
pub const MIN_POSITIVE: f64 = f64::MIN_POSITIVE; // 2.2250738585072014E-308f64
ðŸ‘ŽDeprecating in a future version: replaced by the MIN_POSITIVE associated constant on f64
Smallest positive normal f64 value. Use f64::MIN_POSITIVE instead. Examples // deprecated way
let min = std::f64::MIN_POSITIVE;
// intended way
let min = f64::MIN_POSITIVE;
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/f64/constant.MIN_POSITIVE.html


std/intrinsics/fn.truncf16
-----------------------------------------------------------
Function truncf16
pub unsafe extern "rust-intrinsic" fn truncf16(x: f16) -> f16
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Returns the integer part of an f16. The stabilized version of this intrinsic is f16::trunc
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.truncf16.html


std/intrinsics/fn.atomic_cxchgweak_relaxed_acquire
-----------------------------------------------------------
Function atomic_cxchgweak_relaxed_acquire
pub unsafe extern "rust-intrinsic" fn atomic_cxchgweak_relaxed_acquire<T>(
    dst: *mut T,
    old: T,
    src: T,
) -> (T, bool)where
    T: Copy,
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Stores a value if the current value is the same as the old value. The stabilized version of this intrinsic is available on the atomic types via the compare_exchange_weak method by passing Ordering::Relaxed and Ordering::Acquire as the success and failure parameters. For example, AtomicBool::compare_exchange_weak.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.atomic_cxchgweak_relaxed_acquire.html


std/ptr/fn.dangling_mut
-----------------------------------------------------------
Function dangling_mut
pub const fn dangling_mut<T>() -> *mut T
ðŸ”¬This is a nightly-only experimental API. (strict_provenance #95228)
Creates a new pointer that is dangling, but well-aligned. This is useful for initializing types which lazily allocate, like Vec::new does. Note that the pointer value may potentially represent a valid pointer to a T, which means this must not be used as a â€œnot yet initializedâ€ sentinel value. Types that lazily allocate must track initialization by some other means.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/ptr/fn.dangling_mut.html


std/intrinsics/fn.copysignf32
-----------------------------------------------------------
Function copysignf32
pub unsafe extern "rust-intrinsic" fn copysignf32(
    x: f32,
    y: f32,
) -> f32
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Copies the sign from y to x for f32 values. The stabilized version of this intrinsic is f32::copysign
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.copysignf32.html


std/simd/trait.simdelement
-----------------------------------------------------------
Trait SimdElement
pub unsafe trait SimdElement: Sealed + Copy {
    type Mask: MaskElement;
}
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Marker trait for types that may be used as SIMD vector elements. Safety This trait, when implemented, asserts the compiler can monomorphize #[repr(simd)] structs with the marked type as an element. Strictly, it is valid to impl if the vector will not be miscompiled. Practically, it is user-unfriendly to impl it if the vector wonâ€™t compile, even when no soundness guarantees are broken by allowing the user to try. Required Associated Types
sourcetype Mask: MaskElement
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
The mask element type corresponding to this element type. 
Object Safety
This trait is not object safe.
Implementors
sourceimpl SimdElement for f32sourcetype Mask = i32
sourceimpl SimdElement for f64sourcetype Mask = i64
sourceimpl SimdElement for i8sourcetype Mask = i8
sourceimpl SimdElement for i16sourcetype Mask = i16
sourceimpl SimdElement for i32sourcetype Mask = i32
sourceimpl SimdElement for i64sourcetype Mask = i64
sourceimpl SimdElement for isizesourcetype Mask = isize
sourceimpl SimdElement for u8sourcetype Mask = i8
sourceimpl SimdElement for u16sourcetype Mask = i16
sourceimpl SimdElement for u32sourcetype Mask = i32
sourceimpl SimdElement for u64sourcetype Mask = i64
sourceimpl SimdElement for usizesourcetype Mask = isize
sourceimpl<T> SimdElement for *const Twhere
    T: Pointee<Metadata = ()>,sourcetype Mask = isize
sourceimpl<T> SimdElement for *mut Twhere
    T: Pointee<Metadata = ()>,sourcetype Mask = isize

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/trait.SimdElement.html


std/slice/struct.rchunksexactmut
-----------------------------------------------------------
Struct RChunksExactMut
pub struct RChunksExactMut<'a, T>where
    T: 'a,{ /* private fields */ }
An iterator over a slice in (non-overlapping) mutable chunks (chunk_size elements at a time), starting at the end of the slice. When the slice len is not evenly divided by the chunk size, the last up to chunk_size-1 elements will be omitted but can be retrieved from the into_remainder function from the iterator. This struct is created by the rchunks_exact_mut method on slices. Example let mut slice = ['l', 'o', 'r', 'e', 'm'];
let iter = slice.rchunks_exact_mut(2); Implementations
sourceimpl<'a, T> RChunksExactMut<'a, T>
1.31.0sourcepub fn into_remainder(self) -> &'a mut [T]
Returns the remainder of the original slice that is not going to be returned by the iterator. The returned slice has at most chunk_size-1 elements. 

Trait Implementations
1.31.0sourceimpl<'a, T> Debug for RChunksExactMut<'a, T>where
    T: Debug + 'a,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.31.0sourceimpl<'a, T> DoubleEndedIterator for RChunksExactMut<'a, T>
sourcefn next_back(&mut self) -> Option<&'a mut [T]>Removes and returns an element from the end of the iterator. Read more
sourcefn nth_back(
    &mut self,
    n: usize,
) -> Option<<RChunksExactMut<'a, T> as Iterator>::Item>Returns the nth element from the end of the iterator. Read more
sourcefn advance_back_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator from the back by n elements. Read more
1.27.0sourcefn try_rfold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> R,
    R: Try<Output = B>,This is the reverse version of Iterator::try_fold(): it takes elements starting from the back of the iterator. Read more
1.27.0sourcefn rfold<B, F>(self, init: B, f: F) -> Bwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> B,An iterator method that reduces the iteratorâ€™s elements to a single, final value, starting from the back. Read more
1.27.0sourcefn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator from the back that satisfies a predicate. Read more

1.31.0sourceimpl<T> ExactSizeIterator for RChunksExactMut<'_, T>
sourcefn is_empty(&self) -> bool
ðŸ”¬This is a nightly-only experimental API. (exact_size_is_empty #35428)
Returns true if the iterator is empty. Read more
1.0.0sourcefn len(&self) -> usizeReturns the exact remaining length of the iterator. Read more

1.31.0sourceimpl<'a, T> Iterator for RChunksExactMut<'a, T>
sourcetype Item = &'a mut [T]The type of the elements being iterated over.
sourcefn next(&mut self) -> Option<&'a mut [T]>Advances the iterator and returns the next value. Read more
sourcefn size_hint(&self) -> (usize, Option<usize>)Returns the bounds on the remaining length of the iterator. Read more
sourcefn count(self) -> usizeConsumes the iterator, counting the number of iterations and returning it. Read more
sourcefn nth(&mut self, n: usize) -> Option<&'a mut [T]>Returns the nth element of the iterator. Read more
sourcefn last(self) -> Option<<RChunksExactMut<'a, T> as Iterator>::Item>Consumes the iterator, returning the last element. Read more
sourcefn next_chunk<const N: usize>(
    &mut self,
) -> Result<[Self::Item; N], IntoIter<Self::Item, N>>where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_next_chunk #98326)
Advances the iterator and returns an array containing the next N values. Read more
sourcefn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator by n elements. Read more
1.28.0sourcefn step_by(self, step: usize) -> StepBy<Self> â“˜where
    Self: Sized,Creates an iterator starting at the same point, but stepping by the given amount at each iteration. Read more
1.0.0sourcefn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator<Item = Self::Item>,Takes two iterators and creates a new iterator over both in sequence. Read more
1.0.0sourcefn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator,â€˜Zips upâ€™ two iterators into a single iterator of pairs. Read more
sourcefn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G> â“˜where
    Self: Sized,
    G: FnMut() -> Self::Item,
ðŸ”¬This is a nightly-only experimental API. (iter_intersperse #79524)
Creates a new iterator which places an item generated by separator between adjacent items of the original iterator. Read more
1.0.0sourcefn map<B, F>(self, f: F) -> Map<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> B,Takes a closure and creates an iterator which calls that closure on each element. Read more
1.21.0sourcefn for_each<F>(self, f: F)where
    Self: Sized,
    F: FnMut(Self::Item),Calls a closure on each element of an iterator. Read more
1.0.0sourcefn filter<P>(self, predicate: P) -> Filter<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator which uses a closure to determine if an element should be yielded. Read more
1.0.0sourcefn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Creates an iterator that both filters and maps. Read more
1.0.0sourcefn enumerate(self) -> Enumerate<Self> â“˜where
    Self: Sized,Creates an iterator which gives the current iteration count as well as the next value. Read more
1.0.0sourcefn peekable(self) -> Peekable<Self> â“˜where
    Self: Sized,Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information. Read more
1.0.0sourcefn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that skips elements based on a predicate. Read more
1.0.0sourcefn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that yields elements based on a predicate. Read more
1.57.0sourcefn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(Self::Item) -> Option<B>,Creates an iterator that both yields elements based on a predicate and maps. Read more
1.0.0sourcefn skip(self, n: usize) -> Skip<Self> â“˜where
    Self: Sized,Creates an iterator that skips the first n elements. Read more
1.0.0sourcefn take(self, n: usize) -> Take<Self> â“˜where
    Self: Sized,Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner. Read more
1.0.0sourcefn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> â“˜where
    Self: Sized,
    F: FnMut(&mut St, Self::Item) -> Option<B>,An iterator adapter which, like fold, holds internal state, but unlike fold, produces a new iterator. Read more
1.0.0sourcefn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F> â“˜where
    Self: Sized,
    U: IntoIterator,
    F: FnMut(Self::Item) -> U,Creates an iterator that works like map, but flattens nested structure. Read more
sourcefn map_windows<F, R, const N: usize>(self, f: F) -> MapWindows<Self, F, N> â“˜where
    Self: Sized,
    F: FnMut(&[Self::Item; N]) -> R,
ðŸ”¬This is a nightly-only experimental API. (iter_map_windows #87155)
Calls the given function f for each contiguous window of size N over self and returns an iterator over the outputs of f. Like slice::windows(), the windows during mapping overlap as well. Read more
1.0.0sourcefn fuse(self) -> Fuse<Self> â“˜where
    Self: Sized,Creates an iterator which ends after the first None. Read more
1.0.0sourcefn inspect<F>(self, f: F) -> Inspect<Self, F> â“˜where
    Self: Sized,
    F: FnMut(&Self::Item),Does something with each element of an iterator, passing the value on. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Borrows an iterator, rather than consuming it. Read more
1.0.0sourcefn collect<B>(self) -> Bwhere
    B: FromIterator<Self::Item>,
    Self: Sized,Transforms an iterator into a collection. Read more
sourcefn collect_into<E>(self, collection: &mut E) -> &mut Ewhere
    E: Extend<Self::Item>,
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_collect_into #94780)
Collects all the items from an iterator into a collection. Read more
1.0.0sourcefn partition<B, F>(self, f: F) -> (B, B)where
    Self: Sized,
    B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool,Consumes an iterator, creating two collections from it. Read more
sourcefn partition_in_place<'a, T, P>(self, predicate: P) -> usizewhere
    T: 'a,
    Self: Sized + DoubleEndedIterator<Item = &'a mut T>,
    P: FnMut(&T) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_partition_in_place #62543)
Reorders the elements of this iterator in-place according to the given predicate, such that all those that return true precede all those that return false. Returns the number of true elements found. Read more
sourcefn is_partitioned<P>(self, predicate: P) -> boolwhere
    Self: Sized,
    P: FnMut(Self::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_is_partitioned #62544)
Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false. Read more
1.27.0sourcefn try_fold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> R,
    R: Try<Output = B>,An iterator method that applies a function as long as it returns successfully, producing a single, final value. Read more
1.27.0sourcefn try_for_each<F, R>(&mut self, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(Self::Item) -> R,
    R: Try<Output = ()>,An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. Read more
1.0.0sourcefn fold<B, F>(self, init: B, f: F) -> Bwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> B,Folds every element into an accumulator by applying an operation, returning the final result. Read more
1.51.0sourcefn reduce<F>(self, f: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(Self::Item, Self::Item) -> Self::Item,Reduces the elements to a single one, by repeatedly applying a reducing operation. Read more
sourcefn try_reduce<R>(
    &mut self,
    f: impl FnMut(Self::Item, Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = Self::Item>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (iterator_try_reduce #87053)
Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. Read more
1.0.0sourcefn all<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if every element of the iterator matches a predicate. Read more
1.0.0sourcefn any<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if any element of the iterator matches a predicate. Read more
1.0.0sourcefn find<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator that satisfies a predicate. Read more
1.30.0sourcefn find_map<B, F>(&mut self, f: F) -> Option<B>where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Applies function to the elements of iterator and returns the first non-none result. Read more
sourcefn try_find<R>(
    &mut self,
    f: impl FnMut(&Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = bool>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (try_find #63178)
Applies function to the elements of iterator and returns the first true result or the first error. Read more
1.0.0sourcefn position<P>(&mut self, predicate: P) -> Option<usize>where
    Self: Sized,
    P: FnMut(Self::Item) -> bool,Searches for an element in an iterator, returning its index. Read more
1.0.0sourcefn rposition<P>(&mut self, predicate: P) -> Option<usize>where
    P: FnMut(Self::Item) -> bool,
    Self: Sized + ExactSizeIterator + DoubleEndedIterator,Searches for an element in an iterator from the right, returning its index. Read more
1.6.0sourcefn max_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the maximum value from the specified function. Read more
1.15.0sourcefn max_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the maximum value with respect to the specified comparison function. Read more
1.6.0sourcefn min_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the minimum value from the specified function. Read more
1.15.0sourcefn min_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the minimum value with respect to the specified comparison function. Read more
1.0.0sourcefn rev(self) -> Rev<Self> â“˜where
    Self: Sized + DoubleEndedIterator,Reverses an iteratorâ€™s direction. Read more
1.0.0sourcefn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)where
    FromA: Default + Extend<A>,
    FromB: Default + Extend<B>,
    Self: Sized + Iterator<Item = (A, B)>,Converts an iterator of pairs into a pair of containers. Read more
1.36.0sourcefn copied<'a, T>(self) -> Copied<Self> â“˜where
    T: 'a + Copy,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which copies all of its elements. Read more
1.0.0sourcefn cloned<'a, T>(self) -> Cloned<Self> â“˜where
    T: 'a + Clone,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which clones all of its elements. Read more
sourcefn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N> â“˜where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_array_chunks #100450)
Returns an iterator over N elements of the iterator at a time. Read more
1.11.0sourcefn sum<S>(self) -> Swhere
    Self: Sized,
    S: Sum<Self::Item>,Sums the elements of an iterator. Read more
1.11.0sourcefn product<P>(self) -> Pwhere
    Self: Sized,
    P: Product<Self::Item>,Iterates over the entire iterator, multiplying all the elements Read more
sourcefn cmp_by<I, F>(self, other: I, cmp: F) -> Orderingwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn partial_cmp<I>(self, other: I) -> Option<Ordering>where
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,
Lexicographically compares the PartialOrd elements of this Iterator with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. Read more
sourcefn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering>where
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Option<Ordering>,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn eq<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are equal to those of another. Read more
sourcefn eq_by<I, F>(self, other: I, eq: F) -> boolwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function. Read more
1.5.0sourcefn ne<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are not equal to those of another. Read more
1.5.0sourcefn lt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less than those of another. Read more
1.5.0sourcefn le<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less or equal to those of another. Read more
1.5.0sourcefn gt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than those of another. Read more
1.5.0sourcefn ge<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than or equal to those of another. Read more
1.82.0sourcefn is_sorted_by<F>(self, compare: F) -> boolwhere
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> bool,Checks if the elements of this iterator are sorted using the given comparator function. Read more
1.82.0sourcefn is_sorted_by_key<F, K>(self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> K,
    K: PartialOrd,Checks if the elements of this iterator are sorted using the given key extraction function. Read more

1.31.0sourceimpl<T> FusedIterator for RChunksExactMut<'_, T>1.31.0sourceimpl<T> Send for RChunksExactMut<'_, T>where
    T: Send,1.31.0sourceimpl<T> Sync for RChunksExactMut<'_, T>where
    T: Sync,sourceimpl<T> TrustedLen for RChunksExactMut<'_, T>
Auto Trait Implementations
impl<'a, T> Freeze for RChunksExactMut<'a, T>impl<'a, T> RefUnwindSafe for RChunksExactMut<'a, T>where
    T: RefUnwindSafe,impl<'a, T> Unpin for RChunksExactMut<'a, T>impl<'a, T> !UnwindSafe for RChunksExactMut<'a, T>
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<I> IntoIterator for Iwhere
    I: Iterator,
sourcetype Item = <I as Iterator>::ItemThe type of the elements being iterated over.
sourcetype IntoIter = IWhich kind of iterator are we turning this into?
sourcefn into_iter(self) -> ICreates an iterator from a value. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/slice/struct.RChunksExactMut.html


std/keyword.unsafe
-----------------------------------------------------------
Keyword unsafe
Code or interfaces whose memory safety cannot be verified by the type system. The unsafe keyword has two uses:  to declare the existence of contracts the compiler canâ€™t check (unsafe fn and unsafe trait), and to declare that a programmer has checked that these contracts have been upheld (unsafe {} and unsafe impl, but also unsafe fn â€“ see below).  They are not mutually exclusive, as can be seen in unsafe fn: the body of an unsafe fn is, by default, treated like an unsafe block. The unsafe_op_in_unsafe_fn lint can be enabled to change that. Unsafe abilities No matter what, Safe Rust canâ€™t cause Undefined Behavior. This is referred to as soundness: a well-typed program actually has the desired properties. The Nomicon has a more detailed explanation on the subject. To ensure soundness, Safe Rust is restricted enough that it can be automatically checked. Sometimes, however, it is necessary to write code that is correct for reasons which are too clever for the compiler to understand. In those cases, you need to use Unsafe Rust. Here are the abilities Unsafe Rust has in addition to Safe Rust:  Dereference raw pointers
 Implement unsafe traits Call unsafe functions Mutate statics (including external ones) Access fields of unions  However, this extra power comes with extra responsibilities: it is now up to you to ensure soundness. The unsafe keyword helps by clearly marking the pieces of code that need to worry about this. The different meanings of unsafe
 Not all uses of unsafe are equivalent: some are here to mark the existence of a contract the programmer must check, others are to say â€œI have checked the contract, go ahead and do thisâ€. The following discussion on Rust Internals has more in-depth explanations about this but here is a summary of the main points:  
unsafe fn: calling this function means abiding by a contract the compiler cannot enforce. 
unsafe trait: implementing the trait means abiding by a contract the compiler cannot enforce. 
unsafe {}: the contract necessary to call the operations inside the block has been checked by the programmer and is guaranteed to be respected. 
unsafe impl: the contract necessary to implement the trait has been checked by the programmer and is guaranteed to be respected.  By default, unsafe fn also acts like an unsafe {} block around the code inside the function. This means it is not just a signal to the caller, but also promises that the preconditions for the operations inside the function are upheld. Mixing these two meanings can be confusing, so the unsafe_op_in_unsafe_fn lint can be enabled to warn against that and require explicit unsafe blocks even inside unsafe fn. See the Rustonomicon and the Reference for more information. Examples
Marking elements as unsafe
 unsafe can be used on functions. Note that functions and statics declared in extern blocks are implicitly marked as unsafe (but not functions declared as extern "something" fn ...). Mutable statics are always unsafe, wherever they are declared. Methods can also be declared as unsafe: static mut FOO: &str = "hello";
unsafe fn unsafe_fn() {}
extern "C" {
    fn unsafe_extern_fn();
    static BAR: *mut u32;
}
trait SafeTraitWithUnsafeMethod {
    unsafe fn unsafe_method(&self);
}
struct S;
impl S {
    unsafe fn unsafe_method_on_struct() {}
} Traits can also be declared as unsafe: unsafe trait UnsafeTrait {} Since unsafe fn and unsafe trait indicate that there is a safety contract that the compiler cannot enforce, documenting it is important. The standard library has many examples of this, like the following which is an extract from Vec::set_len. The # Safety section explains the contract that must be fulfilled to safely call the function. â“˜/// Forces the length of the vector to `new_len`.
///
/// This is a low-level operation that maintains none of the normal
/// invariants of the type. Normally changing the length of a vector
/// is done using one of the safe operations instead, such as
/// `truncate`, `resize`, `extend`, or `clear`.
///
/// # Safety
///
/// - `new_len` must be less than or equal to `capacity()`.
/// - The elements at `old_len..new_len` must be initialized.
pub unsafe fn set_len(&mut self, new_len: usize)
 Using unsafe {} blocks and impls Performing unsafe operations requires an unsafe {} block: #![deny(unsafe_op_in_unsafe_fn)]
/// Dereference the given pointer.
///
/// # Safety
///
/// `ptr` must be aligned and must not be dangling.
unsafe fn deref_unchecked(ptr: *const i32) -> i32 {
    // SAFETY: the caller is required to ensure that `ptr` is aligned and dereferenceable.
    unsafe { *ptr }
}
let a = 3;
let b = &a as *const _;
// SAFETY: `a` has not been dropped and references are always aligned,
// so `b` is a valid address.
unsafe { assert_eq!(*b, deref_unchecked(b)); }; 
unsafe and traits The interactions of unsafe and traits can be surprising, so let us contrast the two combinations of safe fn in unsafe trait and unsafe fn in safe trait using two examples: /// # Safety
///
/// `make_even` must return an even number.
unsafe trait MakeEven {
    fn make_even(&self) -> i32;
}
// SAFETY: Our `make_even` always returns something even.
unsafe impl MakeEven for i32 {
    fn make_even(&self) -> i32 {
        self << 1
    }
}
fn use_make_even(x: impl MakeEven) {
    if x.make_even() % 2 == 1 {
        // SAFETY: this can never happen, because all `MakeEven` implementations
        // ensure that `make_even` returns something even.
        unsafe { std::hint::unreachable_unchecked() };
    }
} Note how the safety contract of the trait is upheld by the implementation, and is itself used to uphold the safety contract of the unsafe function unreachable_unchecked called by use_make_even. make_even itself is a safe function because its callers do not have to worry about any contract, only the implementation of MakeEven is required to uphold a certain contract. use_make_even is safe because it can use the promise made by MakeEven implementations to uphold the safety contract of the unsafe fn unreachable_unchecked it calls. It is also possible to have unsafe fn in a regular safe trait: #![deny(unsafe_op_in_unsafe_fn)]
trait Indexable {
    const LEN: usize;
    /// # Safety
    ///
    /// The caller must ensure that `idx < LEN`.
    unsafe fn idx_unchecked(&self, idx: usize) -> i32;
}
// The implementation for `i32` doesn't need to do any contract reasoning.
impl Indexable for i32 {
    const LEN: usize = 1;
    unsafe fn idx_unchecked(&self, idx: usize) -> i32 {
        debug_assert_eq!(idx, 0);
        *self
    }
}
// The implementation for arrays exploits the function contract to
// make use of `get_unchecked` on slices and avoid a run-time check.
impl Indexable for [i32; 42] {
    const LEN: usize = 42;
    unsafe fn idx_unchecked(&self, idx: usize) -> i32 {
        // SAFETY: As per this trait's documentation, the caller ensures
        // that `idx < 42`.
        unsafe { *self.get_unchecked(idx) }
    }
}
// The implementation for the never type declares a length of 0,
// which means `idx_unchecked` can never be called.
impl Indexable for ! {
    const LEN: usize = 0;
    unsafe fn idx_unchecked(&self, idx: usize) -> i32 {
        // SAFETY: As per this trait's documentation, the caller ensures
        // that `idx < 0`, which is impossible, so this is dead code.
        unsafe { std::hint::unreachable_unchecked() }
    }
}
fn use_indexable<I: Indexable>(x: I, idx: usize) -> i32 {
    if idx < I::LEN {
        // SAFETY: We have checked that `idx < I::LEN`.
        unsafe { x.idx_unchecked(idx) }
    } else {
        panic!("index out-of-bounds")
    }
} This time, use_indexable is safe because it uses a run-time check to discharge the safety contract of idx_unchecked. Implementing Indexable is safe because when writing idx_unchecked, we donâ€™t have to worry: our callers need to discharge a proof obligation (like use_indexable does), but the implementation of get_unchecked has no proof obligation to contend with. Of course, the implementation of Indexable may choose to call other unsafe operations, and then it needs an unsafe block to indicate it discharged the proof obligations of its callees. (We enabled unsafe_op_in_unsafe_fn, so the body of idx_unchecked is not implicitly an unsafe block.) For that purpose it can make use of the contract that all its callers must uphold â€“ the fact that idx < LEN. Formally speaking, an unsafe fn in a trait is a function with preconditions that go beyond those encoded by the argument types (such as idx < LEN), whereas an unsafe trait can declare that some of its functions have postconditions that go beyond those encoded in the return type (such as returning an even integer). If a trait needs a function with both extra precondition and extra postcondition, then it needs an unsafe fn in an unsafe trait.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/keyword.unsafe.html


std/intrinsics/mir/fn.unwindcontinue
-----------------------------------------------------------
Function UnwindContinue
pub fn UnwindContinue() -> UnwindActionArg
ðŸ”¬This is a nightly-only experimental API. (custom_mir)
An unwind action that continues unwinding.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/mir/fn.UnwindContinue.html


reference/lexical-structure
-----------------------------------------------------------
Lexical structure
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/reference/lexical-structure.html


std/simd/type.u32x1
-----------------------------------------------------------
Type Alias u32x1
pub type u32x1 = Simd<u32, 1>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with one element of type u32. Aliased Type
struct u32x1(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/type.u32x1.html


std/os/unix/net/struct.messages
-----------------------------------------------------------
Struct Messages
pub struct Messages<'a> { /* private fields */ }
ðŸ”¬This is a nightly-only experimental API. (unix_socket_ancillary_data #76915)
Available on (Android or Linux) and Unix only.This struct is used to iterate through the control messages. Trait Implementations
sourceimpl<'a> Iterator for Messages<'a>
sourcetype Item = Result<AncillaryData<'a>, AncillaryError>The type of the elements being iterated over.
sourcefn next(&mut self) -> Option<Self::Item>Advances the iterator and returns the next value. Read more
sourcefn next_chunk<const N: usize>(
    &mut self,
) -> Result<[Self::Item; N], IntoIter<Self::Item, N>>where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_next_chunk #98326)
Advances the iterator and returns an array containing the next N values. Read more
1.0.0sourcefn size_hint(&self) -> (usize, Option<usize>)Returns the bounds on the remaining length of the iterator. Read more
1.0.0sourcefn count(self) -> usizewhere
    Self: Sized,Consumes the iterator, counting the number of iterations and returning it. Read more
1.0.0sourcefn last(self) -> Option<Self::Item>where
    Self: Sized,Consumes the iterator, returning the last element. Read more
sourcefn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator by n elements. Read more
1.0.0sourcefn nth(&mut self, n: usize) -> Option<Self::Item>Returns the nth element of the iterator. Read more
1.28.0sourcefn step_by(self, step: usize) -> StepBy<Self> â“˜where
    Self: Sized,Creates an iterator starting at the same point, but stepping by the given amount at each iteration. Read more
1.0.0sourcefn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator<Item = Self::Item>,Takes two iterators and creates a new iterator over both in sequence. Read more
1.0.0sourcefn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator,â€˜Zips upâ€™ two iterators into a single iterator of pairs. Read more
sourcefn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G> â“˜where
    Self: Sized,
    G: FnMut() -> Self::Item,
ðŸ”¬This is a nightly-only experimental API. (iter_intersperse #79524)
Creates a new iterator which places an item generated by separator between adjacent items of the original iterator. Read more
1.0.0sourcefn map<B, F>(self, f: F) -> Map<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> B,Takes a closure and creates an iterator which calls that closure on each element. Read more
1.21.0sourcefn for_each<F>(self, f: F)where
    Self: Sized,
    F: FnMut(Self::Item),Calls a closure on each element of an iterator. Read more
1.0.0sourcefn filter<P>(self, predicate: P) -> Filter<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator which uses a closure to determine if an element should be yielded. Read more
1.0.0sourcefn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Creates an iterator that both filters and maps. Read more
1.0.0sourcefn enumerate(self) -> Enumerate<Self> â“˜where
    Self: Sized,Creates an iterator which gives the current iteration count as well as the next value. Read more
1.0.0sourcefn peekable(self) -> Peekable<Self> â“˜where
    Self: Sized,Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information. Read more
1.0.0sourcefn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that skips elements based on a predicate. Read more
1.0.0sourcefn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that yields elements based on a predicate. Read more
1.57.0sourcefn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(Self::Item) -> Option<B>,Creates an iterator that both yields elements based on a predicate and maps. Read more
1.0.0sourcefn skip(self, n: usize) -> Skip<Self> â“˜where
    Self: Sized,Creates an iterator that skips the first n elements. Read more
1.0.0sourcefn take(self, n: usize) -> Take<Self> â“˜where
    Self: Sized,Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner. Read more
1.0.0sourcefn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> â“˜where
    Self: Sized,
    F: FnMut(&mut St, Self::Item) -> Option<B>,An iterator adapter which, like fold, holds internal state, but unlike fold, produces a new iterator. Read more
1.0.0sourcefn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F> â“˜where
    Self: Sized,
    U: IntoIterator,
    F: FnMut(Self::Item) -> U,Creates an iterator that works like map, but flattens nested structure. Read more
sourcefn map_windows<F, R, const N: usize>(self, f: F) -> MapWindows<Self, F, N> â“˜where
    Self: Sized,
    F: FnMut(&[Self::Item; N]) -> R,
ðŸ”¬This is a nightly-only experimental API. (iter_map_windows #87155)
Calls the given function f for each contiguous window of size N over self and returns an iterator over the outputs of f. Like slice::windows(), the windows during mapping overlap as well. Read more
1.0.0sourcefn fuse(self) -> Fuse<Self> â“˜where
    Self: Sized,Creates an iterator which ends after the first None. Read more
1.0.0sourcefn inspect<F>(self, f: F) -> Inspect<Self, F> â“˜where
    Self: Sized,
    F: FnMut(&Self::Item),Does something with each element of an iterator, passing the value on. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Borrows an iterator, rather than consuming it. Read more
1.0.0sourcefn collect<B>(self) -> Bwhere
    B: FromIterator<Self::Item>,
    Self: Sized,Transforms an iterator into a collection. Read more
sourcefn collect_into<E>(self, collection: &mut E) -> &mut Ewhere
    E: Extend<Self::Item>,
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_collect_into #94780)
Collects all the items from an iterator into a collection. Read more
1.0.0sourcefn partition<B, F>(self, f: F) -> (B, B)where
    Self: Sized,
    B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool,Consumes an iterator, creating two collections from it. Read more
sourcefn is_partitioned<P>(self, predicate: P) -> boolwhere
    Self: Sized,
    P: FnMut(Self::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_is_partitioned #62544)
Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false. Read more
1.27.0sourcefn try_fold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> R,
    R: Try<Output = B>,An iterator method that applies a function as long as it returns successfully, producing a single, final value. Read more
1.27.0sourcefn try_for_each<F, R>(&mut self, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(Self::Item) -> R,
    R: Try<Output = ()>,An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. Read more
1.0.0sourcefn fold<B, F>(self, init: B, f: F) -> Bwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> B,Folds every element into an accumulator by applying an operation, returning the final result. Read more
1.51.0sourcefn reduce<F>(self, f: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(Self::Item, Self::Item) -> Self::Item,Reduces the elements to a single one, by repeatedly applying a reducing operation. Read more
sourcefn try_reduce<R>(
    &mut self,
    f: impl FnMut(Self::Item, Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = Self::Item>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (iterator_try_reduce #87053)
Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. Read more
1.0.0sourcefn all<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if every element of the iterator matches a predicate. Read more
1.0.0sourcefn any<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if any element of the iterator matches a predicate. Read more
1.0.0sourcefn find<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator that satisfies a predicate. Read more
1.30.0sourcefn find_map<B, F>(&mut self, f: F) -> Option<B>where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Applies function to the elements of iterator and returns the first non-none result. Read more
sourcefn try_find<R>(
    &mut self,
    f: impl FnMut(&Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = bool>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (try_find #63178)
Applies function to the elements of iterator and returns the first true result or the first error. Read more
1.0.0sourcefn position<P>(&mut self, predicate: P) -> Option<usize>where
    Self: Sized,
    P: FnMut(Self::Item) -> bool,Searches for an element in an iterator, returning its index. Read more
1.6.0sourcefn max_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the maximum value from the specified function. Read more
1.15.0sourcefn max_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the maximum value with respect to the specified comparison function. Read more
1.6.0sourcefn min_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the minimum value from the specified function. Read more
1.15.0sourcefn min_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the minimum value with respect to the specified comparison function. Read more
1.0.0sourcefn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)where
    FromA: Default + Extend<A>,
    FromB: Default + Extend<B>,
    Self: Sized + Iterator<Item = (A, B)>,Converts an iterator of pairs into a pair of containers. Read more
1.36.0sourcefn copied<'a, T>(self) -> Copied<Self> â“˜where
    T: 'a + Copy,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which copies all of its elements. Read more
1.0.0sourcefn cloned<'a, T>(self) -> Cloned<Self> â“˜where
    T: 'a + Clone,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which clones all of its elements. Read more
sourcefn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N> â“˜where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_array_chunks #100450)
Returns an iterator over N elements of the iterator at a time. Read more
1.11.0sourcefn sum<S>(self) -> Swhere
    Self: Sized,
    S: Sum<Self::Item>,Sums the elements of an iterator. Read more
1.11.0sourcefn product<P>(self) -> Pwhere
    Self: Sized,
    P: Product<Self::Item>,Iterates over the entire iterator, multiplying all the elements Read more
sourcefn cmp_by<I, F>(self, other: I, cmp: F) -> Orderingwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn partial_cmp<I>(self, other: I) -> Option<Ordering>where
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,
Lexicographically compares the PartialOrd elements of this Iterator with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. Read more
sourcefn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering>where
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Option<Ordering>,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn eq<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are equal to those of another. Read more
sourcefn eq_by<I, F>(self, other: I, eq: F) -> boolwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function. Read more
1.5.0sourcefn ne<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are not equal to those of another. Read more
1.5.0sourcefn lt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less than those of another. Read more
1.5.0sourcefn le<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less or equal to those of another. Read more
1.5.0sourcefn gt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than those of another. Read more
1.5.0sourcefn ge<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than or equal to those of another. Read more
1.82.0sourcefn is_sorted_by<F>(self, compare: F) -> boolwhere
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> bool,Checks if the elements of this iterator are sorted using the given comparator function. Read more
1.82.0sourcefn is_sorted_by_key<F, K>(self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> K,
    K: PartialOrd,Checks if the elements of this iterator are sorted using the given key extraction function. Read more

Auto Trait Implementations
impl<'a> Freeze for Messages<'a>impl<'a> RefUnwindSafe for Messages<'a>impl<'a> Send for Messages<'a>impl<'a> Sync for Messages<'a>impl<'a> Unpin for Messages<'a>impl<'a> UnwindSafe for Messages<'a>
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<I> IntoIterator for Iwhere
    I: Iterator,
sourcetype Item = <I as Iterator>::ItemThe type of the elements being iterated over.
sourcetype IntoIter = IWhich kind of iterator are we turning this into?
sourcefn into_iter(self) -> ICreates an iterator from a value. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/os/unix/net/struct.Messages.html


std/simd/struct.mask
-----------------------------------------------------------
Struct Mask
pub struct Mask<T, const N: usize>(/* private fields */)
where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector mask for N elements of width specified by Element. Masks represent boolean inclusion/exclusion on a per-element basis. The layout of this type is unspecified, and may change between platforms and/or Rust versions, and code should not assume that it is equivalent to [T; N]. Implementations
sourceimpl<T, const N: usize> Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcepub fn splat(value: bool) -> Mask<T, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Constructs a mask by setting all elements to the given value. 
sourcepub fn from_array(array: [bool; N]) -> Mask<T, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Converts an array of bools to a SIMD mask. 
sourcepub fn to_array(self) -> [bool; N]
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Converts a SIMD mask to an array of bools. 
sourcepub unsafe fn from_int_unchecked(value: Simd<T, N>) -> Mask<T, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Converts a vector of integers to a mask, where 0 represents false and -1 represents true. Safety All elements must be either 0 or -1. 
sourcepub fn from_int(value: Simd<T, N>) -> Mask<T, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Converts a vector of integers to a mask, where 0 represents false and -1 represents true. Panics Panics if any element is not 0 or -1. 
sourcepub fn to_int(self) -> Simd<T, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Converts the mask to a vector of integers, where 0 represents false and -1 represents true. 
sourcepub fn cast<U>(self) -> Mask<U, N>where
    U: MaskElement,
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Converts the mask to a mask of any other element size. 
sourcepub unsafe fn test_unchecked(&self, index: usize) -> bool
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Tests the value of the specified element. Safety index must be less than self.len(). 
sourcepub fn test(&self, index: usize) -> bool
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Tests the value of the specified element. Panics Panics if index is greater than or equal to the number of elements in the vector. 
sourcepub unsafe fn set_unchecked(&mut self, index: usize, value: bool)
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Sets the value of the specified element. Safety index must be less than self.len(). 
sourcepub fn set(&mut self, index: usize, value: bool)
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Sets the value of the specified element. Panics Panics if index is greater than or equal to the number of elements in the vector. 
sourcepub fn any(self) -> bool
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns true if any element is set, or false otherwise. 
sourcepub fn all(self) -> bool
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns true if all elements are set, or false otherwise. 
sourcepub fn to_bitmask(self) -> u64
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Creates a bitmask from a mask. Each bit is set if the corresponding element in the mask is true. If the mask contains more than 64 elements, the bitmask is truncated to the first 64. 
sourcepub fn from_bitmask(bitmask: u64) -> Mask<T, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Creates a mask from a bitmask. For each bit, if it is set, the corresponding element in the mask is set to true. If the mask contains more than 64 elements, the remainder are set to false. 
sourcepub fn to_bitmask_vector(self) -> Simd<u8, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Creates a bitmask vector from a mask. Each bit is set if the corresponding element in the mask is true. The remaining bits are unset. The bits are packed into the first N bits of the vector: let mask = mask32x8::from_array([true, false, true, false, false, false, true, false]);
assert_eq!(mask.to_bitmask_vector()[0], 0b01000101); 
sourcepub fn from_bitmask_vector(bitmask: Simd<u8, N>) -> Mask<T, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Creates a mask from a bitmask vector. For each bit, if it is set, the corresponding element in the mask is set to true. The bits are packed into the first N bits of the vector: let bitmask = u8x8::from_array([0b01000101, 0, 0, 0, 0, 0, 0, 0]);
assert_eq!(
    mask32x8::from_bitmask_vector(bitmask),
    mask32x8::from_array([true, false, true, false, false, false, true, false]),
); 
sourcepub fn first_set(self) -> Option<usize>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Finds the index of the first set element. assert_eq!(mask32x8::splat(false).first_set(), None);
assert_eq!(mask32x8::splat(true).first_set(), Some(0));
let mask = mask32x8::from_array([false, true, false, false, true, false, false, true]);
assert_eq!(mask.first_set(), Some(1)); 
sourceimpl<T, const N: usize> Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcepub fn select<U>(
    self,
    true_values: Simd<U, N>,
    false_values: Simd<U, N>,
) -> Simd<U, N>where
    U: SimdElement<Mask = T>,
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Choose elements from two vectors. For each element in the mask, choose the corresponding element from true_values if that element mask is true, and false_values if that element mask is false. Examples let a = Simd::from_array([0, 1, 2, 3]);
let b = Simd::from_array([4, 5, 6, 7]);
let mask = Mask::from_array([true, false, false, true]);
let c = mask.select(a, b);
assert_eq!(c.to_array(), [0, 5, 6, 3]); 
sourcepub fn select_mask(
    self,
    true_values: Mask<T, N>,
    false_values: Mask<T, N>,
) -> Mask<T, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Choose elements from two masks. For each element in the mask, choose the corresponding element from true_values if that element mask is true, and false_values if that element mask is false. Examples let a = Mask::<i32, 4>::from_array([true, true, false, false]);
let b = Mask::<i32, 4>::from_array([false, false, true, true]);
let mask = Mask::<i32, 4>::from_array([true, false, false, true]);
let c = mask.select_mask(a, b);
assert_eq!(c.to_array(), [true, false, true, false]); 

Trait Implementations
sourceimpl<T, const N: usize> BitAnd<Mask<T, N>> for boolwhere
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcetype Output = Mask<T, N>The resulting type after applying the & operator.
sourcefn bitand(self, rhs: Mask<T, N>) -> Mask<T, N>Performs the & operation. Read more

sourceimpl<T, const N: usize> BitAnd<bool> for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcetype Output = Mask<T, N>The resulting type after applying the & operator.
sourcefn bitand(self, rhs: bool) -> Mask<T, N>Performs the & operation. Read more

sourceimpl<T, const N: usize> BitAnd for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcetype Output = Mask<T, N>The resulting type after applying the & operator.
sourcefn bitand(self, rhs: Mask<T, N>) -> Mask<T, N>Performs the & operation. Read more

sourceimpl<T, const N: usize> BitAndAssign<bool> for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcefn bitand_assign(&mut self, rhs: bool)Performs the &= operation. Read more

sourceimpl<T, const N: usize> BitAndAssign for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcefn bitand_assign(&mut self, rhs: Mask<T, N>)Performs the &= operation. Read more

sourceimpl<T, const N: usize> BitOr<Mask<T, N>> for boolwhere
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcetype Output = Mask<T, N>The resulting type after applying the | operator.
sourcefn bitor(self, rhs: Mask<T, N>) -> Mask<T, N>Performs the | operation. Read more

sourceimpl<T, const N: usize> BitOr<bool> for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcetype Output = Mask<T, N>The resulting type after applying the | operator.
sourcefn bitor(self, rhs: bool) -> Mask<T, N>Performs the | operation. Read more

sourceimpl<T, const N: usize> BitOr for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcetype Output = Mask<T, N>The resulting type after applying the | operator.
sourcefn bitor(self, rhs: Mask<T, N>) -> Mask<T, N>Performs the | operation. Read more

sourceimpl<T, const N: usize> BitOrAssign<bool> for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcefn bitor_assign(&mut self, rhs: bool)Performs the |= operation. Read more

sourceimpl<T, const N: usize> BitOrAssign for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcefn bitor_assign(&mut self, rhs: Mask<T, N>)Performs the |= operation. Read more

sourceimpl<T, const N: usize> BitXor<Mask<T, N>> for boolwhere
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcetype Output = Mask<T, N>The resulting type after applying the ^ operator.
sourcefn bitxor(self, rhs: Mask<T, N>) -> <bool as BitXor<Mask<T, N>>>::OutputPerforms the ^ operation. Read more

sourceimpl<T, const N: usize> BitXor<bool> for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcetype Output = Mask<T, N>The resulting type after applying the ^ operator.
sourcefn bitxor(self, rhs: bool) -> <Mask<T, N> as BitXor<bool>>::OutputPerforms the ^ operation. Read more

sourceimpl<T, const N: usize> BitXor for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcetype Output = Mask<T, N>The resulting type after applying the ^ operator.
sourcefn bitxor(self, rhs: Mask<T, N>) -> <Mask<T, N> as BitXor>::OutputPerforms the ^ operation. Read more

sourceimpl<T, const N: usize> BitXorAssign<bool> for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcefn bitxor_assign(&mut self, rhs: bool)Performs the ^= operation. Read more

sourceimpl<T, const N: usize> BitXorAssign for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcefn bitxor_assign(&mut self, rhs: Mask<T, N>)Performs the ^= operation. Read more

sourceimpl<T, const N: usize> Clone for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcefn clone(&self) -> Mask<T, N>Returns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

sourceimpl<T, const N: usize> Debug for Mask<T, N>where
    T: MaskElement + Debug,
    LaneCount<N>: SupportedLaneCount,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

sourceimpl<T, const N: usize> Default for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcefn default() -> Mask<T, N>Returns the â€œdefault valueâ€ for a type. Read more

sourceimpl<T, const N: usize> From<[bool; N]> for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcefn from(array: [bool; N]) -> Mask<T, N>Converts to this type from the input type.
sourceimpl<T, const N: usize> From<Mask<T, N>> for [bool; N]where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcefn from(vector: Mask<T, N>) -> [bool; N]Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<i16, N>> for Mask<i32, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<i16, N>) -> Mask<i32, N>Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<i16, N>> for Mask<i64, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<i16, N>) -> Mask<i64, N>Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<i16, N>> for Mask<i8, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<i16, N>) -> Mask<i8, N>Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<i16, N>> for Mask<isize, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<i16, N>) -> Mask<isize, N>Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<i32, N>> for Mask<i16, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<i32, N>) -> Mask<i16, N>Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<i32, N>> for Mask<i64, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<i32, N>) -> Mask<i64, N>Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<i32, N>> for Mask<i8, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<i32, N>) -> Mask<i8, N>Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<i32, N>> for Mask<isize, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<i32, N>) -> Mask<isize, N>Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<i64, N>> for Mask<i16, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<i64, N>) -> Mask<i16, N>Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<i64, N>> for Mask<i32, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<i64, N>) -> Mask<i32, N>Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<i64, N>> for Mask<i8, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<i64, N>) -> Mask<i8, N>Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<i64, N>> for Mask<isize, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<i64, N>) -> Mask<isize, N>Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<i8, N>> for Mask<i16, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<i8, N>) -> Mask<i16, N>Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<i8, N>> for Mask<i32, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<i8, N>) -> Mask<i32, N>Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<i8, N>> for Mask<i64, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<i8, N>) -> Mask<i64, N>Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<i8, N>> for Mask<isize, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<i8, N>) -> Mask<isize, N>Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<isize, N>> for Mask<i16, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<isize, N>) -> Mask<i16, N>Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<isize, N>> for Mask<i32, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<isize, N>) -> Mask<i32, N>Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<isize, N>> for Mask<i64, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<isize, N>) -> Mask<i64, N>Converts to this type from the input type.
sourceimpl<const N: usize> From<Mask<isize, N>> for Mask<i8, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn from(value: Mask<isize, N>) -> Mask<i8, N>Converts to this type from the input type.
sourceimpl<T, const N: usize> Not for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
sourcetype Output = Mask<T, N>The resulting type after applying the ! operator.
sourcefn not(self) -> <Mask<T, N> as Not>::OutputPerforms the unary ! operation. Read more

sourceimpl<T, const N: usize> PartialEq for Mask<T, N>where
    T: MaskElement + PartialEq,
    LaneCount<N>: SupportedLaneCount,
sourcefn eq(&self, other: &Mask<T, N>) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
sourceimpl<T, const N: usize> PartialOrd for Mask<T, N>where
    T: MaskElement + PartialOrd,
    LaneCount<N>: SupportedLaneCount,
sourcefn partial_cmp(&self, other: &Mask<T, N>) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
1.0.0sourcefn lt(&self, other: &Rhs) -> boolTests less than (for self and other) and is used by the < operator. Read more
1.0.0sourcefn le(&self, other: &Rhs) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
1.0.0sourcefn gt(&self, other: &Rhs) -> boolTests greater than (for self and other) and is used by the > operator. Read more
1.0.0sourcefn ge(&self, other: &Rhs) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

sourceimpl<const N: usize> SimdOrd for Mask<i16, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn simd_max(self, other: Mask<i16, N>) -> Mask<i16, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the element-wise maximum with other.
sourcefn simd_min(self, other: Mask<i16, N>) -> Mask<i16, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the element-wise minimum with other.
sourcefn simd_clamp(self, min: Mask<i16, N>, max: Mask<i16, N>) -> Mask<i16, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Restrict each element to a certain interval. Read more

sourceimpl<const N: usize> SimdOrd for Mask<i32, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn simd_max(self, other: Mask<i32, N>) -> Mask<i32, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the element-wise maximum with other.
sourcefn simd_min(self, other: Mask<i32, N>) -> Mask<i32, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the element-wise minimum with other.
sourcefn simd_clamp(self, min: Mask<i32, N>, max: Mask<i32, N>) -> Mask<i32, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Restrict each element to a certain interval. Read more

sourceimpl<const N: usize> SimdOrd for Mask<i64, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn simd_max(self, other: Mask<i64, N>) -> Mask<i64, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the element-wise maximum with other.
sourcefn simd_min(self, other: Mask<i64, N>) -> Mask<i64, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the element-wise minimum with other.
sourcefn simd_clamp(self, min: Mask<i64, N>, max: Mask<i64, N>) -> Mask<i64, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Restrict each element to a certain interval. Read more

sourceimpl<const N: usize> SimdOrd for Mask<i8, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn simd_max(self, other: Mask<i8, N>) -> Mask<i8, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the element-wise maximum with other.
sourcefn simd_min(self, other: Mask<i8, N>) -> Mask<i8, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the element-wise minimum with other.
sourcefn simd_clamp(self, min: Mask<i8, N>, max: Mask<i8, N>) -> Mask<i8, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Restrict each element to a certain interval. Read more

sourceimpl<const N: usize> SimdOrd for Mask<isize, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn simd_max(self, other: Mask<isize, N>) -> Mask<isize, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the element-wise maximum with other.
sourcefn simd_min(self, other: Mask<isize, N>) -> Mask<isize, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Returns the element-wise minimum with other.
sourcefn simd_clamp(self, min: Mask<isize, N>, max: Mask<isize, N>) -> Mask<isize, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Restrict each element to a certain interval. Read more

sourceimpl<const N: usize> SimdPartialEq for Mask<i16, N>where
    LaneCount<N>: SupportedLaneCount,
sourcetype Mask = Mask<i16, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
The mask type returned by each comparison.
sourcefn simd_eq(self, other: Mask<i16, N>) -> <Mask<i16, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is equal to the corresponding element in other.
sourcefn simd_ne(self, other: Mask<i16, N>) -> <Mask<i16, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is equal to the corresponding element in other.
sourceimpl<const N: usize> SimdPartialEq for Mask<i32, N>where
    LaneCount<N>: SupportedLaneCount,
sourcetype Mask = Mask<i32, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
The mask type returned by each comparison.
sourcefn simd_eq(self, other: Mask<i32, N>) -> <Mask<i32, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is equal to the corresponding element in other.
sourcefn simd_ne(self, other: Mask<i32, N>) -> <Mask<i32, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is equal to the corresponding element in other.
sourceimpl<const N: usize> SimdPartialEq for Mask<i64, N>where
    LaneCount<N>: SupportedLaneCount,
sourcetype Mask = Mask<i64, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
The mask type returned by each comparison.
sourcefn simd_eq(self, other: Mask<i64, N>) -> <Mask<i64, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is equal to the corresponding element in other.
sourcefn simd_ne(self, other: Mask<i64, N>) -> <Mask<i64, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is equal to the corresponding element in other.
sourceimpl<const N: usize> SimdPartialEq for Mask<i8, N>where
    LaneCount<N>: SupportedLaneCount,
sourcetype Mask = Mask<i8, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
The mask type returned by each comparison.
sourcefn simd_eq(self, other: Mask<i8, N>) -> <Mask<i8, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is equal to the corresponding element in other.
sourcefn simd_ne(self, other: Mask<i8, N>) -> <Mask<i8, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is equal to the corresponding element in other.
sourceimpl<const N: usize> SimdPartialEq for Mask<isize, N>where
    LaneCount<N>: SupportedLaneCount,
sourcetype Mask = Mask<isize, N>
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
The mask type returned by each comparison.
sourcefn simd_eq(
    self,
    other: Mask<isize, N>,
) -> <Mask<isize, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is equal to the corresponding element in other.
sourcefn simd_ne(
    self,
    other: Mask<isize, N>,
) -> <Mask<isize, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is equal to the corresponding element in other.
sourceimpl<const N: usize> SimdPartialOrd for Mask<i16, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn simd_lt(self, other: Mask<i16, N>) -> <Mask<i16, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is less than the corresponding element in other.
sourcefn simd_le(self, other: Mask<i16, N>) -> <Mask<i16, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is less than or equal to the corresponding element in other.
sourcefn simd_gt(self, other: Mask<i16, N>) -> <Mask<i16, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is greater than the corresponding element in other.
sourcefn simd_ge(self, other: Mask<i16, N>) -> <Mask<i16, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is greater than or equal to the corresponding element in other.
sourceimpl<const N: usize> SimdPartialOrd for Mask<i32, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn simd_lt(self, other: Mask<i32, N>) -> <Mask<i32, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is less than the corresponding element in other.
sourcefn simd_le(self, other: Mask<i32, N>) -> <Mask<i32, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is less than or equal to the corresponding element in other.
sourcefn simd_gt(self, other: Mask<i32, N>) -> <Mask<i32, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is greater than the corresponding element in other.
sourcefn simd_ge(self, other: Mask<i32, N>) -> <Mask<i32, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is greater than or equal to the corresponding element in other.
sourceimpl<const N: usize> SimdPartialOrd for Mask<i64, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn simd_lt(self, other: Mask<i64, N>) -> <Mask<i64, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is less than the corresponding element in other.
sourcefn simd_le(self, other: Mask<i64, N>) -> <Mask<i64, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is less than or equal to the corresponding element in other.
sourcefn simd_gt(self, other: Mask<i64, N>) -> <Mask<i64, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is greater than the corresponding element in other.
sourcefn simd_ge(self, other: Mask<i64, N>) -> <Mask<i64, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is greater than or equal to the corresponding element in other.
sourceimpl<const N: usize> SimdPartialOrd for Mask<i8, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn simd_lt(self, other: Mask<i8, N>) -> <Mask<i8, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is less than the corresponding element in other.
sourcefn simd_le(self, other: Mask<i8, N>) -> <Mask<i8, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is less than or equal to the corresponding element in other.
sourcefn simd_gt(self, other: Mask<i8, N>) -> <Mask<i8, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is greater than the corresponding element in other.
sourcefn simd_ge(self, other: Mask<i8, N>) -> <Mask<i8, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is greater than or equal to the corresponding element in other.
sourceimpl<const N: usize> SimdPartialOrd for Mask<isize, N>where
    LaneCount<N>: SupportedLaneCount,
sourcefn simd_lt(
    self,
    other: Mask<isize, N>,
) -> <Mask<isize, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is less than the corresponding element in other.
sourcefn simd_le(
    self,
    other: Mask<isize, N>,
) -> <Mask<isize, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is less than or equal to the corresponding element in other.
sourcefn simd_gt(
    self,
    other: Mask<isize, N>,
) -> <Mask<isize, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is greater than the corresponding element in other.
sourcefn simd_ge(
    self,
    other: Mask<isize, N>,
) -> <Mask<isize, N> as SimdPartialEq>::Mask
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
Test if each element is greater than or equal to the corresponding element in other.
sourceimpl<T, const N: usize> Copy for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,
Auto Trait Implementations
impl<T, const N: usize> Freeze for Mask<T, N>where
    T: Freeze,impl<T, const N: usize> RefUnwindSafe for Mask<T, N>where
    T: RefUnwindSafe,impl<T, const N: usize> Send for Mask<T, N>where
    T: Send,impl<T, const N: usize> Sync for Mask<T, N>where
    T: Sync,impl<T, const N: usize> Unpin for Mask<T, N>where
    T: Unpin,impl<T, const N: usize> UnwindSafe for Mask<T, N>where
    T: UnwindSafe,
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/struct.Mask.html


std/error/struct.report
-----------------------------------------------------------
Struct Report
pub struct Report<E = Box<dyn Error>> { /* private fields */ }
ðŸ”¬This is a nightly-only experimental API. (error_reporter #90172)
An error reporter that prints an error and its sources. Report also exposes configuration options for formatting the error sources, either entirely on a single line, or in multi-line format with each source on a new line. Report only requires that the wrapped error implement Error. It doesnâ€™t require that the wrapped error be Send, Sync, or 'static. Examples #![feature(error_reporter)]
use std::error::{Error, Report};
use std::fmt;
#[derive(Debug)]
struct SuperError {
    source: SuperErrorSideKick,
}
impl fmt::Display for SuperError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "SuperError is here!")
    }
}
impl Error for SuperError {
    fn source(&self) -> Option<&(dyn Error + 'static)> {
        Some(&self.source)
    }
}
#[derive(Debug)]
struct SuperErrorSideKick;
impl fmt::Display for SuperErrorSideKick {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "SuperErrorSideKick is here!")
    }
}
impl Error for SuperErrorSideKick {}
fn get_super_error() -> Result<(), SuperError> {
    Err(SuperError { source: SuperErrorSideKick })
}
fn main() {
    match get_super_error() {
        Err(e) => println!("Error: {}", Report::new(e)),
        _ => println!("No error"),
    }
} This example produces the following output: Error: SuperError is here!: SuperErrorSideKick is here!
Output consistency Report prints the same output via Display and Debug, so it works well with Result::unwrap/Result::expect which print their Err variant via Debug: â“˜#![feature(error_reporter)]
use std::error::Report;
get_super_error().map_err(Report::new).unwrap();
 This example produces the following output: thread 'main' panicked at src/error.rs:34:40:
called `Result::unwrap()` on an `Err` value: SuperError is here!: SuperErrorSideKick is here!
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
Return from main
 Report also implements From for all types that implement Error; this when combined with the Debug output means Report is an ideal starting place for formatting errors returned from main. â“˜#![feature(error_reporter)]
use std::error::Report;
fn main() -> Result<(), Report<SuperError>> {
    get_super_error()?;
    Ok(())
}
 This example produces the following output: Error: SuperError is here!: SuperErrorSideKick is here! Note: Reports constructed via ? and From will be configured to use the single line output format. If you want to make sure your Reports are pretty printed and include backtrace you will need to manually convert and enable those flags. â“˜#![feature(error_reporter)]
use std::error::Report;
fn main() -> Result<(), Report<SuperError>> {
    get_super_error()
        .map_err(Report::from)
        .map_err(|r| r.pretty(true).show_backtrace(true))?;
    Ok(())
}
 This example produces the following output: Error: SuperError is here!
Caused by:
      SuperErrorSideKick is here!
Implementations
sourceimpl<E> Report<E>where
    Report<E>: From<E>,
sourcepub fn new(error: E) -> Report<E>
ðŸ”¬This is a nightly-only experimental API. (error_reporter #90172)
Creates a new Report from an input error. 
sourceimpl<E> Report<E>
sourcepub fn pretty(self, pretty: bool) -> Self
ðŸ”¬This is a nightly-only experimental API. (error_reporter #90172)
Enable pretty-printing the report across multiple lines. Examples #![feature(error_reporter)]
use std::error::Report;
let error = SuperError { source: SuperErrorSideKick };
let report = Report::new(error).pretty(true);
eprintln!("Error: {report:?}"); This example produces the following output: Error: SuperError is here!
Caused by:
      SuperErrorSideKick is here! When there are multiple source errors the causes will be numbered in order of iteration starting from the outermost error. #![feature(error_reporter)]
use std::error::Report;
let source = SuperErrorSideKickSideKick;
let source = SuperErrorSideKick { source };
let error = SuperError { source };
let report = Report::new(error).pretty(true);
eprintln!("Error: {report:?}"); This example produces the following output: Error: SuperError is here!
Caused by:
   0: SuperErrorSideKick is here!
   1: SuperErrorSideKickSideKick is here!
sourcepub fn show_backtrace(self, show_backtrace: bool) -> Self
ðŸ”¬This is a nightly-only experimental API. (error_reporter #90172)
Display backtrace if available when using pretty output format. Examples Note: Report will search for the first Backtrace it can find starting from the outermost error. In this example it will display the backtrace from the second error in the sources, SuperErrorSideKick. #![feature(error_reporter)]
#![feature(error_generic_member_access)]
use std::error::Request;
use std::error::Report;
use std::backtrace::Backtrace;
#[derive(Debug)]
struct SuperErrorSideKick {
    backtrace: Backtrace,
}
impl SuperErrorSideKick {
    fn new() -> SuperErrorSideKick {
        SuperErrorSideKick { backtrace: Backtrace::force_capture() }
    }
}
impl Error for SuperErrorSideKick {
    fn provide<'a>(&'a self, request: &mut Request<'a>) {
        request.provide_ref::<Backtrace>(&self.backtrace);
    }
}
// The rest of the example is unchanged ...
let source = SuperErrorSideKick::new();
let error = SuperError { source };
let report = Report::new(error).pretty(true).show_backtrace(true);
eprintln!("Error: {report:?}"); This example produces something similar to the following output: Error: SuperError is here!
Caused by:
      SuperErrorSideKick is here!
Stack backtrace:
   0: rust_out::main::_doctest_main_src_error_rs_1158_0::SuperErrorSideKick::new
   1: rust_out::main::_doctest_main_src_error_rs_1158_0
   2: rust_out::main
   3: core::ops::function::FnOnce::call_once
   4: std::sys::backtrace::__rust_begin_short_backtrace
   5: std::rt::lang_start::{{closure}}
   6: std::panicking::try
   7: std::rt::lang_start_internal
   8: std::rt::lang_start
   9: main
  10: __libc_start_main
  11: _start

Trait Implementations
sourceimpl<E> Debug for Report<E>where
    Report<E>: Display,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

sourceimpl<E> Display for Report<E>where
    E: Error,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

sourceimpl<E> From<E> for Report<E>where
    E: Error,
sourcefn from(error: E) -> SelfConverts to this type from the input type.

Auto Trait Implementations
impl<E> Freeze for Report<E>where
    E: Freeze,impl<E> RefUnwindSafe for Report<E>where
    E: RefUnwindSafe,impl<E> Send for Report<E>where
    E: Send,impl<E> Sync for Report<E>where
    E: Sync,impl<E> Unpin for Report<E>where
    E: Unpin,impl<E> UnwindSafe for Report<E>where
    E: UnwindSafe,
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<!> for T
sourcefn from(t: !) -> TConverts to this type from the input type.
sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToString for Twhere
    T: Display + ?Sized,
sourcedefault fn to_string(&self) -> StringConverts the given value to a String. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/error/struct.Report.html


std/simd/prelude/type.u16x2
-----------------------------------------------------------
Type Alias u16x2
pub type u16x2 = Simd<u16, 2>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with two elements of type u16. Aliased Type
struct u16x2(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/prelude/type.u16x2.html


std/marker/trait.copy
-----------------------------------------------------------
Trait Copy
pub trait Copy: Clone { }
Types whose values can be duplicated simply by copying bits. By default, variable bindings have â€˜move semantics.â€™ In other words: #[derive(Debug)]
struct Foo;
let x = Foo;
let y = x;
// `x` has moved into `y`, and so cannot be used
// println!("{x:?}"); // error: use of moved value However, if a type implements Copy, it instead has â€˜copy semanticsâ€™: // We can derive a `Copy` implementation. `Clone` is also required, as it's
// a supertrait of `Copy`.
#[derive(Debug, Copy, Clone)]
struct Foo;
let x = Foo;
let y = x;
// `y` is a copy of `x`
println!("{x:?}"); // A-OK! Itâ€™s important to note that in these two examples, the only difference is whether you are allowed to access x after the assignment. Under the hood, both a copy and a move can result in bits being copied in memory, although this is sometimes optimized away. How can I implement Copy? There are two ways to implement Copy on your type. The simplest is to use derive: #[derive(Copy, Clone)]
struct MyStruct; You can also implement Copy and Clone manually: struct MyStruct;
impl Copy for MyStruct { }
impl Clone for MyStruct {
    fn clone(&self) -> MyStruct {
        *self
    }
} There is a small difference between the two. The derive strategy will also place a Copy bound on type parameters: #[derive(Clone)]
struct MyStruct<T>(T);
impl<T: Copy> Copy for MyStruct<T> { } This isnâ€™t always desired. For example, shared references (&T) can be copied regardless of whether T is Copy. Likewise, a generic struct containing markers such as PhantomData could potentially be duplicated with a bit-wise copy. Whatâ€™s the difference between Copy and Clone? Copies happen implicitly, for example as part of an assignment y = x. The behavior of Copy is not overloadable; it is always a simple bit-wise copy. Cloning is an explicit action, x.clone(). The implementation of Clone can provide any type-specific behavior necessary to duplicate values safely. For example, the implementation of Clone for String needs to copy the pointed-to string buffer in the heap. A simple bitwise copy of String values would merely copy the pointer, leading to a double free down the line. For this reason, String is Clone but not Copy. Clone is a supertrait of Copy, so everything which is Copy must also implement Clone. If a type is Copy then its Clone implementation only needs to return *self (see the example above). When can my type be Copy? A type can implement Copy if all of its components implement Copy. For example, this struct can be Copy: #[derive(Copy, Clone)]
struct Point {
   x: i32,
   y: i32,
} A struct can be Copy, and i32 is Copy, therefore Point is eligible to be Copy. By contrast, consider struct PointList {
    points: Vec<Point>,
} The struct PointList cannot implement Copy, because Vec<T> is not Copy. If we attempt to derive a Copy implementation, weâ€™ll get an error: the trait `Copy` cannot be implemented for this type; field `points` does not implement `Copy` Shared references (&T) are also Copy, so a type can be Copy, even when it holds shared references of types T that are not Copy. Consider the following struct, which can implement Copy, because it only holds a shared reference to our non-Copy type PointList from above: #[derive(Copy, Clone)]
struct PointListWrapper<'a> {
    point_list_ref: &'a PointList,
} When canâ€™t my type be Copy? Some types canâ€™t be copied safely. For example, copying &mut T would create an aliased mutable reference. Copying String would duplicate responsibility for managing the Stringâ€™s buffer, leading to a double free. Generalizing the latter case, any type implementing Drop canâ€™t be Copy, because itâ€™s managing some resource besides its own size_of::<T> bytes. If you try to implement Copy on a struct or enum containing non-Copy data, you will get the error E0204. When should my type be Copy? Generally speaking, if your type can implement Copy, it should. Keep in mind, though, that implementing Copy is part of the public API of your type. If the type might become non-Copy in the future, it could be prudent to omit the Copy implementation now, to avoid a breaking API change. Additional implementors In addition to the implementors listed below, the following types also implement Copy:  Function item types (i.e., the distinct types defined for each function) Function pointer types (e.g., fn() -> i32) Closure types, if they capture no value from the environment or if all such captured values implement Copy themselves. Note that variables captured by shared reference always implement Copy (even if the referent doesnâ€™t), while variables captured by mutable reference never implement Copy.  Object Safety
This trait is not object safe.
Implementors
sourceimpl Copy for AsciiChar1.0.0sourceimpl Copy for std::cmp::Ordering1.34.0sourceimpl Copy for Infallible1.28.0sourceimpl Copy for std::fmt::Alignment1.0.0sourceimpl Copy for ErrorKind1.0.0sourceimpl Copy for SeekFrom1.7.0sourceimpl Copy for IpAddrsourceimpl Copy for Ipv6MulticastScope1.0.0sourceimpl Copy for Shutdown1.0.0sourceimpl Copy for SocketAddr1.0.0sourceimpl Copy for FpCategorysourceimpl Copy for BacktraceStylesourceimpl Copy for SearchStep1.0.0sourceimpl Copy for std::sync::atomic::Ordering1.12.0sourceimpl Copy for RecvTimeoutError1.0.0sourceimpl Copy for TryRecvError1.0.0sourceimpl Copy for bool1.0.0sourceimpl Copy for char1.0.0sourceimpl Copy for f161.0.0sourceimpl Copy for f321.0.0sourceimpl Copy for f641.0.0sourceimpl Copy for f1281.0.0sourceimpl Copy for i81.0.0sourceimpl Copy for i161.0.0sourceimpl Copy for i321.0.0sourceimpl Copy for i641.0.0sourceimpl Copy for i1281.0.0sourceimpl Copy for isizesourceimpl Copy for !1.0.0sourceimpl Copy for u81.0.0sourceimpl Copy for u161.0.0sourceimpl Copy for u321.0.0sourceimpl Copy for u641.0.0sourceimpl Copy for u1281.0.0sourceimpl Copy for usize1.27.0sourceimpl Copy for CpuidResult1.27.0sourceimpl Copy for __m128sourceimpl Copy for __m128bh1.27.0sourceimpl Copy for __m128dsourceimpl Copy for __m128h1.27.0sourceimpl Copy for __m128i1.27.0sourceimpl Copy for __m256sourceimpl Copy for __m256bh1.27.0sourceimpl Copy for __m256dsourceimpl Copy for __m256h1.27.0sourceimpl Copy for __m256i1.72.0sourceimpl Copy for __m512sourceimpl Copy for __m512bh1.72.0sourceimpl Copy for __m512dsourceimpl Copy for __m512h1.72.0sourceimpl Copy for __m512isourceimpl Copy for bf16sourceimpl Copy for AllocErrorsourceimpl Copy for Global1.28.0sourceimpl Copy for Layout1.28.0sourceimpl Copy for System1.0.0sourceimpl Copy for TypeId1.34.0sourceimpl Copy for TryFromSliceError1.34.0sourceimpl Copy for CharTryFromError1.59.0sourceimpl Copy for TryFromCharError1.0.0sourceimpl Copy for Error1.75.0sourceimpl Copy for FileTimes1.1.0sourceimpl Copy for FileType1.0.0sourceimpl Copy for Empty1.0.0sourceimpl Copy for Sinksourceimpl Copy for Assume1.0.0sourceimpl Copy for Ipv4Addr1.0.0sourceimpl Copy for Ipv6Addr1.0.0sourceimpl Copy for SocketAddrV41.0.0sourceimpl Copy for SocketAddrV61.34.0sourceimpl Copy for TryFromIntError1.0.0sourceimpl Copy for RangeFullsourceimpl Copy for UCredAvailable on Unix only.1.61.0sourceimpl Copy for ExitCode1.0.0sourceimpl Copy for ExitStatussourceimpl Copy for ExitStatusErrorsourceimpl Copy for std::ptr::Alignmentsourceimpl Copy for DefaultRandomSource1.0.0sourceimpl Copy for Utf8Error1.0.0sourceimpl Copy for RecvError1.5.0sourceimpl Copy for WaitTimeoutResult1.36.0sourceimpl Copy for RawWakerVTable1.26.0sourceimpl Copy for AccessError1.19.0sourceimpl Copy for ThreadId1.3.0sourceimpl Copy for Duration1.8.0sourceimpl Copy for Instant1.8.0sourceimpl Copy for SystemTime1.33.0sourceimpl Copy for PhantomPinned1.0.0sourceimpl<'a> Copy for Component<'a>1.0.0sourceimpl<'a> Copy for Prefix<'a>1.0.0sourceimpl<'a> Copy for Arguments<'a>1.36.0sourceimpl<'a> Copy for IoSlice<'a>1.10.0sourceimpl<'a> Copy for Location<'a>1.28.0sourceimpl<'a> Copy for Ancestors<'a>1.0.0sourceimpl<'a> Copy for PrefixComponent<'a>sourceimpl<'a, T, const N: usize> Copy for ArrayWindows<'a, T, N>where
    T: Copy + 'a,1.63.0sourceimpl<'fd> Copy for BorrowedFd<'fd>1.63.0sourceimpl<'handle> Copy for BorrowedHandle<'handle>Available on Windows only.1.63.0sourceimpl<'socket> Copy for BorrowedSocket<'socket>Available on Windows only.1.55.0sourceimpl<B, C> Copy for ControlFlow<B, C>where
    B: Copy,
    C: Copy,sourceimpl<Dyn> Copy for DynMetadata<Dyn>where
    Dyn: ?Sized,1.28.0sourceimpl<F> Copy for RepeatWith<F>where
    F: Copy,sourceimpl<Idx> Copy for Range<Idx>where
    Idx: Copy,sourceimpl<Idx> Copy for RangeFrom<Idx>where
    Idx: Copy,sourceimpl<Idx> Copy for RangeInclusive<Idx>where
    Idx: Copy,1.0.0sourceimpl<Idx> Copy for RangeTo<Idx>where
    Idx: Copy,1.26.0sourceimpl<Idx> Copy for RangeToInclusive<Idx>where
    Idx: Copy,1.33.0sourceimpl<Ptr> Copy for Pin<Ptr>where
    Ptr: Copy,1.17.0sourceimpl<T> Copy for Bound<T>where
    T: Copy,1.0.0sourceimpl<T> Copy for Option<T>where
    T: Copy,1.36.0sourceimpl<T> Copy for Poll<T>where
    T: Copy,1.0.0sourceimpl<T> Copy for *const Twhere
    T: ?Sized,1.0.0sourceimpl<T> Copy for *mut Twhere
    T: ?Sized,1.0.0sourceimpl<T> Copy for &Twhere
    T: ?Sized,
Shared references can be copied, but mutable references cannot! 
1.19.0sourceimpl<T> Copy for Reverse<T>where
    T: Copy,1.21.0sourceimpl<T> Copy for Discriminant<T>1.20.0sourceimpl<T> Copy for ManuallyDrop<T>where
    T: Copy + ?Sized,1.28.0sourceimpl<T> Copy for NonZero<T>where
    T: ZeroablePrimitive,1.74.0sourceimpl<T> Copy for Saturating<T>where
    T: Copy,1.0.0sourceimpl<T> Copy for Wrapping<T>where
    T: Copy,1.25.0sourceimpl<T> Copy for NonNull<T>where
    T: ?Sized,1.0.0sourceimpl<T> Copy for PhantomData<T>where
    T: ?Sized,1.36.0sourceimpl<T> Copy for MaybeUninit<T>where
    T: Copy,1.0.0sourceimpl<T, E> Copy for Result<T, E>where
    T: Copy,
    E: Copy,1.58.0sourceimpl<T, const N: usize> Copy for [T; N]where
    T: Copy,sourceimpl<T, const N: usize> Copy for Mask<T, N>where
    T: MaskElement,
    LaneCount<N>: SupportedLaneCount,sourceimpl<T, const N: usize> Copy for Simd<T, N>where
    LaneCount<N>: SupportedLaneCount,
    T: SimdElement,sourceimpl<T: Copy> Copy for SendTimeoutError<T>1.0.0sourceimpl<T: Copy> Copy for TrySendError<T>1.0.0sourceimpl<T: Copy> Copy for SendError<T>sourceimpl<Y, R> Copy for CoroutineState<Y, R>where
    Y: Copy,
    R: Copy,

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/marker/trait.Copy.html


std/f128/consts/constant.ln_10
-----------------------------------------------------------
Constant LN_10
pub const LN_10: f128 = 2.30258509299404568401799145468436420760110148862877297603333_f128; // 2.30258509299404568401799145468436418f128
ðŸ”¬This is a nightly-only experimental API. (f128 #116909)
ln(10)
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/f128/consts/constant.LN_10.html


std/u32/constant.max
-----------------------------------------------------------
Constant MAX
pub const MAX: u32 = u32::MAX; // 4_294_967_295u32
ðŸ‘ŽDeprecating in a future version: replaced by the MAX associated constant on this type
The largest value that can be represented by this integer type. Use u32::MAX instead. Examples // deprecated way
let max = std::u32::MAX;
// intended way
let max = u32::MAX;
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/u32/constant.MAX.html


std/os/windows/ffi/struct.encodewide
-----------------------------------------------------------
Struct EncodeWide
pub struct EncodeWide<'a> { /* private fields */ }
Available on Windows only.Generates a wide character sequence for potentially ill-formed UTF-16. Trait Implementations
1.0.0sourceimpl<'a> Clone for EncodeWide<'a>
sourcefn clone(&self) -> EncodeWide<'a> â“˜Returns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.0.0sourceimpl<'a> Iterator for EncodeWide<'a>
sourcetype Item = u16The type of the elements being iterated over.
sourcefn next(&mut self) -> Option<u16>Advances the iterator and returns the next value. Read more
sourcefn size_hint(&self) -> (usize, Option<usize>)Returns the bounds on the remaining length of the iterator. Read more
sourcefn next_chunk<const N: usize>(
    &mut self,
) -> Result<[Self::Item; N], IntoIter<Self::Item, N>>where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_next_chunk #98326)
Advances the iterator and returns an array containing the next N values. Read more
1.0.0sourcefn count(self) -> usizewhere
    Self: Sized,Consumes the iterator, counting the number of iterations and returning it. Read more
1.0.0sourcefn last(self) -> Option<Self::Item>where
    Self: Sized,Consumes the iterator, returning the last element. Read more
sourcefn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator by n elements. Read more
1.0.0sourcefn nth(&mut self, n: usize) -> Option<Self::Item>Returns the nth element of the iterator. Read more
1.28.0sourcefn step_by(self, step: usize) -> StepBy<Self> â“˜where
    Self: Sized,Creates an iterator starting at the same point, but stepping by the given amount at each iteration. Read more
1.0.0sourcefn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator<Item = Self::Item>,Takes two iterators and creates a new iterator over both in sequence. Read more
1.0.0sourcefn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator,â€˜Zips upâ€™ two iterators into a single iterator of pairs. Read more
sourcefn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G> â“˜where
    Self: Sized,
    G: FnMut() -> Self::Item,
ðŸ”¬This is a nightly-only experimental API. (iter_intersperse #79524)
Creates a new iterator which places an item generated by separator between adjacent items of the original iterator. Read more
1.0.0sourcefn map<B, F>(self, f: F) -> Map<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> B,Takes a closure and creates an iterator which calls that closure on each element. Read more
1.21.0sourcefn for_each<F>(self, f: F)where
    Self: Sized,
    F: FnMut(Self::Item),Calls a closure on each element of an iterator. Read more
1.0.0sourcefn filter<P>(self, predicate: P) -> Filter<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator which uses a closure to determine if an element should be yielded. Read more
1.0.0sourcefn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Creates an iterator that both filters and maps. Read more
1.0.0sourcefn enumerate(self) -> Enumerate<Self> â“˜where
    Self: Sized,Creates an iterator which gives the current iteration count as well as the next value. Read more
1.0.0sourcefn peekable(self) -> Peekable<Self> â“˜where
    Self: Sized,Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information. Read more
1.0.0sourcefn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that skips elements based on a predicate. Read more
1.0.0sourcefn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that yields elements based on a predicate. Read more
1.57.0sourcefn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(Self::Item) -> Option<B>,Creates an iterator that both yields elements based on a predicate and maps. Read more
1.0.0sourcefn skip(self, n: usize) -> Skip<Self> â“˜where
    Self: Sized,Creates an iterator that skips the first n elements. Read more
1.0.0sourcefn take(self, n: usize) -> Take<Self> â“˜where
    Self: Sized,Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner. Read more
1.0.0sourcefn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> â“˜where
    Self: Sized,
    F: FnMut(&mut St, Self::Item) -> Option<B>,An iterator adapter which, like fold, holds internal state, but unlike fold, produces a new iterator. Read more
1.0.0sourcefn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F> â“˜where
    Self: Sized,
    U: IntoIterator,
    F: FnMut(Self::Item) -> U,Creates an iterator that works like map, but flattens nested structure. Read more
sourcefn map_windows<F, R, const N: usize>(self, f: F) -> MapWindows<Self, F, N> â“˜where
    Self: Sized,
    F: FnMut(&[Self::Item; N]) -> R,
ðŸ”¬This is a nightly-only experimental API. (iter_map_windows #87155)
Calls the given function f for each contiguous window of size N over self and returns an iterator over the outputs of f. Like slice::windows(), the windows during mapping overlap as well. Read more
1.0.0sourcefn fuse(self) -> Fuse<Self> â“˜where
    Self: Sized,Creates an iterator which ends after the first None. Read more
1.0.0sourcefn inspect<F>(self, f: F) -> Inspect<Self, F> â“˜where
    Self: Sized,
    F: FnMut(&Self::Item),Does something with each element of an iterator, passing the value on. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Borrows an iterator, rather than consuming it. Read more
1.0.0sourcefn collect<B>(self) -> Bwhere
    B: FromIterator<Self::Item>,
    Self: Sized,Transforms an iterator into a collection. Read more
sourcefn collect_into<E>(self, collection: &mut E) -> &mut Ewhere
    E: Extend<Self::Item>,
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_collect_into #94780)
Collects all the items from an iterator into a collection. Read more
1.0.0sourcefn partition<B, F>(self, f: F) -> (B, B)where
    Self: Sized,
    B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool,Consumes an iterator, creating two collections from it. Read more
sourcefn is_partitioned<P>(self, predicate: P) -> boolwhere
    Self: Sized,
    P: FnMut(Self::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_is_partitioned #62544)
Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false. Read more
1.27.0sourcefn try_fold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> R,
    R: Try<Output = B>,An iterator method that applies a function as long as it returns successfully, producing a single, final value. Read more
1.27.0sourcefn try_for_each<F, R>(&mut self, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(Self::Item) -> R,
    R: Try<Output = ()>,An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. Read more
1.0.0sourcefn fold<B, F>(self, init: B, f: F) -> Bwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> B,Folds every element into an accumulator by applying an operation, returning the final result. Read more
1.51.0sourcefn reduce<F>(self, f: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(Self::Item, Self::Item) -> Self::Item,Reduces the elements to a single one, by repeatedly applying a reducing operation. Read more
sourcefn try_reduce<R>(
    &mut self,
    f: impl FnMut(Self::Item, Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = Self::Item>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (iterator_try_reduce #87053)
Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. Read more
1.0.0sourcefn all<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if every element of the iterator matches a predicate. Read more
1.0.0sourcefn any<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if any element of the iterator matches a predicate. Read more
1.0.0sourcefn find<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator that satisfies a predicate. Read more
1.30.0sourcefn find_map<B, F>(&mut self, f: F) -> Option<B>where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Applies function to the elements of iterator and returns the first non-none result. Read more
sourcefn try_find<R>(
    &mut self,
    f: impl FnMut(&Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = bool>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (try_find #63178)
Applies function to the elements of iterator and returns the first true result or the first error. Read more
1.0.0sourcefn position<P>(&mut self, predicate: P) -> Option<usize>where
    Self: Sized,
    P: FnMut(Self::Item) -> bool,Searches for an element in an iterator, returning its index. Read more
1.6.0sourcefn max_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the maximum value from the specified function. Read more
1.15.0sourcefn max_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the maximum value with respect to the specified comparison function. Read more
1.6.0sourcefn min_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the minimum value from the specified function. Read more
1.15.0sourcefn min_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the minimum value with respect to the specified comparison function. Read more
1.0.0sourcefn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)where
    FromA: Default + Extend<A>,
    FromB: Default + Extend<B>,
    Self: Sized + Iterator<Item = (A, B)>,Converts an iterator of pairs into a pair of containers. Read more
1.36.0sourcefn copied<'a, T>(self) -> Copied<Self> â“˜where
    T: 'a + Copy,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which copies all of its elements. Read more
1.0.0sourcefn cloned<'a, T>(self) -> Cloned<Self> â“˜where
    T: 'a + Clone,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which clones all of its elements. Read more
1.0.0sourcefn cycle(self) -> Cycle<Self> â“˜where
    Self: Sized + Clone,Repeats an iterator endlessly. Read more
sourcefn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N> â“˜where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_array_chunks #100450)
Returns an iterator over N elements of the iterator at a time. Read more
1.11.0sourcefn sum<S>(self) -> Swhere
    Self: Sized,
    S: Sum<Self::Item>,Sums the elements of an iterator. Read more
1.11.0sourcefn product<P>(self) -> Pwhere
    Self: Sized,
    P: Product<Self::Item>,Iterates over the entire iterator, multiplying all the elements Read more
sourcefn cmp_by<I, F>(self, other: I, cmp: F) -> Orderingwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn partial_cmp<I>(self, other: I) -> Option<Ordering>where
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,
Lexicographically compares the PartialOrd elements of this Iterator with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. Read more
sourcefn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering>where
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Option<Ordering>,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn eq<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are equal to those of another. Read more
sourcefn eq_by<I, F>(self, other: I, eq: F) -> boolwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function. Read more
1.5.0sourcefn ne<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are not equal to those of another. Read more
1.5.0sourcefn lt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less than those of another. Read more
1.5.0sourcefn le<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less or equal to those of another. Read more
1.5.0sourcefn gt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than those of another. Read more
1.5.0sourcefn ge<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than or equal to those of another. Read more
1.82.0sourcefn is_sorted_by<F>(self, compare: F) -> boolwhere
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> bool,Checks if the elements of this iterator are sorted using the given comparator function. Read more
1.82.0sourcefn is_sorted_by_key<F, K>(self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> K,
    K: PartialOrd,Checks if the elements of this iterator are sorted using the given key extraction function. Read more

1.62.0sourceimpl FusedIterator for EncodeWide<'_>
Auto Trait Implementations
impl<'a> Freeze for EncodeWide<'a>impl<'a> RefUnwindSafe for EncodeWide<'a>impl<'a> Send for EncodeWide<'a>impl<'a> Sync for EncodeWide<'a>impl<'a> Unpin for EncodeWide<'a>impl<'a> UnwindSafe for EncodeWide<'a>
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<I> IntoIterator for Iwhere
    I: Iterator,
sourcetype Item = <I as Iterator>::ItemThe type of the elements being iterated over.
sourcetype IntoIter = IWhich kind of iterator are we turning this into?
sourcefn into_iter(self) -> ICreates an iterator from a value. Read more

sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/os/windows/ffi/struct.EncodeWide.html


std/prelude/v1/attr.bench
-----------------------------------------------------------
Attribute Macro bench
#[bench]
ðŸ”¬This is a nightly-only experimental API. (test #50297)
Attribute macro applied to a function to turn it into a benchmark test.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/prelude/v1/attr.bench.html


std/intrinsics/simd/fn.simd_rem
-----------------------------------------------------------
Function simd_rem
pub unsafe extern "rust-intrinsic" fn simd_rem<T>(lhs: T, rhs: T) -> T
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Returns remainder of two vectors elementwise. T must be a vector of integer or floating point primitive types. Safety For integers, rhs must not contain any zero elements. Additionally for signed integers, <int>::MIN / -1 is undefined behavior.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/simd/fn.simd_rem.html


std/simd/type.f64x4
-----------------------------------------------------------
Type Alias f64x4
pub type f64x4 = Simd<f64, 4>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with four elements of type f64. Aliased Type
struct f64x4(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/type.f64x4.html


std/str/struct.linesany
-----------------------------------------------------------
Struct LinesAny
pub struct LinesAny<'a>(/* private fields */);
ðŸ‘ŽDeprecated since 1.4.0: use lines()/Lines instead now
Created with the method lines_any. Trait Implementations
1.0.0sourceimpl<'a> Clone for LinesAny<'a>
sourcefn clone(&self) -> LinesAny<'a> â“˜Returns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.0.0sourceimpl<'a> Debug for LinesAny<'a>
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.0.0sourceimpl<'a> DoubleEndedIterator for LinesAny<'a>
sourcefn next_back(&mut self) -> Option<&'a str>Removes and returns an element from the end of the iterator. Read more
sourcefn advance_back_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator from the back by n elements. Read more
1.37.0sourcefn nth_back(&mut self, n: usize) -> Option<Self::Item>Returns the nth element from the end of the iterator. Read more
1.27.0sourcefn try_rfold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> R,
    R: Try<Output = B>,This is the reverse version of Iterator::try_fold(): it takes elements starting from the back of the iterator. Read more
1.27.0sourcefn rfold<B, F>(self, init: B, f: F) -> Bwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> B,An iterator method that reduces the iteratorâ€™s elements to a single, final value, starting from the back. Read more
1.27.0sourcefn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator from the back that satisfies a predicate. Read more

1.0.0sourceimpl<'a> Iterator for LinesAny<'a>
sourcetype Item = &'a strThe type of the elements being iterated over.
sourcefn next(&mut self) -> Option<&'a str>Advances the iterator and returns the next value. Read more
sourcefn size_hint(&self) -> (usize, Option<usize>)Returns the bounds on the remaining length of the iterator. Read more
sourcefn next_chunk<const N: usize>(
    &mut self,
) -> Result<[Self::Item; N], IntoIter<Self::Item, N>>where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_next_chunk #98326)
Advances the iterator and returns an array containing the next N values. Read more
1.0.0sourcefn count(self) -> usizewhere
    Self: Sized,Consumes the iterator, counting the number of iterations and returning it. Read more
1.0.0sourcefn last(self) -> Option<Self::Item>where
    Self: Sized,Consumes the iterator, returning the last element. Read more
sourcefn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator by n elements. Read more
1.0.0sourcefn nth(&mut self, n: usize) -> Option<Self::Item>Returns the nth element of the iterator. Read more
1.28.0sourcefn step_by(self, step: usize) -> StepBy<Self> â“˜where
    Self: Sized,Creates an iterator starting at the same point, but stepping by the given amount at each iteration. Read more
1.0.0sourcefn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator<Item = Self::Item>,Takes two iterators and creates a new iterator over both in sequence. Read more
1.0.0sourcefn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator,â€˜Zips upâ€™ two iterators into a single iterator of pairs. Read more
sourcefn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G> â“˜where
    Self: Sized,
    G: FnMut() -> Self::Item,
ðŸ”¬This is a nightly-only experimental API. (iter_intersperse #79524)
Creates a new iterator which places an item generated by separator between adjacent items of the original iterator. Read more
1.0.0sourcefn map<B, F>(self, f: F) -> Map<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> B,Takes a closure and creates an iterator which calls that closure on each element. Read more
1.21.0sourcefn for_each<F>(self, f: F)where
    Self: Sized,
    F: FnMut(Self::Item),Calls a closure on each element of an iterator. Read more
1.0.0sourcefn filter<P>(self, predicate: P) -> Filter<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator which uses a closure to determine if an element should be yielded. Read more
1.0.0sourcefn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Creates an iterator that both filters and maps. Read more
1.0.0sourcefn enumerate(self) -> Enumerate<Self> â“˜where
    Self: Sized,Creates an iterator which gives the current iteration count as well as the next value. Read more
1.0.0sourcefn peekable(self) -> Peekable<Self> â“˜where
    Self: Sized,Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information. Read more
1.0.0sourcefn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that skips elements based on a predicate. Read more
1.0.0sourcefn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that yields elements based on a predicate. Read more
1.57.0sourcefn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(Self::Item) -> Option<B>,Creates an iterator that both yields elements based on a predicate and maps. Read more
1.0.0sourcefn skip(self, n: usize) -> Skip<Self> â“˜where
    Self: Sized,Creates an iterator that skips the first n elements. Read more
1.0.0sourcefn take(self, n: usize) -> Take<Self> â“˜where
    Self: Sized,Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner. Read more
1.0.0sourcefn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> â“˜where
    Self: Sized,
    F: FnMut(&mut St, Self::Item) -> Option<B>,An iterator adapter which, like fold, holds internal state, but unlike fold, produces a new iterator. Read more
1.0.0sourcefn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F> â“˜where
    Self: Sized,
    U: IntoIterator,
    F: FnMut(Self::Item) -> U,Creates an iterator that works like map, but flattens nested structure. Read more
sourcefn map_windows<F, R, const N: usize>(self, f: F) -> MapWindows<Self, F, N> â“˜where
    Self: Sized,
    F: FnMut(&[Self::Item; N]) -> R,
ðŸ”¬This is a nightly-only experimental API. (iter_map_windows #87155)
Calls the given function f for each contiguous window of size N over self and returns an iterator over the outputs of f. Like slice::windows(), the windows during mapping overlap as well. Read more
1.0.0sourcefn fuse(self) -> Fuse<Self> â“˜where
    Self: Sized,Creates an iterator which ends after the first None. Read more
1.0.0sourcefn inspect<F>(self, f: F) -> Inspect<Self, F> â“˜where
    Self: Sized,
    F: FnMut(&Self::Item),Does something with each element of an iterator, passing the value on. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Borrows an iterator, rather than consuming it. Read more
1.0.0sourcefn collect<B>(self) -> Bwhere
    B: FromIterator<Self::Item>,
    Self: Sized,Transforms an iterator into a collection. Read more
sourcefn collect_into<E>(self, collection: &mut E) -> &mut Ewhere
    E: Extend<Self::Item>,
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_collect_into #94780)
Collects all the items from an iterator into a collection. Read more
1.0.0sourcefn partition<B, F>(self, f: F) -> (B, B)where
    Self: Sized,
    B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool,Consumes an iterator, creating two collections from it. Read more
sourcefn partition_in_place<'a, T, P>(self, predicate: P) -> usizewhere
    T: 'a,
    Self: Sized + DoubleEndedIterator<Item = &'a mut T>,
    P: FnMut(&T) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_partition_in_place #62543)
Reorders the elements of this iterator in-place according to the given predicate, such that all those that return true precede all those that return false. Returns the number of true elements found. Read more
sourcefn is_partitioned<P>(self, predicate: P) -> boolwhere
    Self: Sized,
    P: FnMut(Self::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_is_partitioned #62544)
Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false. Read more
1.27.0sourcefn try_fold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> R,
    R: Try<Output = B>,An iterator method that applies a function as long as it returns successfully, producing a single, final value. Read more
1.27.0sourcefn try_for_each<F, R>(&mut self, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(Self::Item) -> R,
    R: Try<Output = ()>,An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. Read more
1.0.0sourcefn fold<B, F>(self, init: B, f: F) -> Bwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> B,Folds every element into an accumulator by applying an operation, returning the final result. Read more
1.51.0sourcefn reduce<F>(self, f: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(Self::Item, Self::Item) -> Self::Item,Reduces the elements to a single one, by repeatedly applying a reducing operation. Read more
sourcefn try_reduce<R>(
    &mut self,
    f: impl FnMut(Self::Item, Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = Self::Item>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (iterator_try_reduce #87053)
Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. Read more
1.0.0sourcefn all<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if every element of the iterator matches a predicate. Read more
1.0.0sourcefn any<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if any element of the iterator matches a predicate. Read more
1.0.0sourcefn find<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator that satisfies a predicate. Read more
1.30.0sourcefn find_map<B, F>(&mut self, f: F) -> Option<B>where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Applies function to the elements of iterator and returns the first non-none result. Read more
sourcefn try_find<R>(
    &mut self,
    f: impl FnMut(&Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = bool>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (try_find #63178)
Applies function to the elements of iterator and returns the first true result or the first error. Read more
1.0.0sourcefn position<P>(&mut self, predicate: P) -> Option<usize>where
    Self: Sized,
    P: FnMut(Self::Item) -> bool,Searches for an element in an iterator, returning its index. Read more
1.6.0sourcefn max_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the maximum value from the specified function. Read more
1.15.0sourcefn max_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the maximum value with respect to the specified comparison function. Read more
1.6.0sourcefn min_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the minimum value from the specified function. Read more
1.15.0sourcefn min_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the minimum value with respect to the specified comparison function. Read more
1.0.0sourcefn rev(self) -> Rev<Self> â“˜where
    Self: Sized + DoubleEndedIterator,Reverses an iteratorâ€™s direction. Read more
1.0.0sourcefn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)where
    FromA: Default + Extend<A>,
    FromB: Default + Extend<B>,
    Self: Sized + Iterator<Item = (A, B)>,Converts an iterator of pairs into a pair of containers. Read more
1.36.0sourcefn copied<'a, T>(self) -> Copied<Self> â“˜where
    T: 'a + Copy,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which copies all of its elements. Read more
1.0.0sourcefn cloned<'a, T>(self) -> Cloned<Self> â“˜where
    T: 'a + Clone,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which clones all of its elements. Read more
1.0.0sourcefn cycle(self) -> Cycle<Self> â“˜where
    Self: Sized + Clone,Repeats an iterator endlessly. Read more
sourcefn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N> â“˜where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_array_chunks #100450)
Returns an iterator over N elements of the iterator at a time. Read more
1.11.0sourcefn sum<S>(self) -> Swhere
    Self: Sized,
    S: Sum<Self::Item>,Sums the elements of an iterator. Read more
1.11.0sourcefn product<P>(self) -> Pwhere
    Self: Sized,
    P: Product<Self::Item>,Iterates over the entire iterator, multiplying all the elements Read more
sourcefn cmp_by<I, F>(self, other: I, cmp: F) -> Orderingwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn partial_cmp<I>(self, other: I) -> Option<Ordering>where
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,
Lexicographically compares the PartialOrd elements of this Iterator with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. Read more
sourcefn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering>where
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Option<Ordering>,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn eq<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are equal to those of another. Read more
sourcefn eq_by<I, F>(self, other: I, eq: F) -> boolwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function. Read more
1.5.0sourcefn ne<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are not equal to those of another. Read more
1.5.0sourcefn lt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less than those of another. Read more
1.5.0sourcefn le<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less or equal to those of another. Read more
1.5.0sourcefn gt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than those of another. Read more
1.5.0sourcefn ge<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than or equal to those of another. Read more
1.82.0sourcefn is_sorted_by<F>(self, compare: F) -> boolwhere
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> bool,Checks if the elements of this iterator are sorted using the given comparator function. Read more
1.82.0sourcefn is_sorted_by_key<F, K>(self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> K,
    K: PartialOrd,Checks if the elements of this iterator are sorted using the given key extraction function. Read more

1.26.0sourceimpl FusedIterator for LinesAny<'_>
Auto Trait Implementations
impl<'a> Freeze for LinesAny<'a>impl<'a> RefUnwindSafe for LinesAny<'a>impl<'a> Send for LinesAny<'a>impl<'a> Sync for LinesAny<'a>impl<'a> Unpin for LinesAny<'a>impl<'a> UnwindSafe for LinesAny<'a>
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<I> IntoIterator for Iwhere
    I: Iterator,
sourcetype Item = <I as Iterator>::ItemThe type of the elements being iterated over.
sourcetype IntoIter = IWhich kind of iterator are we turning this into?
sourcefn into_iter(self) -> ICreates an iterator from a value. Read more

sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/str/struct.LinesAny.html


std/intrinsics/fn.powif128
-----------------------------------------------------------
Function powif128
pub unsafe extern "rust-intrinsic" fn powif128(
    a: f128,
    x: i32,
) -> f128
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Raises an f128 to an integer power. The stabilized version of this intrinsic is f128::powi
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.powif128.html


reference/attributes/debugger
-----------------------------------------------------------
Debugger attributes The following attributes are used for enhancing the debugging experience when using third-party debuggers like GDB or WinDbg. The debugger_visualizer attribute The debugger_visualizer attribute can be used to embed a debugger visualizer file into the debug information. This enables an improved debugger experience for displaying values in the debugger. It uses the MetaListNameValueStr syntax to specify its inputs, and must be specified as a crate attribute. Using debugger_visualizer with Natvis Natvis is an XML-based framework for Microsoft debuggers (such as Visual Studio and WinDbg) that uses declarative rules to customize the display of types. For detailed information on the Natvis format, refer to Microsoftâ€™s Natvis documentation. This attribute only supports embedding Natvis files on -windows-msvc targets. The path to the Natvis file is specified with the natvis_file key, which is a path relative to the crate source file: #![debugger_visualizer(natvis_file = "Rectangle.natvis")]
struct FancyRect {
    x: f32,
    y: f32,
    dx: f32,
    dy: f32,
}
fn main() {
    let fancy_rect = FancyRect { x: 10.0, y: 10.0, dx: 5.0, dy: 5.0 };
    println!("set breakpoint here");
} and Rectangle.natvis contains: <?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
    <Type Name="foo::FancyRect">
      <DisplayString>({x},{y}) + ({dx}, {dy})</DisplayString>
      <Expand>
        <Synthetic Name="LowerLeft">
          <DisplayString>({x}, {y})</DisplayString>
        </Synthetic>
        <Synthetic Name="UpperLeft">
          <DisplayString>({x}, {y + dy})</DisplayString>
        </Synthetic>
        <Synthetic Name="UpperRight">
          <DisplayString>({x + dx}, {y + dy})</DisplayString>
        </Synthetic>
        <Synthetic Name="LowerRight">
          <DisplayString>({x + dx}, {y})</DisplayString>
        </Synthetic>
      </Expand>
    </Type>
</AutoVisualizer>
 When viewed under WinDbg, the fancy_rect variable would be shown as follows: > Variables:
  > fancy_rect: (10.0, 10.0) + (5.0, 5.0)
    > LowerLeft: (10.0, 10.0)
    > UpperLeft: (10.0, 15.0)
    > UpperRight: (15.0, 15.0)
    > LowerRight: (15.0, 10.0)
 Using debugger_visualizer with GDB GDB supports the use of a structured Python script, called a pretty printer, that describes how a type should be visualized in the debugger view. For detailed information on pretty printers, refer to GDBâ€™s pretty printing documentation. Embedded pretty printers are not automatically loaded when debugging a binary under GDB. There are two ways to enable auto-loading embedded pretty printers:  Launch GDB with extra arguments to explicitly add a directory or binary to the auto-load safe path: gdb -iex "add-auto-load-safe-path safe-path path/to/binary" path/to/binary For more information, see GDBâ€™s auto-loading documentation. Create a file named gdbinit under $HOME/.config/gdb (you may need to create the directory if it doesnâ€™t already exist). Add the following line to that file: add-auto-load-safe-path path/to/binary.  These scripts are embedded using the gdb_script_file key, which is a path relative to the crate source file. #![debugger_visualizer(gdb_script_file = "printer.py")]
struct Person {
    name: String,
    age: i32,
}
fn main() {
    let bob = Person { name: String::from("Bob"), age: 10 };
    println!("set breakpoint here");
} and printer.py contains: import gdb
class PersonPrinter:
    "Print a Person"
    def __init__(self, val):
        self.val = val
        self.name = val["name"]
        self.age = int(val["age"])
    def to_string(self):
        return "{} is {} years old.".format(self.name, self.age)
def lookup(val):
    lookup_tag = val.type.tag
    if lookup_tag is None:
        return None
    if "foo::Person" == lookup_tag:
        return PersonPrinter(val)
    return None
gdb.current_objfile().pretty_printers.append(lookup)
 When the crateâ€™s debug executable is passed into GDB1, print bob will display: "Bob" is 10 years old.
 
1 Note: This assumes you are using the rust-gdb script which configures pretty-printers for standard library types like String.  The collapse_debuginfo attribute The collapse_debuginfo attribute controls whether code locations from a macro definition are collapsed into a single location associated with the macroâ€™s call site, when generating debuginfo for code calling this macro. The attribute uses the MetaListIdents syntax to specify its inputs, and can only be applied to macro definitions. Accepted options:  
#[collapse_debuginfo(yes)] â€” code locations in debuginfo are collapsed. 
#[collapse_debuginfo(no)] â€” code locations in debuginfo are not collapsed. 
#[collapse_debuginfo(external)] â€” code locations in debuginfo are collapsed only if the macro comes from a different crate.  The external behavior is the default for macros that donâ€™t have this attribute, unless they are built-in macros. For built-in macros the default is yes.  Note: rustc has a -C collapse-macro-debuginfo CLI option to override both the default collapsing behavior and #[collapse_debuginfo] attributes.  #![allow(unused)]
fn main() {
#[collapse_debuginfo(yes)]
macro_rules! example {
    () => {
        println!("hello!");
    };
}
}
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/reference/attributes/debugger.html


std/task/trait.localwake
-----------------------------------------------------------
Trait LocalWake
pub trait LocalWake {
    // Required method
    fn wake(self: Rc<Self>);
    // Provided method
    fn wake_by_ref(self: &Rc<Self>) { ... }
}
ðŸ”¬This is a nightly-only experimental API. (local_waker #118959)
An analogous trait to Wake but used to construct a LocalWaker. This API works in exactly the same way as Wake, except that it uses an Rc instead of an Arc, and the result is a LocalWaker instead of a Waker. The benefits of using LocalWaker over Waker are that it allows the local waker to hold data that does not implement Send and Sync. Additionally, it saves calls to Arc::clone, which requires atomic synchronization. Examples This is a simplified example of a spawn and a block_on function. The spawn function is used to push new tasks onto the run queue, while the block on function will remove them and poll them. When a task is woken, it will put itself back on the run queue to be polled by the executor. Note: This example trades correctness for simplicity. A real world example would interleave poll calls with calls to an io reactor to wait for events instead of spinning on a loop. #![feature(local_waker)]
#![feature(noop_waker)]
use std::task::{LocalWake, ContextBuilder, LocalWaker, Waker};
use std::future::Future;
use std::pin::Pin;
use std::rc::Rc;
use std::cell::RefCell;
use std::collections::VecDeque;

thread_local! {
    // A queue containing all tasks ready to do progress
    static RUN_QUEUE: RefCell<VecDeque<Rc<Task>>> = RefCell::default();
}
type BoxedFuture = Pin<Box<dyn Future<Output = ()>>>;
struct Task(RefCell<BoxedFuture>);
impl LocalWake for Task {
    fn wake(self: Rc<Self>) {
        RUN_QUEUE.with_borrow_mut(|queue| {
            queue.push_back(self)
        })
    }
}
fn spawn<F>(future: F)
where
    F: Future<Output=()> + 'static + Send + Sync
{
    let task = RefCell::new(Box::pin(future));
    RUN_QUEUE.with_borrow_mut(|queue| {
        queue.push_back(Rc::new(Task(task)));
    });
}
fn block_on<F>(future: F)
where
    F: Future<Output=()> + 'static + Sync + Send
{
    spawn(future);
    loop {
        let Some(task) = RUN_QUEUE.with_borrow_mut(|queue| queue.pop_front()) else {
            // we exit, since there are no more tasks remaining on the queue
            return;
        };
        // cast the Rc<Task> into a `LocalWaker`
        let local_waker: LocalWaker = task.clone().into();
        // Build the context using `ContextBuilder`
        let mut cx = ContextBuilder::from_waker(Waker::noop())
            .local_waker(&local_waker)
            .build();
        // Poll the task
        let _ = task.0
            .borrow_mut()
            .as_mut()
            .poll(&mut cx);
    }
}
block_on(async {
    println!("hello world");
}); Required Methods
sourcefn wake(self: Rc<Self>)
ðŸ”¬This is a nightly-only experimental API. (local_waker #118959)
Wake this task. 
Provided Methods
sourcefn wake_by_ref(self: &Rc<Self>)
ðŸ”¬This is a nightly-only experimental API. (local_waker #118959)
Wake this task without consuming the local waker. If an executor supports a cheaper way to wake without consuming the waker, it should override this method. By default, it clones the Rc and calls wake on the clone. 
Object Safety
This trait is not object safe.
Implementors

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/task/trait.LocalWake.html


std/sync/atomic/struct.atomicu32
-----------------------------------------------------------
Struct AtomicU32
#[repr(C, align(4))]pub struct AtomicU32 { /* private fields */ }
An integer type which can be safely shared between threads. This type has the same size and bit validity as the underlying integer type, u32. However, the alignment of this type is always equal to its size, even on targets where u32 has a lesser alignment. For more about the differences between atomic types and non-atomic types as well as information about the portability of this type, please see the module-level documentation. Note: This type is only available on platforms that support atomic loads and stores of u32. Implementations
sourceimpl AtomicU32
1.34.0 (const: 1.34.0)sourcepub const fn new(v: u32) -> AtomicU32
Creates a new atomic integer. Examples use std::sync::atomic::AtomicU32;
let atomic_forty_two = AtomicU32::new(42); 
1.75.0 (const: unstable)sourcepub unsafe fn from_ptr<'a>(ptr: *mut u32) -> &'a AtomicU32
Creates a new reference to an atomic integer from a pointer. Examples use std::sync::atomic::{self, AtomicU32};
// Get a pointer to an allocated value
let ptr: *mut u32 = Box::into_raw(Box::new(0));
assert!(ptr.cast::<AtomicU32>().is_aligned());
{
    // Create an atomic view of the allocated value
    let atomic = unsafe {AtomicU32::from_ptr(ptr) };
    // Use `atomic` for atomic operations, possibly share it with other threads
    atomic.store(1, atomic::Ordering::Relaxed);
}
// It's ok to non-atomically access the value behind `ptr`,
// since the reference to the atomic ended its lifetime in the block above
assert_eq!(unsafe { *ptr }, 1);
// Deallocate the value
unsafe { drop(Box::from_raw(ptr)) } Safety  
ptr must be aligned to align_of::<AtomicU32>() (note that on some platforms this can be bigger than align_of::<u32>()). 
ptr must be valid for both reads and writes for the whole lifetime 'a. You must adhere to the Memory model for atomic accesses. In particular, it is not allowed to mix atomic and non-atomic accesses, or atomic accesses of different sizes, without synchronization.  
1.34.0sourcepub fn get_mut(&mut self) -> &mut u32
Returns a mutable reference to the underlying integer. This is safe because the mutable reference guarantees that no other threads are concurrently accessing the atomic data. Examples use std::sync::atomic::{AtomicU32, Ordering};
let mut some_var = AtomicU32::new(10);
assert_eq!(*some_var.get_mut(), 10);
*some_var.get_mut() = 5;
assert_eq!(some_var.load(Ordering::SeqCst), 5); 
sourcepub fn from_mut(v: &mut u32) -> &mut AtomicU32
ðŸ”¬This is a nightly-only experimental API. (atomic_from_mut #76314)
Get atomic access to a &mut u32. Note: This function is only available on targets where u32 has an alignment of 4 bytes. Examples #![feature(atomic_from_mut)]
use std::sync::atomic::{AtomicU32, Ordering};
let mut some_int = 123;
let a = AtomicU32::from_mut(&mut some_int);
a.store(100, Ordering::Relaxed);
assert_eq!(some_int, 100); 
sourcepub fn get_mut_slice(this: &mut [AtomicU32]) -> &mut [u32]
ðŸ”¬This is a nightly-only experimental API. (atomic_from_mut #76314)
Get non-atomic access to a &mut [AtomicU32] slice This is safe because the mutable reference guarantees that no other threads are concurrently accessing the atomic data. Examples #![feature(atomic_from_mut)]
use std::sync::atomic::{AtomicU32, Ordering};
let mut some_ints = [const { AtomicU32::new(0) }; 10];
let view: &mut [u32] = AtomicU32::get_mut_slice(&mut some_ints);
assert_eq!(view, [0; 10]);
view
    .iter_mut()
    .enumerate()
    .for_each(|(idx, int)| *int = idx as _);
std::thread::scope(|s| {
    some_ints
        .iter()
        .enumerate()
        .for_each(|(idx, int)| {
            s.spawn(move || assert_eq!(int.load(Ordering::Relaxed), idx as _));
        })
}); 
sourcepub fn from_mut_slice(v: &mut [u32]) -> &mut [AtomicU32]
ðŸ”¬This is a nightly-only experimental API. (atomic_from_mut #76314)
Get atomic access to a &mut [u32] slice. Examples #![feature(atomic_from_mut)]
use std::sync::atomic::{AtomicU32, Ordering};
let mut some_ints = [0; 10];
let a = &*AtomicU32::from_mut_slice(&mut some_ints);
std::thread::scope(|s| {
    for i in 0..a.len() {
        s.spawn(move || a[i].store(i as _, Ordering::Relaxed));
    }
});
for (i, n) in some_ints.into_iter().enumerate() {
    assert_eq!(i, n as usize);
} 
1.34.0 (const: 1.79.0)sourcepub const fn into_inner(self) -> u32
Consumes the atomic and returns the contained value. This is safe because passing self by value guarantees that no other threads are concurrently accessing the atomic data. Examples use std::sync::atomic::AtomicU32;
let some_var = AtomicU32::new(5);
assert_eq!(some_var.into_inner(), 5); 
1.34.0sourcepub fn load(&self, order: Ordering) -> u32
Loads a value from the atomic integer. load takes an Ordering argument which describes the memory ordering of this operation. Possible values are SeqCst, Acquire and Relaxed. Panics Panics if order is Release or AcqRel. Examples use std::sync::atomic::{AtomicU32, Ordering};
let some_var = AtomicU32::new(5);
assert_eq!(some_var.load(Ordering::Relaxed), 5); 
1.34.0sourcepub fn store(&self, val: u32, order: Ordering)
Stores a value into the atomic integer. store takes an Ordering argument which describes the memory ordering of this operation. Possible values are SeqCst, Release and Relaxed. Panics Panics if order is Acquire or AcqRel. Examples use std::sync::atomic::{AtomicU32, Ordering};
let some_var = AtomicU32::new(5);
some_var.store(10, Ordering::Relaxed);
assert_eq!(some_var.load(Ordering::Relaxed), 10); 
1.34.0sourcepub fn swap(&self, val: u32, order: Ordering) -> u32
Stores a value into the atomic integer, returning the previous value. swap takes an Ordering argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using Acquire makes the store part of this operation Relaxed, and using Release makes the load part Relaxed. Note: This method is only available on platforms that support atomic operations on u32. Examples use std::sync::atomic::{AtomicU32, Ordering};
let some_var = AtomicU32::new(5);
assert_eq!(some_var.swap(10, Ordering::Relaxed), 5); 
1.34.0sourcepub fn compare_and_swap(&self, current: u32, new: u32, order: Ordering) -> u32
ðŸ‘ŽDeprecated since 1.50.0: Use compare_exchange or compare_exchange_weak instead
Stores a value into the atomic integer if the current value is the same as the current value. The return value is always the previous value. If it is equal to current, then the value was updated. compare_and_swap also takes an Ordering argument which describes the memory ordering of this operation. Notice that even when using AcqRel, the operation might fail and hence just perform an Acquire load, but not have Release semantics. Using Acquire makes the store part of this operation Relaxed if it happens, and using Release makes the load part Relaxed. Note: This method is only available on platforms that support atomic operations on u32. Migrating to compare_exchange and compare_exchange_weak
 compare_and_swap is equivalent to compare_exchange with the following mapping for memory orderings: 

Original
Success
Failure
 
Relaxed
Relaxed
Relaxed
 
Acquire
Acquire
Acquire
 
Release
Release
Relaxed
 
AcqRel
AcqRel
Acquire
 
SeqCst
SeqCst
SeqCst
 
  compare_exchange_weak is allowed to fail spuriously even when the comparison succeeds, which allows the compiler to generate better assembly code when the compare and swap is used in a loop. Examples use std::sync::atomic::{AtomicU32, Ordering};
let some_var = AtomicU32::new(5);
assert_eq!(some_var.compare_and_swap(5, 10, Ordering::Relaxed), 5);
assert_eq!(some_var.load(Ordering::Relaxed), 10);
assert_eq!(some_var.compare_and_swap(6, 12, Ordering::Relaxed), 10);
assert_eq!(some_var.load(Ordering::Relaxed), 10); 
1.34.0sourcepub fn compare_exchange(
    &self,
    current: u32,
    new: u32,
    success: Ordering,
    failure: Ordering,
) -> Result<u32, u32>
Stores a value into the atomic integer if the current value is the same as the current value. The return value is a result indicating whether the new value was written and containing the previous value. On success this value is guaranteed to be equal to current. compare_exchange takes two Ordering arguments to describe the memory ordering of this operation. success describes the required ordering for the read-modify-write operation that takes place if the comparison with current succeeds. failure describes the required ordering for the load operation that takes place when the comparison fails. Using Acquire as success ordering makes the store part of this operation Relaxed, and using Release makes the successful load Relaxed. The failure ordering can only be SeqCst, Acquire or Relaxed. Note: This method is only available on platforms that support atomic operations on u32. Examples use std::sync::atomic::{AtomicU32, Ordering};
let some_var = AtomicU32::new(5);
assert_eq!(some_var.compare_exchange(5, 10,
                                     Ordering::Acquire,
                                     Ordering::Relaxed),
           Ok(5));
assert_eq!(some_var.load(Ordering::Relaxed), 10);
assert_eq!(some_var.compare_exchange(6, 12,
                                     Ordering::SeqCst,
                                     Ordering::Acquire),
           Err(10));
assert_eq!(some_var.load(Ordering::Relaxed), 10); 
1.34.0sourcepub fn compare_exchange_weak(
    &self,
    current: u32,
    new: u32,
    success: Ordering,
    failure: Ordering,
) -> Result<u32, u32>
Stores a value into the atomic integer if the current value is the same as the current value. Unlike AtomicU32::compare_exchange, this function is allowed to spuriously fail even when the comparison succeeds, which can result in more efficient code on some platforms. The return value is a result indicating whether the new value was written and containing the previous value. compare_exchange_weak takes two Ordering arguments to describe the memory ordering of this operation. success describes the required ordering for the read-modify-write operation that takes place if the comparison with current succeeds. failure describes the required ordering for the load operation that takes place when the comparison fails. Using Acquire as success ordering makes the store part of this operation Relaxed, and using Release makes the successful load Relaxed. The failure ordering can only be SeqCst, Acquire or Relaxed. Note: This method is only available on platforms that support atomic operations on u32. Examples use std::sync::atomic::{AtomicU32, Ordering};
let val = AtomicU32::new(4);
let mut old = val.load(Ordering::Relaxed);
loop {
    let new = old * 2;
    match val.compare_exchange_weak(old, new, Ordering::SeqCst, Ordering::Relaxed) {
        Ok(_) => break,
        Err(x) => old = x,
    }
} 
1.34.0sourcepub fn fetch_add(&self, val: u32, order: Ordering) -> u32
Adds to the current value, returning the previous value. This operation wraps around on overflow. fetch_add takes an Ordering argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using Acquire makes the store part of this operation Relaxed, and using Release makes the load part Relaxed. Note: This method is only available on platforms that support atomic operations on u32. Examples use std::sync::atomic::{AtomicU32, Ordering};
let foo = AtomicU32::new(0);
assert_eq!(foo.fetch_add(10, Ordering::SeqCst), 0);
assert_eq!(foo.load(Ordering::SeqCst), 10); 
1.34.0sourcepub fn fetch_sub(&self, val: u32, order: Ordering) -> u32
Subtracts from the current value, returning the previous value. This operation wraps around on overflow. fetch_sub takes an Ordering argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using Acquire makes the store part of this operation Relaxed, and using Release makes the load part Relaxed. Note: This method is only available on platforms that support atomic operations on u32. Examples use std::sync::atomic::{AtomicU32, Ordering};
let foo = AtomicU32::new(20);
assert_eq!(foo.fetch_sub(10, Ordering::SeqCst), 20);
assert_eq!(foo.load(Ordering::SeqCst), 10); 
1.34.0sourcepub fn fetch_and(&self, val: u32, order: Ordering) -> u32
Bitwise â€œandâ€ with the current value. Performs a bitwise â€œandâ€ operation on the current value and the argument val, and sets the new value to the result. Returns the previous value. fetch_and takes an Ordering argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using Acquire makes the store part of this operation Relaxed, and using Release makes the load part Relaxed. Note: This method is only available on platforms that support atomic operations on u32. Examples use std::sync::atomic::{AtomicU32, Ordering};
let foo = AtomicU32::new(0b101101);
assert_eq!(foo.fetch_and(0b110011, Ordering::SeqCst), 0b101101);
assert_eq!(foo.load(Ordering::SeqCst), 0b100001); 
1.34.0sourcepub fn fetch_nand(&self, val: u32, order: Ordering) -> u32
Bitwise â€œnandâ€ with the current value. Performs a bitwise â€œnandâ€ operation on the current value and the argument val, and sets the new value to the result. Returns the previous value. fetch_nand takes an Ordering argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using Acquire makes the store part of this operation Relaxed, and using Release makes the load part Relaxed. Note: This method is only available on platforms that support atomic operations on u32. Examples use std::sync::atomic::{AtomicU32, Ordering};
let foo = AtomicU32::new(0x13);
assert_eq!(foo.fetch_nand(0x31, Ordering::SeqCst), 0x13);
assert_eq!(foo.load(Ordering::SeqCst), !(0x13 & 0x31)); 
1.34.0sourcepub fn fetch_or(&self, val: u32, order: Ordering) -> u32
Bitwise â€œorâ€ with the current value. Performs a bitwise â€œorâ€ operation on the current value and the argument val, and sets the new value to the result. Returns the previous value. fetch_or takes an Ordering argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using Acquire makes the store part of this operation Relaxed, and using Release makes the load part Relaxed. Note: This method is only available on platforms that support atomic operations on u32. Examples use std::sync::atomic::{AtomicU32, Ordering};
let foo = AtomicU32::new(0b101101);
assert_eq!(foo.fetch_or(0b110011, Ordering::SeqCst), 0b101101);
assert_eq!(foo.load(Ordering::SeqCst), 0b111111); 
1.34.0sourcepub fn fetch_xor(&self, val: u32, order: Ordering) -> u32
Bitwise â€œxorâ€ with the current value. Performs a bitwise â€œxorâ€ operation on the current value and the argument val, and sets the new value to the result. Returns the previous value. fetch_xor takes an Ordering argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using Acquire makes the store part of this operation Relaxed, and using Release makes the load part Relaxed. Note: This method is only available on platforms that support atomic operations on u32. Examples use std::sync::atomic::{AtomicU32, Ordering};
let foo = AtomicU32::new(0b101101);
assert_eq!(foo.fetch_xor(0b110011, Ordering::SeqCst), 0b101101);
assert_eq!(foo.load(Ordering::SeqCst), 0b011110); 
1.45.0sourcepub fn fetch_update<F>(
    &self,
    set_order: Ordering,
    fetch_order: Ordering,
    f: F,
) -> Result<u32, u32>where
    F: FnMut(u32) -> Option<u32>,
Fetches the value, and applies a function to it that returns an optional new value. Returns a Result of Ok(previous_value) if the function returned Some(_), else Err(previous_value). Note: This may call the function multiple times if the value has been changed from other threads in the meantime, as long as the function returns Some(_), but the function will have been applied only once to the stored value. fetch_update takes two Ordering arguments to describe the memory ordering of this operation. The first describes the required ordering for when the operation finally succeeds while the second describes the required ordering for loads. These correspond to the success and failure orderings of AtomicU32::compare_exchange respectively. Using Acquire as success ordering makes the store part of this operation Relaxed, and using Release makes the final successful load Relaxed. The (failed) load ordering can only be SeqCst, Acquire or Relaxed. Note: This method is only available on platforms that support atomic operations on u32. Considerations This method is not magic; it is not provided by the hardware. It is implemented in terms of AtomicU32::compare_exchange_weak, and suffers from the same drawbacks. In particular, this method will not circumvent the ABA Problem. Examples use std::sync::atomic::{AtomicU32, Ordering};
let x = AtomicU32::new(7);
assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |_| None), Err(7));
assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(7));
assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(8));
assert_eq!(x.load(Ordering::SeqCst), 9); 
1.45.0sourcepub fn fetch_max(&self, val: u32, order: Ordering) -> u32
Maximum with the current value. Finds the maximum of the current value and the argument val, and sets the new value to the result. Returns the previous value. fetch_max takes an Ordering argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using Acquire makes the store part of this operation Relaxed, and using Release makes the load part Relaxed. Note: This method is only available on platforms that support atomic operations on u32. Examples use std::sync::atomic::{AtomicU32, Ordering};
let foo = AtomicU32::new(23);
assert_eq!(foo.fetch_max(42, Ordering::SeqCst), 23);
assert_eq!(foo.load(Ordering::SeqCst), 42); If you want to obtain the maximum value in one step, you can use the following: use std::sync::atomic::{AtomicU32, Ordering};
let foo = AtomicU32::new(23);
let bar = 42;
let max_foo = foo.fetch_max(bar, Ordering::SeqCst).max(bar);
assert!(max_foo == 42); 
1.45.0sourcepub fn fetch_min(&self, val: u32, order: Ordering) -> u32
Minimum with the current value. Finds the minimum of the current value and the argument val, and sets the new value to the result. Returns the previous value. fetch_min takes an Ordering argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using Acquire makes the store part of this operation Relaxed, and using Release makes the load part Relaxed. Note: This method is only available on platforms that support atomic operations on u32. Examples use std::sync::atomic::{AtomicU32, Ordering};
let foo = AtomicU32::new(23);
assert_eq!(foo.fetch_min(42, Ordering::Relaxed), 23);
assert_eq!(foo.load(Ordering::Relaxed), 23);
assert_eq!(foo.fetch_min(22, Ordering::Relaxed), 23);
assert_eq!(foo.load(Ordering::Relaxed), 22); If you want to obtain the minimum value in one step, you can use the following: use std::sync::atomic::{AtomicU32, Ordering};
let foo = AtomicU32::new(23);
let bar = 12;
let min_foo = foo.fetch_min(bar, Ordering::SeqCst).min(bar);
assert_eq!(min_foo, 12); 
1.70.0 (const: 1.70.0)sourcepub const fn as_ptr(&self) -> *mut u32
Returns a mutable pointer to the underlying integer. Doing non-atomic reads and writes on the resulting integer can be a data race. This method is mostly useful for FFI, where the function signature may use *mut u32 instead of &AtomicU32. Returning an *mut pointer from a shared reference to this atomic is safe because the atomic types work with interior mutability. All modifications of an atomic change the value through a shared reference, and can do so safely as long as they use atomic operations. Any use of the returned raw pointer requires an unsafe block and still has to uphold the same restriction: operations on it must be atomic. Examples â“˜use std::sync::atomic::AtomicU32;
extern "C" {
    fn my_atomic_op(arg: *mut u32);
}
let atomic = AtomicU32::new(1);
// SAFETY: Safe as long as `my_atomic_op` is atomic.
unsafe {
    my_atomic_op(atomic.as_ptr());
}
 

Trait Implementations
1.34.0sourceimpl Debug for AtomicU32
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.34.0sourceimpl Default for AtomicU32
sourcefn default() -> AtomicU32Returns the â€œdefault valueâ€ for a type. Read more

1.34.0sourceimpl From<u32> for AtomicU32
sourcefn from(v: u32) -> AtomicU32
Converts an u32 into an AtomicU32. 
1.34.0sourceimpl RefUnwindSafe for AtomicU321.34.0sourceimpl Sync for AtomicU32
Auto Trait Implementations
impl !Freeze for AtomicU32impl Send for AtomicU32impl Unpin for AtomicU32impl UnwindSafe for AtomicU32
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU32.html


std/fmt/struct.debugset
-----------------------------------------------------------
Struct DebugSet
pub struct DebugSet<'a, 'b>where
    'b: 'a,{ /* private fields */ }
A struct to help with fmt::Debug implementations. This is useful when you wish to output a formatted set of items as a part of your Debug::fmt implementation. This can be constructed by the Formatter::debug_set method. Examples use std::fmt;
struct Foo(Vec<i32>);
impl fmt::Debug for Foo {
    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        fmt.debug_set().entries(self.0.iter()).finish()
    }
}
assert_eq!(
    format!("{:?}", Foo(vec![10, 11])),
    "{10, 11}",
); Implementations
sourceimpl<'a, 'b> DebugSet<'a, 'b>where
    'b: 'a,
1.2.0sourcepub fn entry(&mut self, entry: &dyn Debug) -> &mut DebugSet<'a, 'b>
Adds a new entry to the set output. Examples use std::fmt;
struct Foo(Vec<i32>, Vec<u32>);
impl fmt::Debug for Foo {
    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        fmt.debug_set()
           .entry(&self.0) // Adds the first "entry".
           .entry(&self.1) // Adds the second "entry".
           .finish()
    }
}
assert_eq!(
    format!("{:?}", Foo(vec![10, 11], vec![12, 13])),
    "{[10, 11], [12, 13]}",
); 
sourcepub fn entry_with<F>(&mut self, entry_fmt: F) -> &mut DebugSet<'a, 'b>where
    F: FnOnce(&mut Formatter<'_>) -> Result<(), Error>,
ðŸ”¬This is a nightly-only experimental API. (debug_closure_helpers #117729)
Adds a new entry to the set output. This method is equivalent to DebugSet::entry, but formats the entry using a provided closure rather than by calling Debug::fmt. 
1.2.0sourcepub fn entries<D, I>(&mut self, entries: I) -> &mut DebugSet<'a, 'b>where
    D: Debug,
    I: IntoIterator<Item = D>,
Adds the contents of an iterator of entries to the set output. Examples use std::fmt;
struct Foo(Vec<i32>, Vec<u32>);
impl fmt::Debug for Foo {
    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        fmt.debug_set()
           .entries(self.0.iter()) // Adds the first "entry".
           .entries(self.1.iter()) // Adds the second "entry".
           .finish()
    }
}
assert_eq!(
    format!("{:?}", Foo(vec![10, 11], vec![12, 13])),
    "{10, 11, 12, 13}",
); 
1.83.0sourcepub fn finish_non_exhaustive(&mut self) -> Result<(), Error>
Marks the set as non-exhaustive, indicating to the reader that there are some other elements that are not shown in the debug representation. Examples use std::fmt;
struct Foo(Vec<i32>);
impl fmt::Debug for Foo {
    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        // Print at most two elements, abbreviate the rest
        let mut f = fmt.debug_set();
        let mut f = f.entries(self.0.iter().take(2));
        if self.0.len() > 2 {
            f.finish_non_exhaustive()
        } else {
            f.finish()
        }
    }
}
assert_eq!(
    format!("{:?}", Foo(vec![1, 2, 3, 4])),
    "{1, 2, ..}",
); 
1.2.0sourcepub fn finish(&mut self) -> Result<(), Error>
Finishes output and returns any error encountered. Examples use std::fmt;
struct Foo(Vec<i32>);
impl fmt::Debug for Foo {
    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        fmt.debug_set()
           .entries(self.0.iter())
           .finish() // Ends the set formatting.
    }
}
assert_eq!(
    format!("{:?}", Foo(vec![10, 11])),
    "{10, 11}",
); 

Auto Trait Implementations
impl<'a, 'b> Freeze for DebugSet<'a, 'b>impl<'a, 'b> !RefUnwindSafe for DebugSet<'a, 'b>impl<'a, 'b> !Send for DebugSet<'a, 'b>impl<'a, 'b> !Sync for DebugSet<'a, 'b>impl<'a, 'b> Unpin for DebugSet<'a, 'b>impl<'a, 'b> !UnwindSafe for DebugSet<'a, 'b>
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/fmt/struct.DebugSet.html


reference/expressions/match-expr
-----------------------------------------------------------
match expressions  Syntax MatchExpression : match Scrutinee { InnerAttribute* MatchArms? } Scrutinee : Expressionexcept struct expression MatchArms : ( MatchArm => ( ExpressionWithoutBlock , | ExpressionWithBlock ,? ) )* MatchArm => Expression ,? MatchArm : OuterAttribute* Pattern MatchArmGuard? MatchArmGuard : if Expression  A match expression branches on a pattern. The exact form of matching that occurs depends on the pattern. A match expression has a scrutinee expression, which is the value to compare to the patterns. The scrutinee expression and the patterns must have the same type. A match behaves differently depending on whether or not the scrutinee expression is a place expression or value expression. If the scrutinee expression is a value expression, it is first evaluated into a temporary location, and the resulting value is sequentially compared to the patterns in the arms until a match is found. The first arm with a matching pattern is chosen as the branch target of the match, any variables bound by the pattern are assigned to local variables in the armâ€™s block, and control enters the block. When the scrutinee expression is a place expression, the match does not allocate a temporary location; however, a by-value binding may copy or move from the memory location. When possible, it is preferable to match on place expressions, as the lifetime of these matches inherits the lifetime of the place expression rather than being restricted to the inside of the match. An example of a match expression: #![allow(unused)]
fn main() {
let x = 1;
match x {
    1 => println!("one"),
    2 => println!("two"),
    3 => println!("three"),
    4 => println!("four"),
    5 => println!("five"),
    _ => println!("something else"),
}
} Variables bound within the pattern are scoped to the match guard and the armâ€™s expression. The binding mode (move, copy, or reference) depends on the pattern. Multiple match patterns may be joined with the | operator. Each pattern will be tested in left-to-right sequence until a successful match is found. #![allow(unused)]
fn main() {
let x = 9;
let message = match x {
    0 | 1  => "not many",
    2 ..= 9 => "a few",
    _      => "lots"
};
assert_eq!(message, "a few");
// Demonstration of pattern match order.
struct S(i32, i32);
match S(1, 2) {
    S(z @ 1, _) | S(_, z @ 2) => assert_eq!(z, 1),
    _ => panic!(),
}
}  Note: The 2..=9 is a Range Pattern, not a Range Expression. Thus, only those types of ranges supported by range patterns can be used in match arms.  Every binding in each | separated pattern must appear in all of the patterns in the arm. Every binding of the same name must have the same type, and have the same binding mode. Match guards Match arms can accept match guards to further refine the criteria for matching a case. Pattern guards appear after the pattern and consist of a bool-typed expression following the if keyword. When the pattern matches successfully, the pattern guard expression is executed. If the expression evaluates to true, the pattern is successfully matched against. Otherwise, the next pattern, including other matches with the | operator in the same arm, is tested. #![allow(unused)]
fn main() {
let maybe_digit = Some(0);
fn process_digit(i: i32) { }
fn process_other(i: i32) { }
let message = match maybe_digit {
    Some(x) if x < 10 => process_digit(x),
    Some(x) => process_other(x),
    None => panic!(),
};
}  Note: Multiple matches using the | operator can cause the pattern guard and the side effects it has to execute multiple times. For example: #![allow(unused)]
fn main() {
use std::cell::Cell;
let i : Cell<i32> = Cell::new(0);
match 1 {
    1 | _ if { i.set(i.get() + 1); false } => {}
    _ => {}
}
assert_eq!(i.get(), 2);
}  A pattern guard may refer to the variables bound within the pattern they follow. Before evaluating the guard, a shared reference is taken to the part of the scrutinee the variable matches on. While evaluating the guard, this shared reference is then used when accessing the variable. Only when the guard evaluates to true is the value moved, or copied, from the scrutinee into the variable. This allows shared borrows to be used inside guards without moving out of the scrutinee in case guard fails to match. Moreover, by holding a shared reference while evaluating the guard, mutation inside guards is also prevented. Attributes on match arms Outer attributes are allowed on match arms. The only attributes that have meaning on match arms are cfg and the lint check attributes. Inner attributes are allowed directly after the opening brace of the match expression in the same expression contexts as attributes on block expressions.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/reference/expressions/match-expr.html


std/simd/type.u16x2
-----------------------------------------------------------
Type Alias u16x2
pub type u16x2 = Simd<u16, 2>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with two elements of type u16. Aliased Type
struct u16x2(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/type.u16x2.html


std/str/struct.bytes
-----------------------------------------------------------
Struct Bytes
pub struct Bytes<'a>(/* private fields */);
An iterator over the bytes of a string slice. This struct is created by the bytes method on str. See its documentation for more. Trait Implementations
1.0.0sourceimpl<'a> Clone for Bytes<'a>
sourcefn clone(&self) -> Bytes<'a> â“˜Returns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.0.0sourceimpl<'a> Debug for Bytes<'a>
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.0.0sourceimpl DoubleEndedIterator for Bytes<'_>
sourcefn next_back(&mut self) -> Option<u8>Removes and returns an element from the end of the iterator. Read more
sourcefn nth_back(&mut self, n: usize) -> Option<<Bytes<'_> as Iterator>::Item>Returns the nth element from the end of the iterator. Read more
sourcefn rfind<P>(&mut self, predicate: P) -> Option<<Bytes<'_> as Iterator>::Item>where
    P: FnMut(&<Bytes<'_> as Iterator>::Item) -> bool,Searches for an element of an iterator from the back that satisfies a predicate. Read more
sourcefn advance_back_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator from the back by n elements. Read more
1.27.0sourcefn try_rfold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> R,
    R: Try<Output = B>,This is the reverse version of Iterator::try_fold(): it takes elements starting from the back of the iterator. Read more
1.27.0sourcefn rfold<B, F>(self, init: B, f: F) -> Bwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> B,An iterator method that reduces the iteratorâ€™s elements to a single, final value, starting from the back. Read more

1.0.0sourceimpl ExactSizeIterator for Bytes<'_>
sourcefn len(&self) -> usizeReturns the exact remaining length of the iterator. Read more
sourcefn is_empty(&self) -> bool
ðŸ”¬This is a nightly-only experimental API. (exact_size_is_empty #35428)
Returns true if the iterator is empty. Read more

1.0.0sourceimpl Iterator for Bytes<'_>
sourcetype Item = u8The type of the elements being iterated over.
sourcefn next(&mut self) -> Option<u8>Advances the iterator and returns the next value. Read more
sourcefn size_hint(&self) -> (usize, Option<usize>)Returns the bounds on the remaining length of the iterator. Read more
sourcefn count(self) -> usizeConsumes the iterator, counting the number of iterations and returning it. Read more
sourcefn last(self) -> Option<<Bytes<'_> as Iterator>::Item>Consumes the iterator, returning the last element. Read more
sourcefn nth(&mut self, n: usize) -> Option<<Bytes<'_> as Iterator>::Item>Returns the nth element of the iterator. Read more
sourcefn all<F>(&mut self, f: F) -> boolwhere
    F: FnMut(<Bytes<'_> as Iterator>::Item) -> bool,Tests if every element of the iterator matches a predicate. Read more
sourcefn any<F>(&mut self, f: F) -> boolwhere
    F: FnMut(<Bytes<'_> as Iterator>::Item) -> bool,Tests if any element of the iterator matches a predicate. Read more
sourcefn find<P>(&mut self, predicate: P) -> Option<<Bytes<'_> as Iterator>::Item>where
    P: FnMut(&<Bytes<'_> as Iterator>::Item) -> bool,Searches for an element of an iterator that satisfies a predicate. Read more
sourcefn position<P>(&mut self, predicate: P) -> Option<usize>where
    P: FnMut(<Bytes<'_> as Iterator>::Item) -> bool,Searches for an element in an iterator, returning its index. Read more
sourcefn rposition<P>(&mut self, predicate: P) -> Option<usize>where
    P: FnMut(<Bytes<'_> as Iterator>::Item) -> bool,Searches for an element in an iterator from the right, returning its index. Read more
sourcefn next_chunk<const N: usize>(
    &mut self,
) -> Result<[Self::Item; N], IntoIter<Self::Item, N>>where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_next_chunk #98326)
Advances the iterator and returns an array containing the next N values. Read more
sourcefn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator by n elements. Read more
1.28.0sourcefn step_by(self, step: usize) -> StepBy<Self> â“˜where
    Self: Sized,Creates an iterator starting at the same point, but stepping by the given amount at each iteration. Read more
1.0.0sourcefn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator<Item = Self::Item>,Takes two iterators and creates a new iterator over both in sequence. Read more
1.0.0sourcefn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator,â€˜Zips upâ€™ two iterators into a single iterator of pairs. Read more
sourcefn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G> â“˜where
    Self: Sized,
    G: FnMut() -> Self::Item,
ðŸ”¬This is a nightly-only experimental API. (iter_intersperse #79524)
Creates a new iterator which places an item generated by separator between adjacent items of the original iterator. Read more
1.0.0sourcefn map<B, F>(self, f: F) -> Map<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> B,Takes a closure and creates an iterator which calls that closure on each element. Read more
1.21.0sourcefn for_each<F>(self, f: F)where
    Self: Sized,
    F: FnMut(Self::Item),Calls a closure on each element of an iterator. Read more
1.0.0sourcefn filter<P>(self, predicate: P) -> Filter<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator which uses a closure to determine if an element should be yielded. Read more
1.0.0sourcefn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Creates an iterator that both filters and maps. Read more
1.0.0sourcefn enumerate(self) -> Enumerate<Self> â“˜where
    Self: Sized,Creates an iterator which gives the current iteration count as well as the next value. Read more
1.0.0sourcefn peekable(self) -> Peekable<Self> â“˜where
    Self: Sized,Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information. Read more
1.0.0sourcefn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that skips elements based on a predicate. Read more
1.0.0sourcefn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that yields elements based on a predicate. Read more
1.57.0sourcefn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(Self::Item) -> Option<B>,Creates an iterator that both yields elements based on a predicate and maps. Read more
1.0.0sourcefn skip(self, n: usize) -> Skip<Self> â“˜where
    Self: Sized,Creates an iterator that skips the first n elements. Read more
1.0.0sourcefn take(self, n: usize) -> Take<Self> â“˜where
    Self: Sized,Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner. Read more
1.0.0sourcefn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> â“˜where
    Self: Sized,
    F: FnMut(&mut St, Self::Item) -> Option<B>,An iterator adapter which, like fold, holds internal state, but unlike fold, produces a new iterator. Read more
1.0.0sourcefn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F> â“˜where
    Self: Sized,
    U: IntoIterator,
    F: FnMut(Self::Item) -> U,Creates an iterator that works like map, but flattens nested structure. Read more
sourcefn map_windows<F, R, const N: usize>(self, f: F) -> MapWindows<Self, F, N> â“˜where
    Self: Sized,
    F: FnMut(&[Self::Item; N]) -> R,
ðŸ”¬This is a nightly-only experimental API. (iter_map_windows #87155)
Calls the given function f for each contiguous window of size N over self and returns an iterator over the outputs of f. Like slice::windows(), the windows during mapping overlap as well. Read more
1.0.0sourcefn fuse(self) -> Fuse<Self> â“˜where
    Self: Sized,Creates an iterator which ends after the first None. Read more
1.0.0sourcefn inspect<F>(self, f: F) -> Inspect<Self, F> â“˜where
    Self: Sized,
    F: FnMut(&Self::Item),Does something with each element of an iterator, passing the value on. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Borrows an iterator, rather than consuming it. Read more
1.0.0sourcefn collect<B>(self) -> Bwhere
    B: FromIterator<Self::Item>,
    Self: Sized,Transforms an iterator into a collection. Read more
sourcefn collect_into<E>(self, collection: &mut E) -> &mut Ewhere
    E: Extend<Self::Item>,
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_collect_into #94780)
Collects all the items from an iterator into a collection. Read more
1.0.0sourcefn partition<B, F>(self, f: F) -> (B, B)where
    Self: Sized,
    B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool,Consumes an iterator, creating two collections from it. Read more
sourcefn partition_in_place<'a, T, P>(self, predicate: P) -> usizewhere
    T: 'a,
    Self: Sized + DoubleEndedIterator<Item = &'a mut T>,
    P: FnMut(&T) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_partition_in_place #62543)
Reorders the elements of this iterator in-place according to the given predicate, such that all those that return true precede all those that return false. Returns the number of true elements found. Read more
sourcefn is_partitioned<P>(self, predicate: P) -> boolwhere
    Self: Sized,
    P: FnMut(Self::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_is_partitioned #62544)
Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false. Read more
1.27.0sourcefn try_fold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> R,
    R: Try<Output = B>,An iterator method that applies a function as long as it returns successfully, producing a single, final value. Read more
1.27.0sourcefn try_for_each<F, R>(&mut self, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(Self::Item) -> R,
    R: Try<Output = ()>,An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. Read more
1.0.0sourcefn fold<B, F>(self, init: B, f: F) -> Bwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> B,Folds every element into an accumulator by applying an operation, returning the final result. Read more
1.51.0sourcefn reduce<F>(self, f: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(Self::Item, Self::Item) -> Self::Item,Reduces the elements to a single one, by repeatedly applying a reducing operation. Read more
sourcefn try_reduce<R>(
    &mut self,
    f: impl FnMut(Self::Item, Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = Self::Item>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (iterator_try_reduce #87053)
Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. Read more
1.30.0sourcefn find_map<B, F>(&mut self, f: F) -> Option<B>where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Applies function to the elements of iterator and returns the first non-none result. Read more
sourcefn try_find<R>(
    &mut self,
    f: impl FnMut(&Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = bool>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (try_find #63178)
Applies function to the elements of iterator and returns the first true result or the first error. Read more
1.6.0sourcefn max_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the maximum value from the specified function. Read more
1.15.0sourcefn max_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the maximum value with respect to the specified comparison function. Read more
1.6.0sourcefn min_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the minimum value from the specified function. Read more
1.15.0sourcefn min_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the minimum value with respect to the specified comparison function. Read more
1.0.0sourcefn rev(self) -> Rev<Self> â“˜where
    Self: Sized + DoubleEndedIterator,Reverses an iteratorâ€™s direction. Read more
1.0.0sourcefn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)where
    FromA: Default + Extend<A>,
    FromB: Default + Extend<B>,
    Self: Sized + Iterator<Item = (A, B)>,Converts an iterator of pairs into a pair of containers. Read more
1.36.0sourcefn copied<'a, T>(self) -> Copied<Self> â“˜where
    T: 'a + Copy,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which copies all of its elements. Read more
1.0.0sourcefn cloned<'a, T>(self) -> Cloned<Self> â“˜where
    T: 'a + Clone,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which clones all of its elements. Read more
1.0.0sourcefn cycle(self) -> Cycle<Self> â“˜where
    Self: Sized + Clone,Repeats an iterator endlessly. Read more
sourcefn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N> â“˜where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_array_chunks #100450)
Returns an iterator over N elements of the iterator at a time. Read more
1.11.0sourcefn sum<S>(self) -> Swhere
    Self: Sized,
    S: Sum<Self::Item>,Sums the elements of an iterator. Read more
1.11.0sourcefn product<P>(self) -> Pwhere
    Self: Sized,
    P: Product<Self::Item>,Iterates over the entire iterator, multiplying all the elements Read more
sourcefn cmp_by<I, F>(self, other: I, cmp: F) -> Orderingwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn partial_cmp<I>(self, other: I) -> Option<Ordering>where
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,
Lexicographically compares the PartialOrd elements of this Iterator with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. Read more
sourcefn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering>where
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Option<Ordering>,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn eq<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are equal to those of another. Read more
sourcefn eq_by<I, F>(self, other: I, eq: F) -> boolwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function. Read more
1.5.0sourcefn ne<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are not equal to those of another. Read more
1.5.0sourcefn lt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less than those of another. Read more
1.5.0sourcefn le<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less or equal to those of another. Read more
1.5.0sourcefn gt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than those of another. Read more
1.5.0sourcefn ge<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than or equal to those of another. Read more
1.82.0sourcefn is_sorted_by<F>(self, compare: F) -> boolwhere
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> bool,Checks if the elements of this iterator are sorted using the given comparator function. Read more
1.82.0sourcefn is_sorted_by_key<F, K>(self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> K,
    K: PartialOrd,Checks if the elements of this iterator are sorted using the given key extraction function. Read more

1.26.0sourceimpl FusedIterator for Bytes<'_>sourceimpl TrustedLen for Bytes<'_>
Auto Trait Implementations
impl<'a> Freeze for Bytes<'a>impl<'a> RefUnwindSafe for Bytes<'a>impl<'a> Send for Bytes<'a>impl<'a> Sync for Bytes<'a>impl<'a> Unpin for Bytes<'a>impl<'a> UnwindSafe for Bytes<'a>
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<I> IntoIterator for Iwhere
    I: Iterator,
sourcetype Item = <I as Iterator>::ItemThe type of the elements being iterated over.
sourcetype IntoIter = IWhich kind of iterator are we turning this into?
sourcefn into_iter(self) -> ICreates an iterator from a value. Read more

sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/str/struct.Bytes.html


std/intrinsics/fn.atomic_xchg_acqrel
-----------------------------------------------------------
Function atomic_xchg_acqrel
pub unsafe extern "rust-intrinsic" fn atomic_xchg_acqrel<T>(
    dst: *mut T,
    src: T,
) -> Twhere
    T: Copy,
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the atomic types via the swap method by passing Ordering::AcqRel as the order. For example, AtomicBool::swap.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.atomic_xchg_acqrel.html


std/net/struct.tcpstream
-----------------------------------------------------------
Struct TcpStream
pub struct TcpStream(/* private fields */);
A TCP stream between a local and a remote socket. After creating a TcpStream by either connecting to a remote host or accepting a connection on a TcpListener, data can be transmitted by reading and writing to it. The connection will be closed when the value is dropped. The reading and writing portions of the connection can also be shut down individually with the shutdown method. The Transmission Control Protocol is specified in IETF RFC 793. Examples use std::io::prelude::*;
use std::net::TcpStream;
fn main() -> std::io::Result<()> {
    let mut stream = TcpStream::connect("127.0.0.1:34254")?;
    stream.write(&[1])?;
    stream.read(&mut [0; 128])?;
    Ok(())
} // the stream is closed here Implementations
sourceimpl TcpStream
1.0.0sourcepub fn connect<A: ToSocketAddrs>(addr: A) -> Result<TcpStream>
Opens a TCP connection to a remote host. addr is an address of the remote host. Anything which implements ToSocketAddrs trait can be supplied for the address; see this trait documentation for concrete examples. If addr yields multiple addresses, connect will be attempted with each of the addresses until a connection is successful. If none of the addresses result in a successful connection, the error returned from the last connection attempt (the last address) is returned. Examples Open a TCP connection to 127.0.0.1:8080: use std::net::TcpStream;
if let Ok(stream) = TcpStream::connect("127.0.0.1:8080") {
    println!("Connected to the server!");
} else {
    println!("Couldn't connect to server...");
} Open a TCP connection to 127.0.0.1:8080. If the connection fails, open a TCP connection to 127.0.0.1:8081: use std::net::{SocketAddr, TcpStream};
let addrs = [
    SocketAddr::from(([127, 0, 0, 1], 8080)),
    SocketAddr::from(([127, 0, 0, 1], 8081)),
];
if let Ok(stream) = TcpStream::connect(&addrs[..]) {
    println!("Connected to the server!");
} else {
    println!("Couldn't connect to server...");
} 
1.21.0sourcepub fn connect_timeout(
    addr: &SocketAddr,
    timeout: Duration,
) -> Result<TcpStream>
Opens a TCP connection to a remote host with a timeout. Unlike connect, connect_timeout takes a single SocketAddr since timeout must be applied to individual addresses. It is an error to pass a zero Duration to this function. Unlike other methods on TcpStream, this does not correspond to a single system call. It instead calls connect in nonblocking mode and then uses an OS-specific mechanism to await the completion of the connection request. 
1.0.0sourcepub fn peer_addr(&self) -> Result<SocketAddr>
Returns the socket address of the remote peer of this TCP connection. Examples use std::net::{Ipv4Addr, SocketAddr, SocketAddrV4, TcpStream};
let stream = TcpStream::connect("127.0.0.1:8080")
                       .expect("Couldn't connect to the server...");
assert_eq!(stream.peer_addr().unwrap(),
           SocketAddr::V4(SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080))); 
1.0.0sourcepub fn local_addr(&self) -> Result<SocketAddr>
Returns the socket address of the local half of this TCP connection. Examples use std::net::{IpAddr, Ipv4Addr, TcpStream};
let stream = TcpStream::connect("127.0.0.1:8080")
                       .expect("Couldn't connect to the server...");
assert_eq!(stream.local_addr().unwrap().ip(),
           IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1))); 
1.0.0sourcepub fn shutdown(&self, how: Shutdown) -> Result<()>
Shuts down the read, write, or both halves of this connection. This function will cause all pending and future I/O on the specified portions to return immediately with an appropriate value (see the documentation of Shutdown). Platform-specific behavior Calling this function multiple times may result in different behavior, depending on the operating system. On Linux, the second call will return Ok(()), but on macOS, it will return ErrorKind::NotConnected. This may change in the future. Examples use std::net::{Shutdown, TcpStream};
let stream = TcpStream::connect("127.0.0.1:8080")
                       .expect("Couldn't connect to the server...");
stream.shutdown(Shutdown::Both).expect("shutdown call failed"); 
1.0.0sourcepub fn try_clone(&self) -> Result<TcpStream>
Creates a new independently owned handle to the underlying socket. The returned TcpStream is a reference to the same stream that this object references. Both handles will read and write the same stream of data, and options set on one stream will be propagated to the other stream. Examples use std::net::TcpStream;
let stream = TcpStream::connect("127.0.0.1:8080")
                       .expect("Couldn't connect to the server...");
let stream_clone = stream.try_clone().expect("clone failed..."); 
1.4.0sourcepub fn set_read_timeout(&self, dur: Option<Duration>) -> Result<()>
Sets the read timeout to the timeout specified. If the value specified is None, then read calls will block indefinitely. An Err is returned if the zero Duration is passed to this method. Platform-specific behavior Platforms may return a different error code whenever a read times out as a result of setting this option. For example Unix typically returns an error of the kind WouldBlock, but Windows may return TimedOut. Examples use std::net::TcpStream;
let stream = TcpStream::connect("127.0.0.1:8080")
                       .expect("Couldn't connect to the server...");
stream.set_read_timeout(None).expect("set_read_timeout call failed"); An Err is returned if the zero Duration is passed to this method: use std::io;
use std::net::TcpStream;
use std::time::Duration;
let stream = TcpStream::connect("127.0.0.1:8080").unwrap();
let result = stream.set_read_timeout(Some(Duration::new(0, 0)));
let err = result.unwrap_err();
assert_eq!(err.kind(), io::ErrorKind::InvalidInput) 
1.4.0sourcepub fn set_write_timeout(&self, dur: Option<Duration>) -> Result<()>
Sets the write timeout to the timeout specified. If the value specified is None, then write calls will block indefinitely. An Err is returned if the zero Duration is passed to this method. Platform-specific behavior Platforms may return a different error code whenever a write times out as a result of setting this option. For example Unix typically returns an error of the kind WouldBlock, but Windows may return TimedOut. Examples use std::net::TcpStream;
let stream = TcpStream::connect("127.0.0.1:8080")
                       .expect("Couldn't connect to the server...");
stream.set_write_timeout(None).expect("set_write_timeout call failed"); An Err is returned if the zero Duration is passed to this method: use std::io;
use std::net::TcpStream;
use std::time::Duration;
let stream = TcpStream::connect("127.0.0.1:8080").unwrap();
let result = stream.set_write_timeout(Some(Duration::new(0, 0)));
let err = result.unwrap_err();
assert_eq!(err.kind(), io::ErrorKind::InvalidInput) 
1.4.0sourcepub fn read_timeout(&self) -> Result<Option<Duration>>
Returns the read timeout of this socket. If the timeout is None, then read calls will block indefinitely. Platform-specific behavior Some platforms do not provide access to the current timeout. Examples use std::net::TcpStream;
let stream = TcpStream::connect("127.0.0.1:8080")
                       .expect("Couldn't connect to the server...");
stream.set_read_timeout(None).expect("set_read_timeout call failed");
assert_eq!(stream.read_timeout().unwrap(), None); 
1.4.0sourcepub fn write_timeout(&self) -> Result<Option<Duration>>
Returns the write timeout of this socket. If the timeout is None, then write calls will block indefinitely. Platform-specific behavior Some platforms do not provide access to the current timeout. Examples use std::net::TcpStream;
let stream = TcpStream::connect("127.0.0.1:8080")
                       .expect("Couldn't connect to the server...");
stream.set_write_timeout(None).expect("set_write_timeout call failed");
assert_eq!(stream.write_timeout().unwrap(), None); 
1.18.0sourcepub fn peek(&self, buf: &mut [u8]) -> Result<usize>
Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked. Successive calls return the same data. This is accomplished by passing MSG_PEEK as a flag to the underlying recv system call. Examples use std::net::TcpStream;
let stream = TcpStream::connect("127.0.0.1:8000")
                       .expect("Couldn't connect to the server...");
let mut buf = [0; 10];
let len = stream.peek(&mut buf).expect("peek failed"); 
sourcepub fn set_linger(&self, linger: Option<Duration>) -> Result<()>
ðŸ”¬This is a nightly-only experimental API. (tcp_linger #88494)
Sets the value of the SO_LINGER option on this socket. This value controls how the socket is closed when data remains to be sent. If SO_LINGER is set, the socket will remain open for the specified duration as the system attempts to send pending data. Otherwise, the system may close the socket immediately, or wait for a default timeout. Examples #![feature(tcp_linger)]
use std::net::TcpStream;
use std::time::Duration;
let stream = TcpStream::connect("127.0.0.1:8080")
                       .expect("Couldn't connect to the server...");
stream.set_linger(Some(Duration::from_secs(0))).expect("set_linger call failed"); 
sourcepub fn linger(&self) -> Result<Option<Duration>>
ðŸ”¬This is a nightly-only experimental API. (tcp_linger #88494)
Gets the value of the SO_LINGER option on this socket. For more information about this option, see TcpStream::set_linger. Examples #![feature(tcp_linger)]
use std::net::TcpStream;
use std::time::Duration;
let stream = TcpStream::connect("127.0.0.1:8080")
                       .expect("Couldn't connect to the server...");
stream.set_linger(Some(Duration::from_secs(0))).expect("set_linger call failed");
assert_eq!(stream.linger().unwrap(), Some(Duration::from_secs(0))); 
1.9.0sourcepub fn set_nodelay(&self, nodelay: bool) -> Result<()>
Sets the value of the TCP_NODELAY option on this socket. If set, this option disables the Nagle algorithm. This means that segments are always sent as soon as possible, even if there is only a small amount of data. When not set, data is buffered until there is a sufficient amount to send out, thereby avoiding the frequent sending of small packets. Examples use std::net::TcpStream;
let stream = TcpStream::connect("127.0.0.1:8080")
                       .expect("Couldn't connect to the server...");
stream.set_nodelay(true).expect("set_nodelay call failed"); 
1.9.0sourcepub fn nodelay(&self) -> Result<bool>
Gets the value of the TCP_NODELAY option on this socket. For more information about this option, see TcpStream::set_nodelay. Examples use std::net::TcpStream;
let stream = TcpStream::connect("127.0.0.1:8080")
                       .expect("Couldn't connect to the server...");
stream.set_nodelay(true).expect("set_nodelay call failed");
assert_eq!(stream.nodelay().unwrap_or(false), true); 
1.9.0sourcepub fn set_ttl(&self, ttl: u32) -> Result<()>
Sets the value for the IP_TTL option on this socket. This value sets the time-to-live field that is used in every packet sent from this socket. Examples use std::net::TcpStream;
let stream = TcpStream::connect("127.0.0.1:8080")
                       .expect("Couldn't connect to the server...");
stream.set_ttl(100).expect("set_ttl call failed"); 
1.9.0sourcepub fn ttl(&self) -> Result<u32>
Gets the value of the IP_TTL option for this socket. For more information about this option, see TcpStream::set_ttl. Examples use std::net::TcpStream;
let stream = TcpStream::connect("127.0.0.1:8080")
                       .expect("Couldn't connect to the server...");
stream.set_ttl(100).expect("set_ttl call failed");
assert_eq!(stream.ttl().unwrap_or(0), 100); 
1.9.0sourcepub fn take_error(&self) -> Result<Option<Error>>
Gets the value of the SO_ERROR option on this socket. This will retrieve the stored error in the underlying socket, clearing the field in the process. This can be useful for checking errors between calls. Examples use std::net::TcpStream;
let stream = TcpStream::connect("127.0.0.1:8080")
                       .expect("Couldn't connect to the server...");
stream.take_error().expect("No error was expected..."); 
1.9.0sourcepub fn set_nonblocking(&self, nonblocking: bool) -> Result<()>
Moves this TCP stream into or out of nonblocking mode. This will result in read, write, recv and send system operations becoming nonblocking, i.e., immediately returning from their calls. If the IO operation is successful, Ok is returned and no further action is required. If the IO operation could not be completed and needs to be retried, an error with kind io::ErrorKind::WouldBlock is returned. On Unix platforms, calling this method corresponds to calling fcntl FIONBIO. On Windows calling this method corresponds to calling ioctlsocket FIONBIO. Examples Reading bytes from a TCP stream in non-blocking mode: use std::io::{self, Read};
use std::net::TcpStream;
let mut stream = TcpStream::connect("127.0.0.1:7878")
    .expect("Couldn't connect to the server...");
stream.set_nonblocking(true).expect("set_nonblocking call failed");
let mut buf = vec![];
loop {
    match stream.read_to_end(&mut buf) {
        Ok(_) => break,
        Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {
            // wait until network socket is ready, typically implemented
            // via platform-specific APIs such as epoll or IOCP
            wait_for_fd();
        }
        Err(e) => panic!("encountered IO error: {e}"),
    };
};
println!("bytes: {buf:?}"); 

Trait Implementations
1.63.0sourceimpl AsFd for TcpStream
sourcefn as_fd(&self) -> BorrowedFd<'_>Borrows the file descriptor. Read more

1.0.0sourceimpl AsRawFd for TcpStream
sourcefn as_raw_fd(&self) -> RawFdExtracts the raw file descriptor. Read more

1.0.0sourceimpl AsRawSocket for TcpStreamAvailable on Windows only.
sourcefn as_raw_socket(&self) -> RawSocketExtracts the raw socket. Read more

1.63.0sourceimpl AsSocket for TcpStreamAvailable on Windows only.
sourcefn as_socket(&self) -> BorrowedSocket<'_>Borrows the socket.
1.0.0sourceimpl Debug for TcpStream
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

1.63.0sourceimpl From<OwnedFd> for TcpStream
sourcefn from(owned_fd: OwnedFd) -> SelfConverts to this type from the input type.
1.63.0sourceimpl From<OwnedSocket> for TcpStreamAvailable on Windows only.
sourcefn from(owned: OwnedSocket) -> SelfConverts to this type from the input type.
1.63.0sourceimpl From<TcpStream> for OwnedFd
sourcefn from(tcp_stream: TcpStream) -> OwnedFd
Takes ownership of a TcpStreamâ€™s socket file descriptor. 
1.63.0sourceimpl From<TcpStream> for OwnedSocketAvailable on Windows only.
sourcefn from(tcp_stream: TcpStream) -> OwnedSocket
Takes ownership of a TcpStreamâ€™s socket. 
1.1.0sourceimpl FromRawFd for TcpStream
sourceunsafe fn from_raw_fd(fd: RawFd) -> TcpStream â“˜Constructs a new instance of Self from the given raw file descriptor. Read more

1.1.0sourceimpl FromRawSocket for TcpStreamAvailable on Windows only.
sourceunsafe fn from_raw_socket(sock: RawSocket) -> TcpStream â“˜Constructs a new I/O object from the specified raw socket. Read more

1.4.0sourceimpl IntoRawFd for TcpStream
sourcefn into_raw_fd(self) -> RawFdConsumes this object, returning the raw underlying file descriptor. Read more

1.4.0sourceimpl IntoRawSocket for TcpStreamAvailable on Windows only.
sourcefn into_raw_socket(self) -> RawSocketConsumes this object, returning the raw underlying socket. Read more

1.0.0sourceimpl Read for &TcpStream
sourcefn read(&mut self, buf: &mut [u8]) -> Result<usize>Pull some bytes from this source into the specified buffer, returning how many bytes were read. Read more
sourcefn read_buf(&mut self, buf: BorrowedCursor<'_>) -> Result<()>
ðŸ”¬This is a nightly-only experimental API. (read_buf #78485)
Pull some bytes from this source into the specified buffer. Read more
sourcefn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> Result<usize>Like read, except that it reads into a slice of buffers. Read more
sourcefn is_read_vectored(&self) -> bool
ðŸ”¬This is a nightly-only experimental API. (can_vector #69941)
Determines if this Reader has an efficient read_vectored implementation. Read more
1.0.0sourcefn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize>Reads all bytes until EOF in this source, placing them into buf. Read more
1.0.0sourcefn read_to_string(&mut self, buf: &mut String) -> Result<usize>Reads all bytes until EOF in this source, appending them to buf. Read more
1.6.0sourcefn read_exact(&mut self, buf: &mut [u8]) -> Result<()>Reads the exact number of bytes required to fill buf. Read more
sourcefn read_buf_exact(&mut self, cursor: BorrowedCursor<'_>) -> Result<()>
ðŸ”¬This is a nightly-only experimental API. (read_buf #78485)
Reads the exact number of bytes required to fill cursor. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Creates a â€œby referenceâ€ adaptor for this instance of Read. Read more
1.0.0sourcefn bytes(self) -> Bytes<Self> â“˜where
    Self: Sized,Transforms this Read instance to an Iterator over its bytes. Read more
1.0.0sourcefn chain<R: Read>(self, next: R) -> Chain<Self, R> â“˜where
    Self: Sized,Creates an adapter which will chain this stream with another. Read more
1.0.0sourcefn take(self, limit: u64) -> Take<Self> â“˜where
    Self: Sized,Creates an adapter which will read at most limit bytes from it. Read more

1.0.0sourceimpl Read for TcpStream
sourcefn read(&mut self, buf: &mut [u8]) -> Result<usize>Pull some bytes from this source into the specified buffer, returning how many bytes were read. Read more
sourcefn read_buf(&mut self, buf: BorrowedCursor<'_>) -> Result<()>
ðŸ”¬This is a nightly-only experimental API. (read_buf #78485)
Pull some bytes from this source into the specified buffer. Read more
sourcefn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> Result<usize>Like read, except that it reads into a slice of buffers. Read more
sourcefn is_read_vectored(&self) -> bool
ðŸ”¬This is a nightly-only experimental API. (can_vector #69941)
Determines if this Reader has an efficient read_vectored implementation. Read more
1.0.0sourcefn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize>Reads all bytes until EOF in this source, placing them into buf. Read more
1.0.0sourcefn read_to_string(&mut self, buf: &mut String) -> Result<usize>Reads all bytes until EOF in this source, appending them to buf. Read more
1.6.0sourcefn read_exact(&mut self, buf: &mut [u8]) -> Result<()>Reads the exact number of bytes required to fill buf. Read more
sourcefn read_buf_exact(&mut self, cursor: BorrowedCursor<'_>) -> Result<()>
ðŸ”¬This is a nightly-only experimental API. (read_buf #78485)
Reads the exact number of bytes required to fill cursor. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Creates a â€œby referenceâ€ adaptor for this instance of Read. Read more
1.0.0sourcefn bytes(self) -> Bytes<Self> â“˜where
    Self: Sized,Transforms this Read instance to an Iterator over its bytes. Read more
1.0.0sourcefn chain<R: Read>(self, next: R) -> Chain<Self, R> â“˜where
    Self: Sized,Creates an adapter which will chain this stream with another. Read more
1.0.0sourcefn take(self, limit: u64) -> Take<Self> â“˜where
    Self: Sized,Creates an adapter which will read at most limit bytes from it. Read more

sourceimpl TcpStreamExt for TcpStreamAvailable on Linux or Android only.
sourcefn set_quickack(&self, quickack: bool) -> Result<()>
ðŸ”¬This is a nightly-only experimental API. (tcp_quickack #96256)
Available on Linux only.Enable or disable TCP_QUICKACK. Read more
sourcefn quickack(&self) -> Result<bool>
ðŸ”¬This is a nightly-only experimental API. (tcp_quickack #96256)
Available on Linux only.Gets the value of the TCP_QUICKACK option on this socket. Read more
sourcefn set_deferaccept(&self, accept: u32) -> Result<()>
ðŸ”¬This is a nightly-only experimental API. (tcp_deferaccept #119639)
Available on Linux only.A socket listener will be awakened solely when data arrives. Read more
sourcefn deferaccept(&self) -> Result<u32>
ðŸ”¬This is a nightly-only experimental API. (tcp_deferaccept #119639)
Available on Linux only.Gets the accept delay value (in seconds) of the TCP_DEFER_ACCEPT option. Read more

1.0.0sourceimpl Write for &TcpStream
sourcefn write(&mut self, buf: &[u8]) -> Result<usize>Writes a buffer into this writer, returning how many bytes were written. Read more
sourcefn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> Result<usize>Like write, except that it writes from a slice of buffers. Read more
sourcefn is_write_vectored(&self) -> bool
ðŸ”¬This is a nightly-only experimental API. (can_vector #69941)
Determines if this Writer has an efficient write_vectored implementation. Read more
sourcefn flush(&mut self) -> Result<()>Flushes this output stream, ensuring that all intermediately buffered contents reach their destination. Read more
1.0.0sourcefn write_all(&mut self, buf: &[u8]) -> Result<()>Attempts to write an entire buffer into this writer. Read more
sourcefn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> Result<()>
ðŸ”¬This is a nightly-only experimental API. (write_all_vectored #70436)
Attempts to write multiple buffers into this writer. Read more
1.0.0sourcefn write_fmt(&mut self, fmt: Arguments<'_>) -> Result<()>Writes a formatted string into this writer, returning any error encountered. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Creates a â€œby referenceâ€ adapter for this instance of Write. Read more

1.0.0sourceimpl Write for TcpStream
sourcefn write(&mut self, buf: &[u8]) -> Result<usize>Writes a buffer into this writer, returning how many bytes were written. Read more
sourcefn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> Result<usize>Like write, except that it writes from a slice of buffers. Read more
sourcefn is_write_vectored(&self) -> bool
ðŸ”¬This is a nightly-only experimental API. (can_vector #69941)
Determines if this Writer has an efficient write_vectored implementation. Read more
sourcefn flush(&mut self) -> Result<()>Flushes this output stream, ensuring that all intermediately buffered contents reach their destination. Read more
1.0.0sourcefn write_all(&mut self, buf: &[u8]) -> Result<()>Attempts to write an entire buffer into this writer. Read more
sourcefn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> Result<()>
ðŸ”¬This is a nightly-only experimental API. (write_all_vectored #70436)
Attempts to write multiple buffers into this writer. Read more
1.0.0sourcefn write_fmt(&mut self, fmt: Arguments<'_>) -> Result<()>Writes a formatted string into this writer, returning any error encountered. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Creates a â€œby referenceâ€ adapter for this instance of Write. Read more

Auto Trait Implementations
impl Freeze for TcpStreamimpl RefUnwindSafe for TcpStreamimpl Send for TcpStreamimpl Sync for TcpStreamimpl Unpin for TcpStreamimpl UnwindSafe for TcpStream
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/net/struct.TcpStream.html


std/os/raw/type.c_void
-----------------------------------------------------------
Type Alias c_void
pub type c_void = c_void;
Equivalent to Câ€™s void type when used as a pointer. In essence, *const c_void is equivalent to Câ€™s const void* and *mut c_void is equivalent to Câ€™s void*. That said, this is not the same as Câ€™s void return type, which is Rustâ€™s () type. To model pointers to opaque types in FFI, until extern type is stabilized, it is recommended to use a newtype wrapper around an empty byte array. See the Nomicon for details. One could use std::os::raw::c_void if they want to support old Rust compiler down to 1.1.0. After Rust 1.30.0, it was re-exported by this definition. For more information, please read RFC 2521. Aliased Type
enum c_void {}
Variants

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/os/raw/type.c_void.html


std/simd/type.masksizex32
-----------------------------------------------------------
Type Alias masksizex32
pub type masksizex32 = Mask<isize, 32>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD mask with 32 elements for vectors with pointer-sized element types. The layout of this type is unspecified, and may change between platforms and/or Rust versions, and code should not assume that it is equivalent to [isize; 32]. Aliased Type
struct masksizex32(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/type.masksizex32.html


std/sync/atomic/constant.atomic_isize_init
-----------------------------------------------------------
Constant ATOMIC_ISIZE_INIT
pub const ATOMIC_ISIZE_INIT: AtomicIsize;
ðŸ‘ŽDeprecated since 1.34.0: the new function is now preferred
An AtomicIsize initialized to 0.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/sync/atomic/constant.ATOMIC_ISIZE_INIT.html


std/simd/type.i32x4
-----------------------------------------------------------
Type Alias i32x4
pub type i32x4 = Simd<i32, 4>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with four elements of type i32. Aliased Type
struct i32x4(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/type.i32x4.html


std/simd/prelude/type.u8x8
-----------------------------------------------------------
Type Alias u8x8
pub type u8x8 = Simd<u8, 8>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with eight elements of type u8. Aliased Type
struct u8x8(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/prelude/type.u8x8.html


std/sync/atomic/enum.ordering
-----------------------------------------------------------
Enum Ordering
#[non_exhaustive]pub enum Ordering {
    Relaxed,
    Release,
    Acquire,
    AcqRel,
    SeqCst,
}
Atomic memory orderings Memory orderings specify the way atomic operations synchronize memory. In its weakest Ordering::Relaxed, only the memory directly touched by the operation is synchronized. On the other hand, a store-load pair of Ordering::SeqCst operations synchronize other memory while additionally preserving a total order of such operations across all threads. Rustâ€™s memory orderings are the same as those of C++20. For more information see the nomicon. Variants (Non-exhaustive)
This enum is marked as non-exhaustiveNon-exhaustive enums could have additional variants added in future. Therefore, when matching against variants of non-exhaustive enums, an extra wildcard arm must be added to account for any future variants.
1.0.0Relaxed
No ordering constraints, only atomic operations. Corresponds to memory_order_relaxed in C++20. 
1.0.0Release
When coupled with a store, all previous operations become ordered before any load of this value with Acquire (or stronger) ordering. In particular, all previous writes become visible to all threads that perform an Acquire (or stronger) load of this value. Notice that using this ordering for an operation that combines loads and stores leads to a Relaxed load operation! This ordering is only applicable for operations that can perform a store. Corresponds to memory_order_release in C++20. 
1.0.0Acquire
When coupled with a load, if the loaded value was written by a store operation with Release (or stronger) ordering, then all subsequent operations become ordered after that store. In particular, all subsequent loads will see data written before the store. Notice that using this ordering for an operation that combines loads and stores leads to a Relaxed store operation! This ordering is only applicable for operations that can perform a load. Corresponds to memory_order_acquire in C++20. 
1.0.0AcqRel
Has the effects of both Acquire and Release together: For loads it uses Acquire ordering. For stores it uses the Release ordering. Notice that in the case of compare_and_swap, it is possible that the operation ends up not performing any store and hence it has just Acquire ordering. However, AcqRel will never perform Relaxed accesses. This ordering is only applicable for operations that combine both loads and stores. Corresponds to memory_order_acq_rel in C++20. 
1.0.0SeqCst
Like Acquire/Release/AcqRel (for load, store, and load-with-store operations, respectively) with the additional guarantee that all threads see all sequentially consistent operations in the same order. Corresponds to memory_order_seq_cst in C++20. 
Trait Implementations
1.0.0sourceimpl Clone for Ordering
sourcefn clone(&self) -> OrderingReturns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.0.0sourceimpl Debug for Ordering
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.0.0sourceimpl Hash for Ordering
sourcefn hash<__H>(&self, state: &mut __H)where
    __H: Hasher,Feeds this value into the given Hasher. Read more
1.3.0sourcefn hash_slice<H>(data: &[Self], state: &mut H)where
    H: Hasher,
    Self: Sized,Feeds a slice of this type into the given Hasher. Read more

1.0.0sourceimpl PartialEq for Ordering
sourcefn eq(&self, other: &Ordering) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.0.0sourceimpl Copy for Ordering1.0.0sourceimpl Eq for Ordering1.0.0sourceimpl StructuralPartialEq for Ordering
Auto Trait Implementations
impl Freeze for Orderingimpl RefUnwindSafe for Orderingimpl Send for Orderingimpl Sync for Orderingimpl Unpin for Orderingimpl UnwindSafe for Ordering
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html


std/os/raw/type.c_char
-----------------------------------------------------------
Type Alias c_char
pub type c_char = c_char;
Equivalent to Câ€™s char type. Câ€™s char type is completely unlike Rustâ€™s char type; while Rustâ€™s type represents a unicode scalar value, Câ€™s char type is just an ordinary integer. On modern architectures this type will always be either i8 or u8, as they use byte-addresses memory with 8-bit bytes. C chars are most commonly used to make C strings. Unlike Rust, where the length of a string is included alongside the string, C strings mark the end of a string with the character '\0'. See CStr for more information.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/os/raw/type.c_char.html


std/intrinsics/fn.const_allocate
-----------------------------------------------------------
Function const_allocate
pub const unsafe fn const_allocate(_size: usize, _align: usize) -> *mut u8
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Allocates a block of memory at compile time. At runtime, just returns a null pointer. Safety  The align argument must be a power of two.  At compile time, a compile error occurs if this constraint is violated. At runtime, it is not checked.   
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.const_allocate.html


std/f16/consts/constant.e
-----------------------------------------------------------
Constant E
pub const E: f16 = 2.71828182845904523536028747135266250_f16; // 2.7188f16
ðŸ”¬This is a nightly-only experimental API. (f16 #116909)
Eulerâ€™s number (e)
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/f16/consts/constant.E.html


std/keyword.impl
-----------------------------------------------------------
Keyword impl
Implement some functionality for a type. The impl keyword is primarily used to define implementations on types. Inherent implementations are standalone, while trait implementations are used to implement traits for types, or other traits. Functions and consts can both be defined in an implementation. A function defined in an impl block can be standalone, meaning it would be called like Foo::bar(). If the function takes self, &self, or &mut self as its first argument, it can also be called using method-call syntax, a familiar feature to any object oriented programmer, like foo.bar(). struct Example {
    number: i32,
}
impl Example {
    fn boo() {
        println!("boo! Example::boo() was called!");
    }
    fn answer(&mut self) {
        self.number += 42;
    }
    fn get_number(&self) -> i32 {
        self.number
    }
}
trait Thingy {
    fn do_thingy(&self);
}
impl Thingy for Example {
    fn do_thingy(&self) {
        println!("doing a thing! also, number is {}!", self.number);
    }
} For more information on implementations, see the Rust book or the Reference. The other use of the impl keyword is in impl Trait syntax, which can be seen as a shorthand for â€œa concrete type that implements this traitâ€. Its primary use is working with closures, which have type definitions generated at compile time that canâ€™t be simply typed out. fn thing_returning_closure() -> impl Fn(i32) -> bool {
    println!("here's a closure for you!");
    |x: i32| x % 3 == 0
} For more information on impl Trait syntax, see the Rust book.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/keyword.impl.html


std/prelude/rust_2024/macro.type_ascribe
-----------------------------------------------------------
Macro type_ascribe
pub macro type_ascribe($expr:expr, $ty:ty) {
    ...
}
ðŸ”¬This is a nightly-only experimental API. (type_ascription #23416)
Unstable placeholder for type ascription.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/prelude/rust_2024/macro.type_ascribe.html


std/simd/type.usizex4
-----------------------------------------------------------
Type Alias usizex4
pub type usizex4 = Simd<usize, 4>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with four elements of type usize. Aliased Type
struct usizex4(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/type.usizex4.html


std/ptr/fn.write_unaligned
-----------------------------------------------------------
Function write_unaligned
pub const unsafe fn write_unaligned<T>(dst: *mut T, src: T)
Overwrites a memory location with the given value without reading or dropping the old value. Unlike write(), the pointer may be unaligned. write_unaligned does not drop the contents of dst. This is safe, but it could leak allocations or resources, so care should be taken not to overwrite an object that should be dropped. Additionally, it does not drop src. Semantically, src is moved into the location pointed to by dst. This is appropriate for initializing uninitialized memory, or overwriting memory that has previously been read with read_unaligned. Safety Behavior is undefined if any of the following conditions are violated:  
dst must be valid for writes.  Note that even if T has size 0, the pointer must be non-null. On packed structs Attempting to create a raw pointer to an unaligned struct field with an expression such as &packed.unaligned as *const FieldType creates an intermediate unaligned reference before converting that to a raw pointer. That this reference is temporary and immediately cast is inconsequential as the compiler always expects references to be properly aligned. As a result, using &packed.unaligned as *const FieldType causes immediate undefined behavior in your program. Instead, you must use the ptr::addr_of_mut! macro to create the pointer. You may use that returned pointer together with this function. An example of how to do it and how this relates to write_unaligned is: #[repr(packed, C)]
struct Packed {
    _padding: u8,
    unaligned: u32,
}
let mut packed: Packed = unsafe { std::mem::zeroed() };
// Take the address of a 32-bit integer which is not aligned.
// In contrast to `&packed.unaligned as *mut _`, this has no undefined behavior.
let unaligned = std::ptr::addr_of_mut!(packed.unaligned);
unsafe { std::ptr::write_unaligned(unaligned, 42) };
assert_eq!({packed.unaligned}, 42); // `{...}` forces copying the field instead of creating a reference. Accessing unaligned fields directly with e.g. packed.unaligned is safe however (as can be seen in the assert_eq! above). Examples Write a usize value to a byte buffer: use std::mem;
fn write_usize(x: &mut [u8], val: usize) {
    assert!(x.len() >= mem::size_of::<usize>());
    let ptr = x.as_mut_ptr() as *mut usize;
    unsafe { ptr.write_unaligned(val) }
}
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/ptr/fn.write_unaligned.html


std/fs/fn.set_permissions
-----------------------------------------------------------
Function set_permissions
pub fn set_permissions<P: AsRef<Path>>(path: P, perm: Permissions) -> Result<()>
Changes the permissions found on a file or a directory. Platform-specific behavior This function currently corresponds to the chmod function on Unix and the SetFileAttributes function on Windows. Note that, this may change in the future. Errors This function will return an error in the following situations, but is not limited to just these cases:  
path does not exist. The user lacks the permission to change attributes of the file.  Examples use std::fs;
fn main() -> std::io::Result<()> {
    let mut perms = fs::metadata("foo.txt")?.permissions();
    perms.set_readonly(true);
    fs::set_permissions("foo.txt", perms)?;
    Ok(())
}
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/fs/fn.set_permissions.html


std/intrinsics/mir/fn.castptrtoptr
-----------------------------------------------------------
Function CastPtrToPtr
pub fn CastPtrToPtr<T, U>(operand: T) -> U
ðŸ”¬This is a nightly-only experimental API. (custom_mir)
Emits a CastKind::PtrToPtr cast. This allows bypassing normal validation to generate strange casts.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/mir/fn.CastPtrToPtr.html


std/str/pattern/struct.charslicesearcher
-----------------------------------------------------------
Struct CharSliceSearcher
pub struct CharSliceSearcher<'a, 'b>(/* private fields */);
ðŸ”¬This is a nightly-only experimental API. (pattern #27721)
Associated type for <&[char] as Pattern>::Searcher<'a>. Trait Implementations
sourceimpl<'a, 'b> Clone for CharSliceSearcher<'a, 'b>
sourcefn clone(&self) -> CharSliceSearcher<'a, 'b>Returns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

sourceimpl<'a, 'b> Debug for CharSliceSearcher<'a, 'b>
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

sourceimpl<'a, 'b> ReverseSearcher<'a> for CharSliceSearcher<'a, 'b>
sourcefn next_back(&mut self) -> SearchStep
ðŸ”¬This is a nightly-only experimental API. (pattern #27721)
Performs the next search step starting from the back. Read more
sourcefn next_match_back(&mut self) -> Option<(usize, usize)>
ðŸ”¬This is a nightly-only experimental API. (pattern #27721)
Finds the next Match result. See next_back().
sourcefn next_reject_back(&mut self) -> Option<(usize, usize)>
ðŸ”¬This is a nightly-only experimental API. (pattern #27721)
Finds the next Reject result. See next_back().
sourceimpl<'a, 'b> Searcher<'a> for CharSliceSearcher<'a, 'b>
sourcefn haystack(&self) -> &'a str
ðŸ”¬This is a nightly-only experimental API. (pattern #27721)
Getter for the underlying string to be searched in Read more
sourcefn next(&mut self) -> SearchStep
ðŸ”¬This is a nightly-only experimental API. (pattern #27721)
Performs the next search step starting from the front. Read more
sourcefn next_match(&mut self) -> Option<(usize, usize)>
ðŸ”¬This is a nightly-only experimental API. (pattern #27721)
Finds the next Match result. See next(). Read more
sourcefn next_reject(&mut self) -> Option<(usize, usize)>
ðŸ”¬This is a nightly-only experimental API. (pattern #27721)
Finds the next Reject result. See next() and next_match(). Read more

sourceimpl<'a, 'b> DoubleEndedSearcher<'a> for CharSliceSearcher<'a, 'b>
Auto Trait Implementations
impl<'a, 'b> Freeze for CharSliceSearcher<'a, 'b>impl<'a, 'b> RefUnwindSafe for CharSliceSearcher<'a, 'b>impl<'a, 'b> Send for CharSliceSearcher<'a, 'b>impl<'a, 'b> Sync for CharSliceSearcher<'a, 'b>impl<'a, 'b> Unpin for CharSliceSearcher<'a, 'b>impl<'a, 'b> UnwindSafe for CharSliceSearcher<'a, 'b>
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/str/pattern/struct.CharSliceSearcher.html


std/simd/prelude/type.i16x16
-----------------------------------------------------------
Type Alias i16x16
pub type i16x16 = Simd<i16, 16>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with 16 elements of type i16. Aliased Type
struct i16x16(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/prelude/type.i16x16.html


std/ptr/fn.metadata
-----------------------------------------------------------
Function metadata
pub const fn metadata<T>(ptr: *const T) -> <T as Pointee>::Metadatawhere
    T: ?Sized,
ðŸ”¬This is a nightly-only experimental API. (ptr_metadata #81513)
Extracts the metadata component of a pointer. Values of type *mut T, &T, or &mut T can be passed directly to this function as they implicitly coerce to *const T. Example #![feature(ptr_metadata)]
assert_eq!(std::ptr::metadata("foo"), 3_usize);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/ptr/fn.metadata.html


std/rc/struct.rc
-----------------------------------------------------------
Struct Rc
pub struct Rc<T, A = Global>where
    A: Allocator,
    T: ?Sized,{ /* private fields */ }
A single-threaded reference-counting pointer. â€˜Rcâ€™ stands for â€˜Reference Countedâ€™. See the module-level documentation for more details. The inherent methods of Rc are all associated functions, which means that you have to call them as e.g., Rc::get_mut(&mut value) instead of value.get_mut(). This avoids conflicts with methods of the inner type T. Implementations
sourceimpl<T> Rc<T>
1.0.0sourcepub fn new(value: T) -> Rc<T>
Constructs a new Rc<T>. Examples use std::rc::Rc;
let five = Rc::new(5); 
1.60.0sourcepub fn new_cyclic<F>(data_fn: F) -> Rc<T>where
    F: FnOnce(&Weak<T>) -> T,
Constructs a new Rc<T> while giving you a Weak<T> to the allocation, to allow you to construct a T which holds a weak pointer to itself. Generally, a structure circularly referencing itself, either directly or indirectly, should not hold a strong reference to itself to prevent a memory leak. Using this function, you get access to the weak pointer during the initialization of T, before the Rc<T> is created, such that you can clone and store it inside the T. new_cyclic first allocates the managed allocation for the Rc<T>, then calls your closure, giving it a Weak<T> to this allocation, and only afterwards completes the construction of the Rc<T> by placing the T returned from your closure into the allocation. Since the new Rc<T> is not fully-constructed until Rc<T>::new_cyclic returns, calling upgrade on the weak reference inside your closure will fail and result in a None value. Panics If data_fn panics, the panic is propagated to the caller, and the temporary Weak<T> is dropped normally. Examples use std::rc::{Rc, Weak};
struct Gadget {
    me: Weak<Gadget>,
}
impl Gadget {
    /// Constructs a reference counted Gadget.
    fn new() -> Rc<Self> {
        // `me` is a `Weak<Gadget>` pointing at the new allocation of the
        // `Rc` we're constructing.
        Rc::new_cyclic(|me| {
            // Create the actual struct here.
            Gadget { me: me.clone() }
        })
    }
    /// Returns a reference counted pointer to Self.
    fn me(&self) -> Rc<Self> {
        self.me.upgrade().unwrap()
    }
} 
1.82.0sourcepub fn new_uninit() -> Rc<MaybeUninit<T>>
Constructs a new Rc with uninitialized contents. Examples #![feature(get_mut_unchecked)]
use std::rc::Rc;
let mut five = Rc::<u32>::new_uninit();
// Deferred initialization:
Rc::get_mut(&mut five).unwrap().write(5);
let five = unsafe { five.assume_init() };
assert_eq!(*five, 5) 
sourcepub fn new_zeroed() -> Rc<MaybeUninit<T>>
ðŸ”¬This is a nightly-only experimental API. (new_zeroed_alloc #129396)
Constructs a new Rc with uninitialized contents, with the memory being filled with 0 bytes. See MaybeUninit::zeroed for examples of correct and incorrect usage of this method. Examples #![feature(new_zeroed_alloc)]
use std::rc::Rc;
let zero = Rc::<u32>::new_zeroed();
let zero = unsafe { zero.assume_init() };
assert_eq!(*zero, 0) 
sourcepub fn try_new(value: T) -> Result<Rc<T>, AllocError>
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Constructs a new Rc<T>, returning an error if the allocation fails Examples #![feature(allocator_api)]
use std::rc::Rc;
let five = Rc::try_new(5); 
sourcepub fn try_new_uninit() -> Result<Rc<MaybeUninit<T>>, AllocError>
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Constructs a new Rc with uninitialized contents, returning an error if the allocation fails Examples #![feature(allocator_api)]
#![feature(get_mut_unchecked)]
use std::rc::Rc;
let mut five = Rc::<u32>::try_new_uninit()?;
// Deferred initialization:
Rc::get_mut(&mut five).unwrap().write(5);
let five = unsafe { five.assume_init() };
assert_eq!(*five, 5); 
sourcepub fn try_new_zeroed() -> Result<Rc<MaybeUninit<T>>, AllocError>
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Constructs a new Rc with uninitialized contents, with the memory being filled with 0 bytes, returning an error if the allocation fails See MaybeUninit::zeroed for examples of correct and incorrect usage of this method. Examples #![feature(allocator_api)]
use std::rc::Rc;
let zero = Rc::<u32>::try_new_zeroed()?;
let zero = unsafe { zero.assume_init() };
assert_eq!(*zero, 0); 
1.33.0sourcepub fn pin(value: T) -> Pin<Rc<T>>
Constructs a new Pin<Rc<T>>. If T does not implement Unpin, then value will be pinned in memory and unable to be moved. 
sourceimpl<T, A> Rc<T, A>where
    A: Allocator,
sourcepub fn new_in(value: T, alloc: A) -> Rc<T, A>
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Constructs a new Rc in the provided allocator. Examples #![feature(allocator_api)]
use std::rc::Rc;
use std::alloc::System;
let five = Rc::new_in(5, System); 
sourcepub fn new_uninit_in(alloc: A) -> Rc<MaybeUninit<T>, A>
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Constructs a new Rc with uninitialized contents in the provided allocator. Examples #![feature(get_mut_unchecked)]
#![feature(allocator_api)]
use std::rc::Rc;
use std::alloc::System;
let mut five = Rc::<u32, _>::new_uninit_in(System);
let five = unsafe {
    // Deferred initialization:
    Rc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);
    five.assume_init()
};
assert_eq!(*five, 5) 
sourcepub fn new_zeroed_in(alloc: A) -> Rc<MaybeUninit<T>, A>
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Constructs a new Rc with uninitialized contents, with the memory being filled with 0 bytes, in the provided allocator. See MaybeUninit::zeroed for examples of correct and incorrect usage of this method. Examples #![feature(allocator_api)]
use std::rc::Rc;
use std::alloc::System;
let zero = Rc::<u32, _>::new_zeroed_in(System);
let zero = unsafe { zero.assume_init() };
assert_eq!(*zero, 0) 
sourcepub fn new_cyclic_in<F>(data_fn: F, alloc: A) -> Rc<T, A>where
    F: FnOnce(&Weak<T, A>) -> T,
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Constructs a new Rc<T, A> in the given allocator while giving you a Weak<T, A> to the allocation, to allow you to construct a T which holds a weak pointer to itself. Generally, a structure circularly referencing itself, either directly or indirectly, should not hold a strong reference to itself to prevent a memory leak. Using this function, you get access to the weak pointer during the initialization of T, before the Rc<T, A> is created, such that you can clone and store it inside the T. new_cyclic_in first allocates the managed allocation for the Rc<T, A>, then calls your closure, giving it a Weak<T, A> to this allocation, and only afterwards completes the construction of the Rc<T, A> by placing the T returned from your closure into the allocation. Since the new Rc<T, A> is not fully-constructed until Rc<T, A>::new_cyclic_in returns, calling upgrade on the weak reference inside your closure will fail and result in a None value. Panics If data_fn panics, the panic is propagated to the caller, and the temporary Weak<T, A> is dropped normally. Examples See new_cyclic. 
sourcepub fn try_new_in(value: T, alloc: A) -> Result<Rc<T, A>, AllocError>
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Constructs a new Rc<T> in the provided allocator, returning an error if the allocation fails Examples #![feature(allocator_api)]
use std::rc::Rc;
use std::alloc::System;
let five = Rc::try_new_in(5, System); 
sourcepub fn try_new_uninit_in(alloc: A) -> Result<Rc<MaybeUninit<T>, A>, AllocError>
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Constructs a new Rc with uninitialized contents, in the provided allocator, returning an error if the allocation fails Examples #![feature(allocator_api)]
#![feature(get_mut_unchecked)]
use std::rc::Rc;
use std::alloc::System;
let mut five = Rc::<u32, _>::try_new_uninit_in(System)?;
let five = unsafe {
    // Deferred initialization:
    Rc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);
    five.assume_init()
};
assert_eq!(*five, 5); 
sourcepub fn try_new_zeroed_in(alloc: A) -> Result<Rc<MaybeUninit<T>, A>, AllocError>
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Constructs a new Rc with uninitialized contents, with the memory being filled with 0 bytes, in the provided allocator, returning an error if the allocation fails See MaybeUninit::zeroed for examples of correct and incorrect usage of this method. Examples #![feature(allocator_api)]
use std::rc::Rc;
use std::alloc::System;
let zero = Rc::<u32, _>::try_new_zeroed_in(System)?;
let zero = unsafe { zero.assume_init() };
assert_eq!(*zero, 0); 
sourcepub fn pin_in(value: T, alloc: A) -> Pin<Rc<T, A>>where
    A: 'static,
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Constructs a new Pin<Rc<T>> in the provided allocator. If T does not implement Unpin, then value will be pinned in memory and unable to be moved. 
1.4.0sourcepub fn try_unwrap(this: Rc<T, A>) -> Result<T, Rc<T, A>>
Returns the inner value, if the Rc has exactly one strong reference. Otherwise, an Err is returned with the same Rc that was passed in. This will succeed even if there are outstanding weak references. Examples use std::rc::Rc;
let x = Rc::new(3);
assert_eq!(Rc::try_unwrap(x), Ok(3));
let x = Rc::new(4);
let _y = Rc::clone(&x);
assert_eq!(*Rc::try_unwrap(x).unwrap_err(), 4); 
1.70.0sourcepub fn into_inner(this: Rc<T, A>) -> Option<T>
Returns the inner value, if the Rc has exactly one strong reference. Otherwise, None is returned and the Rc is dropped. This will succeed even if there are outstanding weak references. If Rc::into_inner is called on every clone of this Rc, it is guaranteed that exactly one of the calls returns the inner value. This means in particular that the inner value is not dropped. Rc::try_unwrap is conceptually similar to Rc::into_inner. And while they are meant for different use-cases, Rc::into_inner(this) is in fact equivalent to Rc::try_unwrap(this).ok(). (Note that the same kind of equivalence does not hold true for Arc, due to race conditions that do not apply to Rc!) Examples use std::rc::Rc;
let x = Rc::new(3);
assert_eq!(Rc::into_inner(x), Some(3));
let x = Rc::new(4);
let y = Rc::clone(&x);
assert_eq!(Rc::into_inner(y), None);
assert_eq!(Rc::into_inner(x), Some(4)); 
sourceimpl<T> Rc<[T]>
1.82.0sourcepub fn new_uninit_slice(len: usize) -> Rc<[MaybeUninit<T>]>
Constructs a new reference-counted slice with uninitialized contents. Examples #![feature(get_mut_unchecked)]
use std::rc::Rc;
let mut values = Rc::<[u32]>::new_uninit_slice(3);
// Deferred initialization:
let data = Rc::get_mut(&mut values).unwrap();
data[0].write(1);
data[1].write(2);
data[2].write(3);
let values = unsafe { values.assume_init() };
assert_eq!(*values, [1, 2, 3]) 
sourcepub fn new_zeroed_slice(len: usize) -> Rc<[MaybeUninit<T>]>
ðŸ”¬This is a nightly-only experimental API. (new_zeroed_alloc #129396)
Constructs a new reference-counted slice with uninitialized contents, with the memory being filled with 0 bytes. See MaybeUninit::zeroed for examples of correct and incorrect usage of this method. Examples #![feature(new_zeroed_alloc)]
use std::rc::Rc;
let values = Rc::<[u32]>::new_zeroed_slice(3);
let values = unsafe { values.assume_init() };
assert_eq!(*values, [0, 0, 0]) 
sourceimpl<T, A> Rc<[T], A>where
    A: Allocator,
sourcepub fn new_uninit_slice_in(len: usize, alloc: A) -> Rc<[MaybeUninit<T>], A>
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Constructs a new reference-counted slice with uninitialized contents. Examples #![feature(get_mut_unchecked)]
#![feature(allocator_api)]
use std::rc::Rc;
use std::alloc::System;
let mut values = Rc::<[u32], _>::new_uninit_slice_in(3, System);
let values = unsafe {
    // Deferred initialization:
    Rc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);
    Rc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);
    Rc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);
    values.assume_init()
};
assert_eq!(*values, [1, 2, 3]) 
sourcepub fn new_zeroed_slice_in(len: usize, alloc: A) -> Rc<[MaybeUninit<T>], A>
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Constructs a new reference-counted slice with uninitialized contents, with the memory being filled with 0 bytes. See MaybeUninit::zeroed for examples of correct and incorrect usage of this method. Examples #![feature(allocator_api)]
use std::rc::Rc;
use std::alloc::System;
let values = Rc::<[u32], _>::new_zeroed_slice_in(3, System);
let values = unsafe { values.assume_init() };
assert_eq!(*values, [0, 0, 0]) 
sourceimpl<T, A> Rc<MaybeUninit<T>, A>where
    A: Allocator,
1.82.0sourcepub unsafe fn assume_init(self) -> Rc<T, A>
Converts to Rc<T>. Safety As with MaybeUninit::assume_init, it is up to the caller to guarantee that the inner value really is in an initialized state. Calling this when the content is not yet fully initialized causes immediate undefined behavior. Examples #![feature(get_mut_unchecked)]
use std::rc::Rc;
let mut five = Rc::<u32>::new_uninit();
// Deferred initialization:
Rc::get_mut(&mut five).unwrap().write(5);
let five = unsafe { five.assume_init() };
assert_eq!(*five, 5) 
sourceimpl<T, A> Rc<[MaybeUninit<T>], A>where
    A: Allocator,
1.82.0sourcepub unsafe fn assume_init(self) -> Rc<[T], A>
Converts to Rc<[T]>. Safety As with MaybeUninit::assume_init, it is up to the caller to guarantee that the inner value really is in an initialized state. Calling this when the content is not yet fully initialized causes immediate undefined behavior. Examples #![feature(get_mut_unchecked)]
use std::rc::Rc;
let mut values = Rc::<[u32]>::new_uninit_slice(3);
// Deferred initialization:
let data = Rc::get_mut(&mut values).unwrap();
data[0].write(1);
data[1].write(2);
data[2].write(3);
let values = unsafe { values.assume_init() };
assert_eq!(*values, [1, 2, 3]) 
sourceimpl<T> Rc<T>where
    T: ?Sized,
1.17.0sourcepub unsafe fn from_raw(ptr: *const T) -> Rc<T>
Constructs an Rc<T> from a raw pointer. The raw pointer must have been previously returned by a call to Rc<U>::into_raw with the following requirements:  If U is sized, it must have the same size and alignment as T. This is trivially true if U is T. If U is unsized, its data pointer must have the same size and alignment as T. This is trivially true if Rc<U> was constructed through Rc<T> and then converted to Rc<U> through an unsized coercion.  Note that if U or Uâ€™s data pointer is not T but has the same size and alignment, this is basically like transmuting references of different types. See mem::transmute for more information on what restrictions apply in this case. The raw pointer must point to a block of memory allocated by the global allocator The user of from_raw has to make sure a specific value of T is only dropped once. This function is unsafe because improper use may lead to memory unsafety, even if the returned Rc<T> is never accessed. Examples use std::rc::Rc;
let x = Rc::new("hello".to_owned());
let x_ptr = Rc::into_raw(x);
unsafe {
    // Convert back to an `Rc` to prevent leak.
    let x = Rc::from_raw(x_ptr);
    assert_eq!(&*x, "hello");
    // Further calls to `Rc::from_raw(x_ptr)` would be memory-unsafe.
}
// The memory was freed when `x` went out of scope above, so `x_ptr` is now dangling! Convert a slice back into its original array: use std::rc::Rc;
let x: Rc<[u32]> = Rc::new([1, 2, 3]);
let x_ptr: *const [u32] = Rc::into_raw(x);
unsafe {
    let x: Rc<[u32; 3]> = Rc::from_raw(x_ptr.cast::<[u32; 3]>());
    assert_eq!(&*x, &[1, 2, 3]);
} 
1.53.0sourcepub unsafe fn increment_strong_count(ptr: *const T)
Increments the strong reference count on the Rc<T> associated with the provided pointer by one. Safety The pointer must have been obtained through Rc::into_raw, the associated Rc instance must be valid (i.e. the strong count must be at least 1) for the duration of this method, and ptr must point to a block of memory allocated by the global allocator. Examples use std::rc::Rc;
let five = Rc::new(5);
unsafe {
    let ptr = Rc::into_raw(five);
    Rc::increment_strong_count(ptr);
    let five = Rc::from_raw(ptr);
    assert_eq!(2, Rc::strong_count(&five));
} 
1.53.0sourcepub unsafe fn decrement_strong_count(ptr: *const T)
Decrements the strong reference count on the Rc<T> associated with the provided pointer by one. Safety The pointer must have been obtained through Rc::into_raw, the associated Rc instance must be valid (i.e. the strong count must be at least 1) when invoking this method, and ptr must point to a block of memory allocated by the global allocator. This method can be used to release the final Rc and backing storage, but should not be called after the final Rc has been released. Examples use std::rc::Rc;
let five = Rc::new(5);
unsafe {
    let ptr = Rc::into_raw(five);
    Rc::increment_strong_count(ptr);
    let five = Rc::from_raw(ptr);
    assert_eq!(2, Rc::strong_count(&five));
    Rc::decrement_strong_count(ptr);
    assert_eq!(1, Rc::strong_count(&five));
} 
sourceimpl<T, A> Rc<T, A>where
    A: Allocator,
    T: ?Sized,
sourcepub fn allocator(this: &Rc<T, A>) -> &A
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Returns a reference to the underlying allocator. Note: this is an associated function, which means that you have to call it as Rc::allocator(&r) instead of r.allocator(). This is so that there is no conflict with a method on the inner type. 
1.17.0sourcepub fn into_raw(this: Rc<T, A>) -> *const T
Consumes the Rc, returning the wrapped pointer. To avoid a memory leak the pointer must be converted back to an Rc using Rc::from_raw. Examples use std::rc::Rc;
let x = Rc::new("hello".to_owned());
let x_ptr = Rc::into_raw(x);
assert_eq!(unsafe { &*x_ptr }, "hello"); 
sourcepub fn into_raw_with_allocator(this: Rc<T, A>) -> (*const T, A)
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Consumes the Rc, returning the wrapped pointer and allocator. To avoid a memory leak the pointer must be converted back to an Rc using Rc::from_raw_in. Examples #![feature(allocator_api)]
use std::rc::Rc;
use std::alloc::System;
let x = Rc::new_in("hello".to_owned(), System);
let (ptr, alloc) = Rc::into_raw_with_allocator(x);
assert_eq!(unsafe { &*ptr }, "hello");
let x = unsafe { Rc::from_raw_in(ptr, alloc) };
assert_eq!(&*x, "hello"); 
1.45.0sourcepub fn as_ptr(this: &Rc<T, A>) -> *const T
Provides a raw pointer to the data. The counts are not affected in any way and the Rc is not consumed. The pointer is valid for as long there are strong counts in the Rc. Examples use std::rc::Rc;
let x = Rc::new("hello".to_owned());
let y = Rc::clone(&x);
let x_ptr = Rc::as_ptr(&x);
assert_eq!(x_ptr, Rc::as_ptr(&y));
assert_eq!(unsafe { &*x_ptr }, "hello"); 
sourcepub unsafe fn from_raw_in(ptr: *const T, alloc: A) -> Rc<T, A>
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Constructs an Rc<T, A> from a raw pointer in the provided allocator. The raw pointer must have been previously returned by a call to Rc<U, A>::into_raw with the following requirements:  If U is sized, it must have the same size and alignment as T. This is trivially true if U is T. If U is unsized, its data pointer must have the same size and alignment as T. This is trivially true if Rc<U> was constructed through Rc<T> and then converted to Rc<U> through an unsized coercion.  Note that if U or Uâ€™s data pointer is not T but has the same size and alignment, this is basically like transmuting references of different types. See mem::transmute for more information on what restrictions apply in this case. The raw pointer must point to a block of memory allocated by alloc The user of from_raw has to make sure a specific value of T is only dropped once. This function is unsafe because improper use may lead to memory unsafety, even if the returned Rc<T> is never accessed. Examples #![feature(allocator_api)]
use std::rc::Rc;
use std::alloc::System;
let x = Rc::new_in("hello".to_owned(), System);
let x_ptr = Rc::into_raw(x);
unsafe {
    // Convert back to an `Rc` to prevent leak.
    let x = Rc::from_raw_in(x_ptr, System);
    assert_eq!(&*x, "hello");
    // Further calls to `Rc::from_raw(x_ptr)` would be memory-unsafe.
}
// The memory was freed when `x` went out of scope above, so `x_ptr` is now dangling! Convert a slice back into its original array: #![feature(allocator_api)]
use std::rc::Rc;
use std::alloc::System;
let x: Rc<[u32], _> = Rc::new_in([1, 2, 3], System);
let x_ptr: *const [u32] = Rc::into_raw(x);
unsafe {
    let x: Rc<[u32; 3], _> = Rc::from_raw_in(x_ptr.cast::<[u32; 3]>(), System);
    assert_eq!(&*x, &[1, 2, 3]);
} 
1.4.0sourcepub fn downgrade(this: &Rc<T, A>) -> Weak<T, A>where
    A: Clone,
Creates a new Weak pointer to this allocation. Examples use std::rc::Rc;
let five = Rc::new(5);
let weak_five = Rc::downgrade(&five); 
1.15.0sourcepub fn weak_count(this: &Rc<T, A>) -> usize
Gets the number of Weak pointers to this allocation. Examples use std::rc::Rc;
let five = Rc::new(5);
let _weak_five = Rc::downgrade(&five);
assert_eq!(1, Rc::weak_count(&five)); 
1.15.0sourcepub fn strong_count(this: &Rc<T, A>) -> usize
Gets the number of strong (Rc) pointers to this allocation. Examples use std::rc::Rc;
let five = Rc::new(5);
let _also_five = Rc::clone(&five);
assert_eq!(2, Rc::strong_count(&five)); 
sourcepub unsafe fn increment_strong_count_in(ptr: *const T, alloc: A)where
    A: Clone,
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Increments the strong reference count on the Rc<T> associated with the provided pointer by one. Safety The pointer must have been obtained through Rc::into_raw, the associated Rc instance must be valid (i.e. the strong count must be at least 1) for the duration of this method, and ptr must point to a block of memory allocated by alloc Examples #![feature(allocator_api)]
use std::rc::Rc;
use std::alloc::System;
let five = Rc::new_in(5, System);
unsafe {
    let ptr = Rc::into_raw(five);
    Rc::increment_strong_count_in(ptr, System);
    let five = Rc::from_raw_in(ptr, System);
    assert_eq!(2, Rc::strong_count(&five));
} 
sourcepub unsafe fn decrement_strong_count_in(ptr: *const T, alloc: A)
ðŸ”¬This is a nightly-only experimental API. (allocator_api #32838)
Decrements the strong reference count on the Rc<T> associated with the provided pointer by one. Safety The pointer must have been obtained through Rc::into_raw, the associated Rc instance must be valid (i.e. the strong count must be at least 1) when invoking this method, and ptr must point to a block of memory allocated by alloc. This method can be used to release the final Rc and backing storage, but should not be called after the final Rc has been released. Examples #![feature(allocator_api)]
use std::rc::Rc;
use std::alloc::System;
let five = Rc::new_in(5, System);
unsafe {
    let ptr = Rc::into_raw(five);
    Rc::increment_strong_count_in(ptr, System);
    let five = Rc::from_raw_in(ptr, System);
    assert_eq!(2, Rc::strong_count(&five));
    Rc::decrement_strong_count_in(ptr, System);
    assert_eq!(1, Rc::strong_count(&five));
} 
1.4.0sourcepub fn get_mut(this: &mut Rc<T, A>) -> Option<&mut T>
Returns a mutable reference into the given Rc, if there are no other Rc or Weak pointers to the same allocation. Returns None otherwise, because it is not safe to mutate a shared value. See also make_mut, which will clone the inner value when there are other Rc pointers. Examples use std::rc::Rc;
let mut x = Rc::new(3);
*Rc::get_mut(&mut x).unwrap() = 4;
assert_eq!(*x, 4);
let _y = Rc::clone(&x);
assert!(Rc::get_mut(&mut x).is_none()); 
sourcepub unsafe fn get_mut_unchecked(this: &mut Rc<T, A>) -> &mut T
ðŸ”¬This is a nightly-only experimental API. (get_mut_unchecked #63292)
Returns a mutable reference into the given Rc, without any check. See also get_mut, which is safe and does appropriate checks. Safety If any other Rc or Weak pointers to the same allocation exist, then they must not be dereferenced or have active borrows for the duration of the returned borrow, and their inner type must be exactly the same as the inner type of this Rc (including lifetimes). This is trivially the case if no such pointers exist, for example immediately after Rc::new. Examples #![feature(get_mut_unchecked)]
use std::rc::Rc;
let mut x = Rc::new(String::new());
unsafe {
    Rc::get_mut_unchecked(&mut x).push_str("foo")
}
assert_eq!(*x, "foo"); Other Rc pointers to the same allocation must be to the same type. #![feature(get_mut_unchecked)]
use std::rc::Rc;
let x: Rc<str> = Rc::from("Hello, world!");
let mut y: Rc<[u8]> = x.clone().into();
unsafe {
    // this is Undefined Behavior, because x's inner type is str, not [u8]
    Rc::get_mut_unchecked(&mut y).fill(0xff); // 0xff is invalid in UTF-8
}
println!("{}", &*x); // Invalid UTF-8 in a str Other Rc pointers to the same allocation must be to the exact same type, including lifetimes. #![feature(get_mut_unchecked)]
use std::rc::Rc;
let x: Rc<&str> = Rc::new("Hello, world!");
{
    let s = String::from("Oh, no!");
    let mut y: Rc<&str> = x.clone().into();
    unsafe {
        // this is Undefined Behavior, because x's inner type
        // is &'long str, not &'short str
        *Rc::get_mut_unchecked(&mut y) = &s;
    }
}
println!("{}", &*x); // Use-after-free 
1.17.0sourcepub fn ptr_eq(this: &Rc<T, A>, other: &Rc<T, A>) -> bool
Returns true if the two Rcs point to the same allocation in a vein similar to ptr::eq. This function ignores the metadata of dyn Trait pointers. Examples use std::rc::Rc;
let five = Rc::new(5);
let same_five = Rc::clone(&five);
let other_five = Rc::new(5);
assert!(Rc::ptr_eq(&five, &same_five));
assert!(!Rc::ptr_eq(&five, &other_five)); 
sourceimpl<T, A> Rc<T, A>where
    T: CloneToUninit + ?Sized,
    A: Allocator + Clone,
1.4.0sourcepub fn make_mut(this: &mut Rc<T, A>) -> &mut T
Makes a mutable reference into the given Rc. If there are other Rc pointers to the same allocation, then make_mut will clone the inner value to a new allocation to ensure unique ownership. This is also referred to as clone-on-write. However, if there are no other Rc pointers to this allocation, but some Weak pointers, then the Weak pointers will be disassociated and the inner value will not be cloned. See also get_mut, which will fail rather than cloning the inner value or disassociating Weak pointers. Examples use std::rc::Rc;
let mut data = Rc::new(5);
*Rc::make_mut(&mut data) += 1;         // Won't clone anything
let mut other_data = Rc::clone(&data); // Won't clone inner data
*Rc::make_mut(&mut data) += 1;         // Clones inner data
*Rc::make_mut(&mut data) += 1;         // Won't clone anything
*Rc::make_mut(&mut other_data) *= 2;   // Won't clone anything
// Now `data` and `other_data` point to different allocations.
assert_eq!(*data, 8);
assert_eq!(*other_data, 12); Weak pointers will be disassociated: use std::rc::Rc;
let mut data = Rc::new(75);
let weak = Rc::downgrade(&data);
assert!(75 == *data);
assert!(75 == *weak.upgrade().unwrap());
*Rc::make_mut(&mut data) += 1;
assert!(76 == *data);
assert!(weak.upgrade().is_none()); 
sourceimpl<T, A> Rc<T, A>where
    T: Clone,
    A: Allocator,
1.76.0sourcepub fn unwrap_or_clone(this: Rc<T, A>) -> T
If we have the only reference to T then unwrap it. Otherwise, clone T and return the clone. Assuming rc_t is of type Rc<T>, this function is functionally equivalent to (*rc_t).clone(), but will avoid cloning the inner value where possible. Examples let inner = String::from("test");
let ptr = inner.as_ptr();
let rc = Rc::new(inner);
let inner = Rc::unwrap_or_clone(rc);
// The inner value was not cloned
assert!(ptr::eq(ptr, inner.as_ptr()));
let rc = Rc::new(inner);
let rc2 = rc.clone();
let inner = Rc::unwrap_or_clone(rc);
// Because there were 2 references, we had to clone the inner value.
assert!(!ptr::eq(ptr, inner.as_ptr()));
// `rc2` is the last reference, so when we unwrap it we get back
// the original `String`.
let inner = Rc::unwrap_or_clone(rc2);
assert!(ptr::eq(ptr, inner.as_ptr())); 
sourceimpl<A> Rc<dyn Any, A>where
    A: Allocator,
1.29.0sourcepub fn downcast<T>(self) -> Result<Rc<T, A>, Rc<dyn Any, A>>where
    T: Any,
Attempts to downcast the Rc<dyn Any> to a concrete type. Examples use std::any::Any;
use std::rc::Rc;
fn print_if_string(value: Rc<dyn Any>) {
    if let Ok(string) = value.downcast::<String>() {
        println!("String ({}): {}", string.len(), string);
    }
}
let my_string = "Hello World".to_string();
print_if_string(Rc::new(my_string));
print_if_string(Rc::new(0i8)); 
sourcepub unsafe fn downcast_unchecked<T>(self) -> Rc<T, A>where
    T: Any,
ðŸ”¬This is a nightly-only experimental API. (downcast_unchecked #90850)
Downcasts the Rc<dyn Any> to a concrete type. For a safe alternative see downcast. Examples #![feature(downcast_unchecked)]
use std::any::Any;
use std::rc::Rc;
let x: Rc<dyn Any> = Rc::new(1_usize);
unsafe {
    assert_eq!(*x.downcast_unchecked::<usize>(), 1);
} Safety The contained value must be of type T. Calling this method with the incorrect type is undefined behavior. 

Trait Implementations
1.69.0sourceimpl<T: AsFd + ?Sized> AsFd for Rc<T>
sourcefn as_fd(&self) -> BorrowedFd<'_>Borrows the file descriptor. Read more

1.71.0sourceimpl<T: AsHandle + ?Sized> AsHandle for Rc<T>Available on Windows only.
sourcefn as_handle(&self) -> BorrowedHandle<'_>Borrows the handle. Read more

1.69.0sourceimpl<T: AsRawFd> AsRawFd for Rc<T>
sourcefn as_raw_fd(&self) -> RawFdExtracts the raw file descriptor. Read more

1.5.0sourceimpl<T, A> AsRef<T> for Rc<T, A>where
    A: Allocator,
    T: ?Sized,
sourcefn as_ref(&self) -> &TConverts this type into a shared reference of the (usually inferred) input type.
1.71.0sourceimpl<T: AsSocket> AsSocket for Rc<T>Available on Windows only.
sourcefn as_socket(&self) -> BorrowedSocket<'_>Borrows the socket.
1.0.0sourceimpl<T, A> Borrow<T> for Rc<T, A>where
    A: Allocator,
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

1.0.0sourceimpl<T, A> Clone for Rc<T, A>where
    A: Allocator + Clone,
    T: ?Sized,
sourcefn clone(&self) -> Rc<T, A>
Makes a clone of the Rc pointer. This creates another pointer to the same allocation, increasing the strong reference count. Examples use std::rc::Rc;
let five = Rc::new(5);
let _ = Rc::clone(&five); 
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.0.0sourceimpl<T, A> Debug for Rc<T, A>where
    T: Debug + ?Sized,
    A: Allocator,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.80.0sourceimpl<T> Default for Rc<[T]>
sourcefn default() -> Rc<[T]>
Creates an empty [T] inside an Rc This may or may not share an allocation with other Rcs on the same thread. 
1.80.0sourceimpl Default for Rc<CStr>
sourcefn default() -> Rc<CStr>
Creates an empty CStr inside an Rc This may or may not share an allocation with other Rcs on the same thread. 
1.0.0sourceimpl<T> Default for Rc<T>where
    T: Default,
sourcefn default() -> Rc<T>
Creates a new Rc<T>, with the Default value for T. Examples use std::rc::Rc;
let x: Rc<i32> = Default::default();
assert_eq!(*x, 0); 
1.80.0sourceimpl Default for Rc<str>
sourcefn default() -> Rc<str>
Creates an empty str inside an Rc This may or may not share an allocation with other Rcs on the same thread. 
1.0.0sourceimpl<T, A> Deref for Rc<T, A>where
    A: Allocator,
    T: ?Sized,
sourcetype Target = TThe resulting type after dereferencing.
sourcefn deref(&self) -> &TDereferences the value.
1.0.0sourceimpl<T, A> Display for Rc<T, A>where
    T: Display + ?Sized,
    A: Allocator,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.0.0sourceimpl<T, A> Drop for Rc<T, A>where
    A: Allocator,
    T: ?Sized,
sourcefn drop(&mut self)
Drops the Rc. This will decrement the strong reference count. If the strong reference count reaches zero then the only other references (if any) are Weak, so we drop the inner value. Examples use std::rc::Rc;
struct Foo;
impl Drop for Foo {
    fn drop(&mut self) {
        println!("dropped!");
    }
}
let foo  = Rc::new(Foo);
let foo2 = Rc::clone(&foo);
drop(foo);    // Doesn't print anything
drop(foo2);   // Prints "dropped!" 
1.21.0sourceimpl<T> From<&[T]> for Rc<[T]>where
    T: Clone,
sourcefn from(v: &[T]) -> Rc<[T]>
Allocates a reference-counted slice and fills it by cloning vâ€™s items. Example let original: &[i32] = &[1, 2, 3];
let shared: Rc<[i32]> = Rc::from(original);
assert_eq!(&[1, 2, 3], &shared[..]); 
1.24.0sourceimpl From<&CStr> for Rc<CStr>
sourcefn from(s: &CStr) -> Rc<CStr>
Converts a &CStr into a Rc<CStr>, by copying the contents into a newly allocated Rc. 
1.24.0sourceimpl From<&OsStr> for Rc<OsStr>
sourcefn from(s: &OsStr) -> Rc<OsStr>
Copies the string into a newly allocated Rc<OsStr>. 
1.24.0sourceimpl From<&Path> for Rc<Path>
sourcefn from(s: &Path) -> Rc<Path>
Converts a Path into an Rc by copying the Path data into a new Rc buffer. 
1.21.0sourceimpl From<&str> for Rc<str>
sourcefn from(v: &str) -> Rc<str>
Allocates a reference-counted string slice and copies v into it. Example let shared: Rc<str> = Rc::from("statue");
assert_eq!("statue", &shared[..]); 
1.74.0sourceimpl<T, const N: usize> From<[T; N]> for Rc<[T]>
sourcefn from(v: [T; N]) -> Rc<[T]>
Converts a [T; N] into an Rc<[T]>. The conversion moves the array into a newly allocated Rc. Example let original: [i32; 3] = [1, 2, 3];
let shared: Rc<[i32]> = Rc::from(original);
assert_eq!(&[1, 2, 3], &shared[..]); 
1.21.0sourceimpl<T, A> From<Box<T, A>> for Rc<T, A>where
    A: Allocator,
    T: ?Sized,
sourcefn from(v: Box<T, A>) -> Rc<T, A>
Move a boxed object to a new, reference counted, allocation. Example let original: Box<i32> = Box::new(1);
let shared: Rc<i32> = Rc::from(original);
assert_eq!(1, *shared); 
1.24.0sourceimpl From<CString> for Rc<CStr>
sourcefn from(s: CString) -> Rc<CStr>
Converts a CString into an Rc<CStr> by moving the CString data into a new Rc buffer. 
1.45.0sourceimpl<'a, B> From<Cow<'a, B>> for Rc<B>where
    B: ToOwned + ?Sized,
    Rc<B>: From<&'a B> + From<<B as ToOwned>::Owned>,
sourcefn from(cow: Cow<'a, B>) -> Rc<B>
Creates a reference-counted pointer from a clone-on-write pointer by copying its content. Example let cow: Cow<'_, str> = Cow::Borrowed("eggplant");
let shared: Rc<str> = Rc::from(cow);
assert_eq!("eggplant", &shared[..]); 
1.24.0sourceimpl From<OsString> for Rc<OsStr>
sourcefn from(s: OsString) -> Rc<OsStr>
Converts an OsString into an Rc<OsStr> by moving the OsString data into a new Rc buffer. 
1.24.0sourceimpl From<PathBuf> for Rc<Path>
sourcefn from(s: PathBuf) -> Rc<Path>
Converts a PathBuf into an Rc<Path> by moving the PathBuf data into a new Rc buffer. 
sourceimpl<W> From<Rc<W>> for LocalWakerwhere
    W: LocalWake + 'static,
sourcefn from(waker: Rc<W>) -> LocalWaker
Use a Wake-able type as a LocalWaker. No heap allocations or atomic operations are used for this conversion. 
sourceimpl<W> From<Rc<W>> for RawWakerwhere
    W: LocalWake + 'static,
sourcefn from(waker: Rc<W>) -> RawWaker
Use a Wake-able type as a RawWaker. No heap allocations or atomic operations are used for this conversion. 
1.62.0sourceimpl From<Rc<str>> for Rc<[u8]>
sourcefn from(rc: Rc<str>) -> Rc<[u8]>
Converts a reference-counted string slice into a byte slice. Example let string: Rc<str> = Rc::from("eggplant");
let bytes: Rc<[u8]> = Rc::from(string);
assert_eq!("eggplant".as_bytes(), bytes.as_ref()); 
1.21.0sourceimpl From<String> for Rc<str>
sourcefn from(v: String) -> Rc<str>
Allocates a reference-counted string slice and copies v into it. Example let original: String = "statue".to_owned();
let shared: Rc<str> = Rc::from(original);
assert_eq!("statue", &shared[..]); 
1.6.0sourceimpl<T> From<T> for Rc<T>
sourcefn from(t: T) -> Rc<T>
Converts a generic type T into an Rc<T> The conversion allocates on the heap and moves t from the stack into it. Example let x = 5;
let rc = Rc::new(5);
assert_eq!(Rc::from(x), rc); 
1.21.0sourceimpl<T, A> From<Vec<T, A>> for Rc<[T], A>where
    A: Allocator,
sourcefn from(v: Vec<T, A>) -> Rc<[T], A>
Allocates a reference-counted slice and moves vâ€™s items into it. Example let unique: Vec<i32> = vec![1, 2, 3];
let shared: Rc<[i32]> = Rc::from(unique);
assert_eq!(&[1, 2, 3], &shared[..]); 
1.37.0sourceimpl<T> FromIterator<T> for Rc<[T]>
sourcefn from_iter<I>(iter: I) -> Rc<[T]>where
    I: IntoIterator<Item = T>,
Takes each element in the Iterator and collects it into an Rc<[T]>. Performance characteristics
The general case In the general case, collecting into Rc<[T]> is done by first collecting into a Vec<T>. That is, when writing the following: let evens: Rc<[u8]> = (0..10).filter(|&x| x % 2 == 0).collect(); this behaves as if we wrote: let evens: Rc<[u8]> = (0..10).filter(|&x| x % 2 == 0)
    .collect::<Vec<_>>() // The first set of allocations happens here.
    .into(); // A second allocation for `Rc<[T]>` happens here. This will allocate as many times as needed for constructing the Vec<T> and then it will allocate once for turning the Vec<T> into the Rc<[T]>. Iterators of known length When your Iterator implements TrustedLen and is of an exact size, a single allocation will be made for the Rc<[T]>. For example: let evens: Rc<[u8]> = (0..10).collect(); // Just a single allocation happens here. 
1.0.0sourceimpl<T, A> Hash for Rc<T, A>where
    T: Hash + ?Sized,
    A: Allocator,
sourcefn hash<H>(&self, state: &mut H)where
    H: Hasher,Feeds this value into the given Hasher. Read more
1.3.0sourcefn hash_slice<H>(data: &[Self], state: &mut H)where
    H: Hasher,
    Self: Sized,Feeds a slice of this type into the given Hasher. Read more

1.0.0sourceimpl<T, A> Ord for Rc<T, A>where
    T: Ord + ?Sized,
    A: Allocator,
sourcefn cmp(&self, other: &Rc<T, A>) -> Ordering
Comparison for two Rcs. The two are compared by calling cmp() on their inner values. Examples use std::rc::Rc;
use std::cmp::Ordering;
let five = Rc::new(5);
assert_eq!(Ordering::Less, five.cmp(&Rc::new(6))); 
1.21.0sourcefn max(self, other: Self) -> Selfwhere
    Self: Sized,Compares and returns the maximum of two values. Read more
1.21.0sourcefn min(self, other: Self) -> Selfwhere
    Self: Sized,Compares and returns the minimum of two values. Read more
1.50.0sourcefn clamp(self, min: Self, max: Self) -> Selfwhere
    Self: Sized,Restrict a value to a certain interval. Read more

1.0.0sourceimpl<T, A> PartialEq for Rc<T, A>where
    T: PartialEq + ?Sized,
    A: Allocator,
sourcefn eq(&self, other: &Rc<T, A>) -> bool
Equality for two Rcs. Two Rcs are equal if their inner values are equal, even if they are stored in different allocation. If T also implements Eq (implying reflexivity of equality), two Rcs that point to the same allocation are always equal. Examples use std::rc::Rc;
let five = Rc::new(5);
assert!(five == Rc::new(5)); 
sourcefn ne(&self, other: &Rc<T, A>) -> bool
Inequality for two Rcs. Two Rcs are not equal if their inner values are not equal. If T also implements Eq (implying reflexivity of equality), two Rcs that point to the same allocation are always equal. Examples use std::rc::Rc;
let five = Rc::new(5);
assert!(five != Rc::new(6)); 
1.0.0sourceimpl<T, A> PartialOrd for Rc<T, A>where
    T: PartialOrd + ?Sized,
    A: Allocator,
sourcefn partial_cmp(&self, other: &Rc<T, A>) -> Option<Ordering>
Partial comparison for two Rcs. The two are compared by calling partial_cmp() on their inner values. Examples use std::rc::Rc;
use std::cmp::Ordering;
let five = Rc::new(5);
assert_eq!(Some(Ordering::Less), five.partial_cmp(&Rc::new(6))); 
sourcefn lt(&self, other: &Rc<T, A>) -> bool
Less-than comparison for two Rcs. The two are compared by calling < on their inner values. Examples use std::rc::Rc;
let five = Rc::new(5);
assert!(five < Rc::new(6)); 
sourcefn le(&self, other: &Rc<T, A>) -> bool
â€˜Less than or equal toâ€™ comparison for two Rcs. The two are compared by calling <= on their inner values. Examples use std::rc::Rc;
let five = Rc::new(5);
assert!(five <= Rc::new(5)); 
sourcefn gt(&self, other: &Rc<T, A>) -> bool
Greater-than comparison for two Rcs. The two are compared by calling > on their inner values. Examples use std::rc::Rc;
let five = Rc::new(5);
assert!(five > Rc::new(4)); 
sourcefn ge(&self, other: &Rc<T, A>) -> bool
â€˜Greater than or equal toâ€™ comparison for two Rcs. The two are compared by calling >= on their inner values. Examples use std::rc::Rc;
let five = Rc::new(5);
assert!(five >= Rc::new(5)); 
1.0.0sourceimpl<T, A> Pointer for Rc<T, A>where
    A: Allocator,
    T: ?Sized,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.43.0sourceimpl<T, A, const N: usize> TryFrom<Rc<[T], A>> for Rc<[T; N], A>where
    A: Allocator,
sourcetype Error = Rc<[T], A>The type returned in the event of a conversion error.
sourcefn try_from(
    boxed_slice: Rc<[T], A>,
) -> Result<Rc<[T; N], A>, <Rc<[T; N], A> as TryFrom<Rc<[T], A>>>::Error>Performs the conversion.
sourceimpl<T, U, A> CoerceUnsized<Rc<U, A>> for Rc<T, A>where
    T: Unsize<U> + ?Sized,
    A: Allocator,
    U: ?Sized,sourceimpl<T, A> DerefPure for Rc<T, A>where
    A: Allocator,
    T: ?Sized,sourceimpl<T, U> DispatchFromDyn<Rc<U>> for Rc<T>where
    T: Unsize<U> + ?Sized,
    U: ?Sized,1.0.0sourceimpl<T, A> Eq for Rc<T, A>where
    T: Eq + ?Sized,
    A: Allocator,sourceimpl<T, A> PinCoerceUnsized for Rc<T, A>where
    A: Allocator,
    T: ?Sized,1.58.0sourceimpl<T, A> RefUnwindSafe for Rc<T, A>where
    T: RefUnwindSafe + ?Sized,
    A: Allocator + UnwindSafe,1.0.0sourceimpl<T, A> !Send for Rc<T, A>where
    A: Allocator,
    T: ?Sized,1.0.0sourceimpl<T, A> !Sync for Rc<T, A>where
    A: Allocator,
    T: ?Sized,1.33.0sourceimpl<T, A> Unpin for Rc<T, A>where
    A: Allocator,
    T: ?Sized,1.9.0sourceimpl<T, A> UnwindSafe for Rc<T, A>where
    T: RefUnwindSafe + ?Sized,
    A: Allocator + UnwindSafe,
Auto Trait Implementations
impl<T, A> Freeze for Rc<T, A>where
    A: Freeze,
    T: ?Sized,
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<!> for T
sourcefn from(t: !) -> TConverts to this type from the input type.
sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T> ToString for Twhere
    T: Display + ?Sized,
sourcedefault fn to_string(&self) -> StringConverts the given value to a String. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/rc/struct.Rc.html


std/intrinsics/fn.minnumf128
-----------------------------------------------------------
Function minnumf128
pub extern "rust-intrinsic" fn minnumf128(x: f128, y: f128) -> f128
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Returns the minimum of two f128 values. Note that, unlike most intrinsics, this is safe to call; it does not require an unsafe block. Therefore, implementations must not require the user to uphold any safety invariants. The stabilized version of this intrinsic is f128::min
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.minnumf128.html


std/intrinsics/fn.ceilf16
-----------------------------------------------------------
Function ceilf16
pub unsafe extern "rust-intrinsic" fn ceilf16(x: f16) -> f16
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Returns the smallest integer greater than or equal to an f16. The stabilized version of this intrinsic is f16::ceil
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.ceilf16.html


std/intrinsics/simd/fn.simd_fexp
-----------------------------------------------------------
Function simd_fexp
pub unsafe extern "rust-intrinsic" fn simd_fexp<T>(a: T) -> T
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
T must be a vector of floats.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/simd/fn.simd_fexp.html


std/sync/struct.mappedrwlockreadguard
-----------------------------------------------------------
Struct MappedRwLockReadGuard
pub struct MappedRwLockReadGuard<'a, T: ?Sized + 'a> { /* private fields */ }
ðŸ”¬This is a nightly-only experimental API. (mapped_lock_guards #117108)
RAII structure used to release the shared read access of a lock when dropped, which can point to a subfield of the protected data. This structure is created by the map and try_map methods on RwLockReadGuard. Implementations
sourceimpl<'a, T: ?Sized> MappedRwLockReadGuard<'a, T>
sourcepub fn map<U, F>(orig: Self, f: F) -> MappedRwLockReadGuard<'a, U>where
    F: FnOnce(&T) -> &U,
    U: ?Sized,
ðŸ”¬This is a nightly-only experimental API. (mapped_lock_guards #117108)
Makes a MappedRwLockReadGuard for a component of the borrowed data, e.g. an enum variant. The RwLock is already locked for reading, so this cannot fail. This is an associated function that needs to be used as MappedRwLockReadGuard::map(...). A method would interfere with methods of the same name on the contents of the MappedRwLockReadGuard used through Deref. Panics If the closure panics, the guard will be dropped (unlocked) and the RwLock will not be poisoned. 
sourcepub fn try_map<U, F>(
    orig: Self,
    f: F,
) -> Result<MappedRwLockReadGuard<'a, U>, Self>where
    F: FnOnce(&T) -> Option<&U>,
    U: ?Sized,
ðŸ”¬This is a nightly-only experimental API. (mapped_lock_guards #117108)
Makes a MappedRwLockReadGuard for a component of the borrowed data. The original guard is returned as an Err(...) if the closure returns None. The RwLock is already locked for reading, so this cannot fail. This is an associated function that needs to be used as MappedRwLockReadGuard::try_map(...). A method would interfere with methods of the same name on the contents of the MappedRwLockReadGuard used through Deref. Panics If the closure panics, the guard will be dropped (unlocked) and the RwLock will not be poisoned. 

Trait Implementations
sourceimpl<T: ?Sized + Debug> Debug for MappedRwLockReadGuard<'_, T>
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

sourceimpl<T: ?Sized> Deref for MappedRwLockReadGuard<'_, T>
sourcetype Target = TThe resulting type after dereferencing.
sourcefn deref(&self) -> &TDereferences the value.
sourceimpl<T: ?Sized + Display> Display for MappedRwLockReadGuard<'_, T>
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

sourceimpl<T: ?Sized> Drop for MappedRwLockReadGuard<'_, T>
sourcefn drop(&mut self)Executes the destructor for this type. Read more

sourceimpl<T: ?Sized> !Send for MappedRwLockReadGuard<'_, T>sourceimpl<T: ?Sized + Sync> Sync for MappedRwLockReadGuard<'_, T>
Auto Trait Implementations
impl<'a, T> Freeze for MappedRwLockReadGuard<'a, T>where
    T: ?Sized,impl<'a, T> RefUnwindSafe for MappedRwLockReadGuard<'a, T>where
    T: RefUnwindSafe + ?Sized,impl<'a, T> Unpin for MappedRwLockReadGuard<'a, T>where
    T: ?Sized,impl<'a, T> UnwindSafe for MappedRwLockReadGuard<'a, T>where
    T: RefUnwindSafe + ?Sized,
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToString for Twhere
    T: Display + ?Sized,
sourcedefault fn to_string(&self) -> StringConverts the given value to a String. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/sync/struct.MappedRwLockReadGuard.html


std/f16/consts/constant.frac_2_pi
-----------------------------------------------------------
Constant FRAC_2_PI
pub const FRAC_2_PI: f16 = 0.636619772367581343075535053490057448_f16; // 0.63672f16
ðŸ”¬This is a nightly-only experimental API. (f16 #116909)
2/Ï€
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/f16/consts/constant.FRAC_2_PI.html


std/intrinsics/fn.ptr_mask
-----------------------------------------------------------
Function ptr_mask
pub extern "rust-intrinsic" fn ptr_mask<T>(
    ptr: *const T,
    mask: usize,
) -> *const T
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Masks out bits of the pointer according to a mask. Note that, unlike most intrinsics, this is safe to call; it does not require an unsafe block. Therefore, implementations must not require the user to uphold any safety invariants. Consider using pointer::mask instead.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/fn.ptr_mask.html


std/future/trait.intofuture
-----------------------------------------------------------
Trait IntoFuture
pub trait IntoFuture {
    type Output;
    type IntoFuture: Future<Output = Self::Output>;
    // Required method
    fn into_future(self) -> Self::IntoFuture;
}
Conversion into a Future. By implementing IntoFuture for a type, you define how it will be converted to a future. 
.await desugaring The .await keyword desugars into a call to IntoFuture::into_future first before polling the future to completion. IntoFuture is implemented for all T: Future which means the into_future method will be available on all futures. use std::future::IntoFuture;
let v = async { "meow" };
let mut fut = v.into_future();
assert_eq!("meow", fut.await); Async builders When implementing futures manually there will often be a choice between implementing Future or IntoFuture for a type. Implementing Future is a good choice in most cases. But implementing IntoFuture is most useful when implementing â€œasync builderâ€ types, which allow their values to be modified multiple times before being .awaited. use std::future::{ready, Ready, IntoFuture};
/// Eventually multiply two numbers
pub struct Multiply {
    num: u16,
    factor: u16,
}
impl Multiply {
    /// Constructs a new instance of `Multiply`.
    pub fn new(num: u16, factor: u16) -> Self {
        Self { num, factor }
    }
    /// Set the number to multiply by the factor.
    pub fn number(mut self, num: u16) -> Self {
        self.num = num;
        self
    }
    /// Set the factor to multiply the number with.
    pub fn factor(mut self, factor: u16) -> Self {
        self.factor = factor;
        self
    }
}
impl IntoFuture for Multiply {
    type Output = u16;
    type IntoFuture = Ready<Self::Output>;
    fn into_future(self) -> Self::IntoFuture {
        ready(self.num * self.factor)
    }
}
// NOTE: Rust does not yet have an `async fn main` function, that functionality
// currently only exists in the ecosystem.
async fn run() {
    let num = Multiply::new(0, 0)  // initialize the builder to number: 0, factor: 0
        .number(2)                 // change the number to 2
        .factor(2)                 // change the factor to 2
        .await;                    // convert to future and .await
    assert_eq!(num, 4);
} Usage in trait bounds Using IntoFuture in trait bounds allows a function to be generic over both Future and IntoFuture. This is convenient for users of the function, so when they are using it they donâ€™t have to make an extra call to IntoFuture::into_future to obtain an instance of Future: use std::future::IntoFuture;
/// Converts the output of a future to a string.
async fn fut_to_string<Fut>(fut: Fut) -> String
where
    Fut: IntoFuture,
    Fut::Output: std::fmt::Debug,
{
    format!("{:?}", fut.await)
} Required Associated Types
1.64.0sourcetype Output
The output that the future will produce on completion. 
1.64.0sourcetype IntoFuture: Future<Output = Self::Output>
Which kind of future are we turning this into? 
Required Methods
1.64.0sourcefn into_future(self) -> Self::IntoFuture
Creates a future from a value. Examples Basic usage: use std::future::IntoFuture;
let v = async { "meow" };
let mut fut = v.into_future();
assert_eq!("meow", fut.await); 
Implementors
1.64.0sourceimpl<F> IntoFuture for Fwhere
    F: Future,
sourcetype Output = <F as Future>::Outputsourcetype IntoFuture = F

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/future/trait.IntoFuture.html


std/collections/hash_map/enum.rawentrymut
-----------------------------------------------------------
Enum RawEntryMut
pub enum RawEntryMut<'a, K: 'a, V: 'a, S: 'a> {
    Occupied(RawOccupiedEntryMut<'a, K, V, S>),
    Vacant(RawVacantEntryMut<'a, K, V, S>),
}
ðŸ”¬This is a nightly-only experimental API. (hash_raw_entry #56167)
A view into a single entry in a map, which may either be vacant or occupied. This is a lower-level version of Entry. This enum is constructed through the raw_entry_mut method on HashMap, then calling one of the methods of that RawEntryBuilderMut. Variants
Occupied(RawOccupiedEntryMut<'a, K, V, S>)
ðŸ”¬This is a nightly-only experimental API. (hash_raw_entry #56167)
An occupied entry. 
Vacant(RawVacantEntryMut<'a, K, V, S>)
ðŸ”¬This is a nightly-only experimental API. (hash_raw_entry #56167)
A vacant entry. 
Implementations
sourceimpl<'a, K, V, S> RawEntryMut<'a, K, V, S>
sourcepub fn or_insert(self, default_key: K, default_val: V) -> (&'a mut K, &'a mut V)where
    K: Hash,
    S: BuildHasher,
ðŸ”¬This is a nightly-only experimental API. (hash_raw_entry #56167)
Ensures a value is in the entry by inserting the default if empty, and returns mutable references to the key and value in the entry. Examples #![feature(hash_raw_entry)]
use std::collections::HashMap;
let mut map: HashMap<&str, u32> = HashMap::new();
map.raw_entry_mut().from_key("poneyland").or_insert("poneyland", 3);
assert_eq!(map["poneyland"], 3);
*map.raw_entry_mut().from_key("poneyland").or_insert("poneyland", 10).1 *= 2;
assert_eq!(map["poneyland"], 6); 
sourcepub fn or_insert_with<F>(self, default: F) -> (&'a mut K, &'a mut V)where
    F: FnOnce() -> (K, V),
    K: Hash,
    S: BuildHasher,
ðŸ”¬This is a nightly-only experimental API. (hash_raw_entry #56167)
Ensures a value is in the entry by inserting the result of the default function if empty, and returns mutable references to the key and value in the entry. Examples #![feature(hash_raw_entry)]
use std::collections::HashMap;
let mut map: HashMap<&str, String> = HashMap::new();
map.raw_entry_mut().from_key("poneyland").or_insert_with(|| {
    ("poneyland", "hoho".to_string())
});
assert_eq!(map["poneyland"], "hoho".to_string()); 
sourcepub fn and_modify<F>(self, f: F) -> Selfwhere
    F: FnOnce(&mut K, &mut V),
ðŸ”¬This is a nightly-only experimental API. (hash_raw_entry #56167)
Provides in-place mutable access to an occupied entry before any potential inserts into the map. Examples #![feature(hash_raw_entry)]
use std::collections::HashMap;
let mut map: HashMap<&str, u32> = HashMap::new();
map.raw_entry_mut()
   .from_key("poneyland")
   .and_modify(|_k, v| { *v += 1 })
   .or_insert("poneyland", 42);
assert_eq!(map["poneyland"], 42);
map.raw_entry_mut()
   .from_key("poneyland")
   .and_modify(|_k, v| { *v += 1 })
   .or_insert("poneyland", 0);
assert_eq!(map["poneyland"], 43); 

Trait Implementations
sourceimpl<K: Debug, V: Debug, S> Debug for RawEntryMut<'_, K, V, S>
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

Auto Trait Implementations
impl<'a, K, V, S> Freeze for RawEntryMut<'a, K, V, S>impl<'a, K, V, S> RefUnwindSafe for RawEntryMut<'a, K, V, S>where
    S: RefUnwindSafe,
    K: RefUnwindSafe,
    V: RefUnwindSafe,impl<'a, K, V, S> Send for RawEntryMut<'a, K, V, S>where
    K: Send,
    V: Send,
    S: Send + Sync,impl<'a, K, V, S> Sync for RawEntryMut<'a, K, V, S>where
    K: Sync,
    V: Sync,
    S: Sync,impl<'a, K, V, S> Unpin for RawEntryMut<'a, K, V, S>impl<'a, K, V, S> !UnwindSafe for RawEntryMut<'a, K, V, S>
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/collections/hash_map/enum.RawEntryMut.html


std/os/unix/raw/type.time_t
-----------------------------------------------------------
Type Alias time_t
pub type time_t = i64;
ðŸ‘ŽDeprecated since 1.8.0: these type aliases are no longer supported by the standard library, the libc crate on crates.io should be used instead for the correct definitions
Available on Unix and Linux only.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/os/unix/raw/type.time_t.html


std/io/enum.errorkind
-----------------------------------------------------------
Enum ErrorKind
#[non_exhaustive]pub enum ErrorKind {
Show 41 variants    NotFound,
    PermissionDenied,
    ConnectionRefused,
    ConnectionReset,
    HostUnreachable,
    NetworkUnreachable,
    ConnectionAborted,
    NotConnected,
    AddrInUse,
    AddrNotAvailable,
    NetworkDown,
    BrokenPipe,
    AlreadyExists,
    WouldBlock,
    NotADirectory,
    IsADirectory,
    DirectoryNotEmpty,
    ReadOnlyFilesystem,
    FilesystemLoop,
    StaleNetworkFileHandle,
    InvalidInput,
    InvalidData,
    TimedOut,
    WriteZero,
    StorageFull,
    NotSeekable,
    FilesystemQuotaExceeded,
    FileTooLarge,
    ResourceBusy,
    ExecutableFileBusy,
    Deadlock,
    CrossesDevices,
    TooManyLinks,
    InvalidFilename,
    ArgumentListTooLong,
    Interrupted,
    Unsupported,
    UnexpectedEof,
    OutOfMemory,
    InProgress,
    Other,
}
A list specifying general categories of I/O error. This list is intended to grow over time and it is not recommended to exhaustively match against it. It is used with the io::Error type. Handling errors and matching on ErrorKind
 In application code, use match for the ErrorKind values you are expecting; use _ to match â€œall other errorsâ€. In comprehensive and thorough tests that want to verify that a test doesnâ€™t return any known incorrect error kind, you may want to cut-and-paste the current full list of errors from here into your test code, and then match _ as the correct case. This seems counterintuitive, but it will make your tests more robust. In particular, if you want to verify that your code does produce an unrecognized error kind, the robust solution is to check for all the recognized error kinds and fail in those cases. Variants (Non-exhaustive)
This enum is marked as non-exhaustiveNon-exhaustive enums could have additional variants added in future. Therefore, when matching against variants of non-exhaustive enums, an extra wildcard arm must be added to account for any future variants.
1.0.0NotFound
An entity was not found, often a file. 
1.0.0PermissionDenied
The operation lacked the necessary privileges to complete. 
1.0.0ConnectionRefused
The connection was refused by the remote server. 
1.0.0ConnectionReset
The connection was reset by the remote server. 
1.83.0HostUnreachable
The remote host is not reachable. 
1.83.0NetworkUnreachable
The network containing the remote host is not reachable. 
1.0.0ConnectionAborted
The connection was aborted (terminated) by the remote server. 
1.0.0NotConnected
The network operation failed because it was not connected yet. 
1.0.0AddrInUse
A socket address could not be bound because the address is already in use elsewhere. 
1.0.0AddrNotAvailable
A nonexistent interface was requested or the requested address was not local. 
1.83.0NetworkDown
The systemâ€™s networking is down. 
1.0.0BrokenPipe
The operation failed because a pipe was closed. 
1.0.0AlreadyExists
An entity already exists, often a file. 
1.0.0WouldBlock
The operation needs to block to complete, but the blocking operation was requested to not occur. 
1.83.0NotADirectory
A filesystem object is, unexpectedly, not a directory. For example, a filesystem path was specified where one of the intermediate directory components was, in fact, a plain file. 
1.83.0IsADirectory
The filesystem object is, unexpectedly, a directory. A directory was specified when a non-directory was expected. 
1.83.0DirectoryNotEmpty
A non-empty directory was specified where an empty directory was expected. 
1.83.0ReadOnlyFilesystem
The filesystem or storage medium is read-only, but a write operation was attempted. 
FilesystemLoop
ðŸ”¬This is a nightly-only experimental API. (io_error_more #86442)
Loop in the filesystem or IO subsystem; often, too many levels of symbolic links. There was a loop (or excessively long chain) resolving a filesystem object or file IO object. On Unix this is usually the result of a symbolic link loop; or, of exceeding the system-specific limit on the depth of symlink traversal. 
1.83.0StaleNetworkFileHandle
Stale network file handle. With some network filesystems, notably NFS, an open file (or directory) can be invalidated by problems with the network or server. 
1.0.0InvalidInput
A parameter was incorrect. 
1.2.0InvalidData
Data not valid for the operation were encountered. Unlike InvalidInput, this typically means that the operation parameters were valid, however the error was caused by malformed input data. For example, a function that reads a file into a string will error with InvalidData if the fileâ€™s contents are not valid UTF-8. 
1.0.0TimedOut
The I/O operationâ€™s timeout expired, causing it to be canceled. 
1.0.0WriteZero
An error returned when an operation could not be completed because a call to write returned Ok(0). This typically means that an operation could only succeed if it wrote a particular number of bytes but only a smaller number of bytes could be written. 
1.83.0StorageFull
The underlying storage (typically, a filesystem) is full. This does not include out of quota errors. 
1.83.0NotSeekable
Seek on unseekable file. Seeking was attempted on an open file handle which is not suitable for seeking - for example, on Unix, a named pipe opened with File::open. 
FilesystemQuotaExceeded
ðŸ”¬This is a nightly-only experimental API. (io_error_more #86442)
Filesystem quota was exceeded. 
1.83.0FileTooLarge
File larger than allowed or supported. This might arise from a hard limit of the underlying filesystem or file access API, or from an administratively imposed resource limitation. Simple disk full, and out of quota, have their own errors. 
1.83.0ResourceBusy
Resource is busy. 
1.83.0ExecutableFileBusy
Executable file is busy. An attempt was made to write to a file which is also in use as a running program. (Not all operating systems detect this situation.) 
1.83.0Deadlock
Deadlock (avoided). A file locking operation would result in deadlock. This situation is typically detected, if at all, on a best-effort basis. 
CrossesDevices
ðŸ”¬This is a nightly-only experimental API. (io_error_more #86442)
Cross-device or cross-filesystem (hard) link or rename. 
1.83.0TooManyLinks
Too many (hard) links to the same filesystem object. The filesystem does not support making so many hardlinks to the same file. 
InvalidFilename
ðŸ”¬This is a nightly-only experimental API. (io_error_more #86442)
A filename was invalid. This error can also cause if it exceeded the filename length limit. 
1.83.0ArgumentListTooLong
Program argument list too long. When trying to run an external program, a system or process limit on the size of the arguments would have been exceeded. 
1.0.0Interrupted
This operation was interrupted. Interrupted operations can typically be retried. 
1.53.0Unsupported
This operation is unsupported on this platform. This means that the operation can never succeed. 
1.6.0UnexpectedEof
An error returned when an operation could not be completed because an â€œend of fileâ€ was reached prematurely. This typically means that an operation could only succeed if it read a particular number of bytes but only a smaller number of bytes could be read. 
1.54.0OutOfMemory
An operation could not be completed, because it failed to allocate enough memory. 
InProgress
ðŸ”¬This is a nightly-only experimental API. (io_error_inprogress #130840)
The operation was partially successful and needs to be checked later on due to not blocking. 
1.0.0Other
A custom error that does not fall under any other I/O error kind. This can be used to construct your own Errors that do not match any ErrorKind. This ErrorKind is not used by the standard library. Errors from the standard library that do not fall under any of the I/O error kinds cannot be matched on, and will only match a wildcard (_) pattern. New ErrorKinds might be added in the future for some of those. 
Trait Implementations
1.0.0sourceimpl Clone for ErrorKind
sourcefn clone(&self) -> ErrorKindReturns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.0.0sourceimpl Debug for ErrorKind
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

1.60.0sourceimpl Display for ErrorKind
sourcefn fmt(&self, fmt: &mut Formatter<'_>) -> Result
Shows a human-readable description of the ErrorKind. This is similar to impl Display for Error, but doesnâ€™t require first converting to Error. Examples use std::io::ErrorKind;
assert_eq!("entity not found", ErrorKind::NotFound.to_string()); 
1.14.0sourceimpl From<ErrorKind> for Error
Intended for use for errors not exposed to the user, where allocating onto the heap (for normal construction via Error::new) is too costly. 
sourcefn from(kind: ErrorKind) -> Error
Converts an ErrorKind into an Error. This conversion creates a new error with a simple representation of error kind. Examples use std::io::{Error, ErrorKind};
let not_found = ErrorKind::NotFound;
let error = Error::from(not_found);
assert_eq!("entity not found", format!("{error}")); 
1.0.0sourceimpl Hash for ErrorKind
sourcefn hash<__H: Hasher>(&self, state: &mut __H)Feeds this value into the given Hasher. Read more
1.3.0sourcefn hash_slice<H>(data: &[Self], state: &mut H)where
    H: Hasher,
    Self: Sized,Feeds a slice of this type into the given Hasher. Read more

1.0.0sourceimpl Ord for ErrorKind
sourcefn cmp(&self, other: &ErrorKind) -> OrderingThis method returns an Ordering between self and other. Read more
1.21.0sourcefn max(self, other: Self) -> Selfwhere
    Self: Sized,Compares and returns the maximum of two values. Read more
1.21.0sourcefn min(self, other: Self) -> Selfwhere
    Self: Sized,Compares and returns the minimum of two values. Read more
1.50.0sourcefn clamp(self, min: Self, max: Self) -> Selfwhere
    Self: Sized,Restrict a value to a certain interval. Read more

1.0.0sourceimpl PartialEq for ErrorKind
sourcefn eq(&self, other: &ErrorKind) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.0.0sourceimpl PartialOrd for ErrorKind
sourcefn partial_cmp(&self, other: &ErrorKind) -> Option<Ordering>This method returns an ordering between self and other values if one exists. Read more
1.0.0sourcefn lt(&self, other: &Rhs) -> boolTests less than (for self and other) and is used by the < operator. Read more
1.0.0sourcefn le(&self, other: &Rhs) -> boolTests less than or equal to (for self and other) and is used by the <= operator. Read more
1.0.0sourcefn gt(&self, other: &Rhs) -> boolTests greater than (for self and other) and is used by the > operator. Read more
1.0.0sourcefn ge(&self, other: &Rhs) -> boolTests greater than or equal to (for self and other) and is used by the >= operator. Read more

1.0.0sourceimpl Copy for ErrorKind1.0.0sourceimpl Eq for ErrorKind1.0.0sourceimpl StructuralPartialEq for ErrorKind
Auto Trait Implementations
impl Freeze for ErrorKindimpl RefUnwindSafe for ErrorKindimpl Send for ErrorKindimpl Sync for ErrorKindimpl Unpin for ErrorKindimpl UnwindSafe for ErrorKind
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T> ToString for Twhere
    T: Display + ?Sized,
sourcedefault fn to_string(&self) -> StringConverts the given value to a String. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/io/enum.ErrorKind.html


std/future/fn.pending
-----------------------------------------------------------
Function pending
pub fn pending<T>() -> Pending<T> â“˜
Creates a future which never resolves, representing a computation that never finishes. Examples use std::future;
let future = future::pending();
let () = future.await;
unreachable!();
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/future/fn.pending.html


std/random/trait.random
-----------------------------------------------------------
Trait Random
pub trait Random: Sized {
    // Required method
    fn random(source: &mut (impl RandomSource + ?Sized)) -> Self;
}
ðŸ”¬This is a nightly-only experimental API. (random #130703)
A trait for getting a random value for a type. Warning: Be careful when manipulating random values! The random method on integers samples them with a uniform distribution, so a value of 1 is just as likely as i32::MAX. By using modulo operations, some of the resulting values can become more likely than others. Use audited crates when in doubt. Required Methods
sourcefn random(source: &mut (impl RandomSource + ?Sized)) -> Self
ðŸ”¬This is a nightly-only experimental API. (random #130703)
Generates a random value. 
Object Safety
This trait is not object safe.
Implementors
sourceimpl Random for boolsourceimpl Random for i8sourceimpl Random for i16sourceimpl Random for i32sourceimpl Random for i64sourceimpl Random for i128sourceimpl Random for isizesourceimpl Random for u8sourceimpl Random for u16sourceimpl Random for u32sourceimpl Random for u64sourceimpl Random for u128sourceimpl Random for usize

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/random/trait.Random.html


std/ops/trait.derefpure
-----------------------------------------------------------
Trait DerefPure
pub unsafe trait DerefPure { }
ðŸ”¬This is a nightly-only experimental API. (deref_pure_trait #87121)
Perma-unstable marker trait. Indicates that the type has a well-behaved Deref (and, if applicable, DerefMut) implementation. This is relied on for soundness of deref patterns. FIXME(deref_patterns): The precise semantics are undecided; the rough idea is that successive calls to deref/deref_mut without intermediate mutation should be idempotent, in the sense that they return the same value as far as pattern-matching is concerned. Calls to deref/deref_mut must leave the pointer itself likewise unchanged. Implementors
sourceimpl DerefPure for Stringsourceimpl<B> DerefPure for Cow<'_, B>where
    B: ToOwned + ?Sized,
    <B as ToOwned>::Owned: Borrow<B>,sourceimpl<Ptr> DerefPure for Pin<Ptr>where
    Ptr: DerefPure,sourceimpl<T> DerefPure for &Twhere
    T: ?Sized,sourceimpl<T> DerefPure for &mut Twhere
    T: ?Sized,sourceimpl<T> DerefPure for Ref<'_, T>where
    T: ?Sized,sourceimpl<T> DerefPure for RefMut<'_, T>where
    T: ?Sized,sourceimpl<T> DerefPure for ManuallyDrop<T>where
    T: ?Sized,sourceimpl<T, A> DerefPure for Box<T, A>where
    A: Allocator,
    T: ?Sized,sourceimpl<T, A> DerefPure for Rc<T, A>where
    A: Allocator,
    T: ?Sized,sourceimpl<T, A> DerefPure for Arc<T, A>where
    A: Allocator,
    T: ?Sized,sourceimpl<T, A> DerefPure for Vec<T, A>where
    A: Allocator,

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/ops/trait.DerefPure.html


std/path/struct.stripprefixerror
-----------------------------------------------------------
Struct StripPrefixError
pub struct StripPrefixError(/* private fields */);
An error returned from Path::strip_prefix if the prefix was not found. This struct is created by the strip_prefix method on Path. See its documentation for more. Trait Implementations
1.7.0sourceimpl Clone for StripPrefixError
sourcefn clone(&self) -> StripPrefixErrorReturns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.7.0sourceimpl Debug for StripPrefixError
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

1.7.0sourceimpl Display for StripPrefixError
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

1.7.0sourceimpl Error for StripPrefixError
sourcefn description(&self) -> &str
ðŸ‘ŽDeprecated since 1.42.0: use the Display impl or to_string()
 Read more
1.30.0sourcefn source(&self) -> Option<&(dyn Error + 'static)>Returns the lower-level source of this error, if any. Read more
1.0.0sourcefn cause(&self) -> Option<&dyn Error>
ðŸ‘ŽDeprecated since 1.33.0: replaced by Error::source, which can support downcasting
sourcefn provide<'a>(&'a self, request: &mut Request<'a>)
ðŸ”¬This is a nightly-only experimental API. (error_generic_member_access #99301)
Provides type-based access to context intended for error reports. Read more

1.7.0sourceimpl PartialEq for StripPrefixError
sourcefn eq(&self, other: &StripPrefixError) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.7.0sourceimpl Eq for StripPrefixError1.7.0sourceimpl StructuralPartialEq for StripPrefixError
Auto Trait Implementations
impl Freeze for StripPrefixErrorimpl RefUnwindSafe for StripPrefixErrorimpl Send for StripPrefixErrorimpl Sync for StripPrefixErrorimpl Unpin for StripPrefixErrorimpl UnwindSafe for StripPrefixError
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T> ToString for Twhere
    T: Display + ?Sized,
sourcedefault fn to_string(&self) -> StringConverts the given value to a String. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/path/struct.StripPrefixError.html


std/num/struct.parseinterror
-----------------------------------------------------------
Struct ParseIntError
pub struct ParseIntError { /* private fields */ }
An error which can be returned when parsing an integer. This error is used as the error type for the from_str_radix() functions on the primitive integer types, such as i8::from_str_radix. Potential causes Among other causes, ParseIntError can be thrown because of leading or trailing whitespace in the string e.g., when it is obtained from the standard input. Using the str::trim() method ensures that no whitespace remains before parsing. Example if let Err(e) = i32::from_str_radix("a12", 10) {
    println!("Failed conversion to i32: {e}");
} Implementations
sourceimpl ParseIntError
1.55.0 (const: 1.82.0)sourcepub const fn kind(&self) -> &IntErrorKind
Outputs the detailed cause of parsing an integer failing. 

Trait Implementations
1.0.0sourceimpl Clone for ParseIntError
sourcefn clone(&self) -> ParseIntErrorReturns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.0.0sourceimpl Debug for ParseIntError
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.0.0sourceimpl Display for ParseIntError
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.0.0sourceimpl Error for ParseIntError
sourcefn description(&self) -> &str
ðŸ‘ŽDeprecated since 1.42.0: use the Display impl or to_string()
 Read more
1.30.0sourcefn source(&self) -> Option<&(dyn Error + 'static)>Returns the lower-level source of this error, if any. Read more
1.0.0sourcefn cause(&self) -> Option<&dyn Error>
ðŸ‘ŽDeprecated since 1.33.0: replaced by Error::source, which can support downcasting
sourcefn provide<'a>(&'a self, request: &mut Request<'a>)
ðŸ”¬This is a nightly-only experimental API. (error_generic_member_access #99301)
Provides type-based access to context intended for error reports. Read more

1.0.0sourceimpl PartialEq for ParseIntError
sourcefn eq(&self, other: &ParseIntError) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.0.0sourceimpl Eq for ParseIntError1.0.0sourceimpl StructuralPartialEq for ParseIntError
Auto Trait Implementations
impl Freeze for ParseIntErrorimpl RefUnwindSafe for ParseIntErrorimpl Send for ParseIntErrorimpl Sync for ParseIntErrorimpl Unpin for ParseIntErrorimpl UnwindSafe for ParseIntError
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T> ToString for Twhere
    T: Display + ?Sized,
sourcedefault fn to_string(&self) -> StringConverts the given value to a String. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/num/struct.ParseIntError.html


std/intrinsics/mir/fn.len
-----------------------------------------------------------
Function Len
pub fn Len<T>(place: T) -> usize
ðŸ”¬This is a nightly-only experimental API. (custom_mir)

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/mir/fn.Len.html


std/alloc/type.layouterr
-----------------------------------------------------------
Type Alias LayoutErr
pub type LayoutErr = LayoutError;
ðŸ‘ŽDeprecated since 1.52.0: Name does not follow std convention, use LayoutError
Aliased Type
struct LayoutErr;
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/alloc/type.LayoutErr.html


std/sync/enum.trylockerror
-----------------------------------------------------------
Enum TryLockError
pub enum TryLockError<T> {
    Poisoned(PoisonError<T>),
    WouldBlock,
}
An enumeration of possible errors associated with a TryLockResult which can occur while trying to acquire a lock, from the try_lock method on a Mutex or the try_read and try_write methods on an RwLock. Variants
1.0.0Poisoned(PoisonError<T>)
The lock could not be acquired because another thread failed while holding the lock. 
1.0.0WouldBlock
The lock could not be acquired at this time because the operation would otherwise block. 
Trait Implementations
1.0.0sourceimpl<T> Debug for TryLockError<T>
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

1.0.0sourceimpl<T> Display for TryLockError<T>
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

1.0.0sourceimpl<T> Error for TryLockError<T>
sourcefn description(&self) -> &str
ðŸ‘ŽDeprecated since 1.42.0: use the Display impl or to_string()
 Read more
sourcefn cause(&self) -> Option<&dyn Error>
ðŸ‘ŽDeprecated since 1.33.0: replaced by Error::source, which can support downcasting
1.30.0sourcefn source(&self) -> Option<&(dyn Error + 'static)>Returns the lower-level source of this error, if any. Read more
sourcefn provide<'a>(&'a self, request: &mut Request<'a>)
ðŸ”¬This is a nightly-only experimental API. (error_generic_member_access #99301)
Provides type-based access to context intended for error reports. Read more

1.0.0sourceimpl<T> From<PoisonError<T>> for TryLockError<T>
sourcefn from(err: PoisonError<T>) -> TryLockError<T>Converts to this type from the input type.

Auto Trait Implementations
impl<T> Freeze for TryLockError<T>where
    T: Freeze,impl<T> RefUnwindSafe for TryLockError<T>where
    T: RefUnwindSafe,impl<T> Send for TryLockError<T>where
    T: Send,impl<T> Sync for TryLockError<T>where
    T: Sync,impl<T> Unpin for TryLockError<T>where
    T: Unpin,impl<T> UnwindSafe for TryLockError<T>where
    T: UnwindSafe,
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToString for Twhere
    T: Display + ?Sized,
sourcedefault fn to_string(&self) -> StringConverts the given value to a String. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/sync/enum.TryLockError.html


reference/expressions/underscore-expr
-----------------------------------------------------------
_ expressions  Syntax UnderscoreExpression : _  Underscore expressions, denoted with the symbol _, are used to signify a placeholder in a destructuring assignment. They may only appear in the left-hand side of an assignment. Note that this is distinct from the wildcard pattern. Examples of _ expressions: #![allow(unused)]
fn main() {
let p = (1, 2);
let mut a = 0;
(_, a) = p;
struct Position {
    x: u32,
    y: u32,
}
Position { x: a, y: _ } = Position{ x: 2, y: 3 };
// unused result, assignment to `_` used to declare intent and remove a warning
_ = 2 + 2;
// triggers unused_must_use warning
// 2 + 2;
// equivalent technique using a wildcard pattern in a let-binding
let _ = 2 + 2;
}
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/reference/expressions/underscore-expr.html


std/collections/btree_set/struct.cursormutkey
-----------------------------------------------------------
Struct CursorMutKey
pub struct CursorMutKey<'a, K, A = Global>where
    K: 'a,{ /* private fields */ }
ðŸ”¬This is a nightly-only experimental API. (btree_cursors #107540)
A cursor over a BTreeSet with editing operations, and which allows mutating elements. A Cursor is like an iterator, except that it can freely seek back-and-forth, and can safely mutate the set during iteration. This is because the lifetime of its yielded references is tied to its own lifetime, instead of just the underlying set. This means cursors cannot yield multiple elements at once. Cursors always point to a gap between two elements in the set, and can operate on the two immediately adjacent elements. A CursorMutKey is created from a CursorMut with the CursorMut::with_mutable_key method. Safety Since this cursor allows mutating elements, you must ensure that the BTreeSet invariants are maintained. Specifically:  The newly inserted element must be unique in the tree. All elements in the tree must remain in sorted order.  Implementations
sourceimpl<'a, T, A> CursorMutKey<'a, T, A>
sourcepub fn next(&mut self) -> Option<&mut T>
ðŸ”¬This is a nightly-only experimental API. (btree_cursors #107540)
Advances the cursor to the next gap, returning the element that it moved over. If the cursor is already at the end of the set then None is returned and the cursor is not moved. 
sourcepub fn prev(&mut self) -> Option<&mut T>
ðŸ”¬This is a nightly-only experimental API. (btree_cursors #107540)
Advances the cursor to the previous gap, returning the element that it moved over. If the cursor is already at the start of the set then None is returned and the cursor is not moved. 
sourcepub fn peek_next(&mut self) -> Option<&mut T>
ðŸ”¬This is a nightly-only experimental API. (btree_cursors #107540)
Returns a reference to the next element without moving the cursor. If the cursor is at the end of the set then None is returned 
sourcepub fn peek_prev(&mut self) -> Option<&mut T>
ðŸ”¬This is a nightly-only experimental API. (btree_cursors #107540)
Returns a reference to the previous element without moving the cursor. If the cursor is at the start of the set then None is returned. 
sourcepub fn as_cursor(&self) -> Cursor<'_, T>
ðŸ”¬This is a nightly-only experimental API. (btree_cursors #107540)
Returns a read-only cursor pointing to the same location as the CursorMutKey. The lifetime of the returned Cursor is bound to that of the CursorMutKey, which means it cannot outlive the CursorMutKey and that the CursorMutKey is frozen for the lifetime of the Cursor. 
sourceimpl<'a, T, A> CursorMutKey<'a, T, A>where
    T: Ord,
    A: Allocator + Clone,
sourcepub unsafe fn insert_after_unchecked(&mut self, value: T)
ðŸ”¬This is a nightly-only experimental API. (btree_cursors #107540)
Inserts a new element into the set in the gap that the cursor is currently pointing to. After the insertion the cursor will be pointing at the gap before the newly inserted element. Safety You must ensure that the BTreeSet invariants are maintained. Specifically:  The key of the newly inserted element must be unique in the tree. All elements in the tree must remain in sorted order.  
sourcepub unsafe fn insert_before_unchecked(&mut self, value: T)
ðŸ”¬This is a nightly-only experimental API. (btree_cursors #107540)
Inserts a new element into the set in the gap that the cursor is currently pointing to. After the insertion the cursor will be pointing at the gap after the newly inserted element. Safety You must ensure that the BTreeSet invariants are maintained. Specifically:  The newly inserted element must be unique in the tree. All elements in the tree must remain in sorted order.  
sourcepub fn insert_after(&mut self, value: T) -> Result<(), UnorderedKeyError>
ðŸ”¬This is a nightly-only experimental API. (btree_cursors #107540)
Inserts a new element into the set in the gap that the cursor is currently pointing to. After the insertion the cursor will be pointing at the gap before the newly inserted element. If the inserted element is not greater than the element before the cursor (if any), or if it not less than the element after the cursor (if any), then an UnorderedKeyError is returned since this would invalidate the Ord invariant between the elements of the set. 
sourcepub fn insert_before(&mut self, value: T) -> Result<(), UnorderedKeyError>
ðŸ”¬This is a nightly-only experimental API. (btree_cursors #107540)
Inserts a new element into the set in the gap that the cursor is currently pointing to. After the insertion the cursor will be pointing at the gap after the newly inserted element. If the inserted element is not greater than the element before the cursor (if any), or if it not less than the element after the cursor (if any), then an UnorderedKeyError is returned since this would invalidate the Ord invariant between the elements of the set. 
sourcepub fn remove_next(&mut self) -> Option<T>
ðŸ”¬This is a nightly-only experimental API. (btree_cursors #107540)
Removes the next element from the BTreeSet. The element that was removed is returned. The cursor position is unchanged (before the removed element). 
sourcepub fn remove_prev(&mut self) -> Option<T>
ðŸ”¬This is a nightly-only experimental API. (btree_cursors #107540)
Removes the preceding element from the BTreeSet. The element that was removed is returned. The cursor position is unchanged (after the removed element). 

Trait Implementations
sourceimpl<K, A> Debug for CursorMutKey<'_, K, A>where
    K: Debug,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

Auto Trait Implementations
impl<'a, K, A> Freeze for CursorMutKey<'a, K, A>impl<'a, K, A> RefUnwindSafe for CursorMutKey<'a, K, A>where
    A: RefUnwindSafe,
    K: RefUnwindSafe,impl<'a, K, A> Send for CursorMutKey<'a, K, A>where
    A: Send,
    K: Send,impl<'a, K, A> Sync for CursorMutKey<'a, K, A>where
    A: Sync,
    K: Sync,impl<'a, K, A> Unpin for CursorMutKey<'a, K, A>impl<'a, K, A = Global> !UnwindSafe for CursorMutKey<'a, K, A>
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/collections/btree_set/struct.CursorMutKey.html


std/str/struct.utf8chunks
-----------------------------------------------------------
Struct Utf8Chunks
pub struct Utf8Chunks<'a> { /* private fields */ }
An iterator used to decode a slice of mostly UTF-8 bytes to string slices (&str) and byte slices (&[u8]). If you want a simple conversion from UTF-8 byte slices to string slices, from_utf8 is easier to use. See the Utf8Chunk type for documenation of the items yielded by this iterator. Examples This can be used to create functionality similar to String::from_utf8_lossy without allocating heap memory: fn from_utf8_lossy<F>(input: &[u8], mut push: F) where F: FnMut(&str) {
    for chunk in input.utf8_chunks() {
        push(chunk.valid());
        if !chunk.invalid().is_empty() {
            push("\u{FFFD}");
        }
    }
} Trait Implementations
1.79.0sourceimpl<'a> Clone for Utf8Chunks<'a>
sourcefn clone(&self) -> Utf8Chunks<'a> â“˜Returns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.79.0sourceimpl Debug for Utf8Chunks<'_>
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.79.0sourceimpl<'a> Iterator for Utf8Chunks<'a>
sourcetype Item = Utf8Chunk<'a>The type of the elements being iterated over.
sourcefn next(&mut self) -> Option<Utf8Chunk<'a>>Advances the iterator and returns the next value. Read more
sourcefn next_chunk<const N: usize>(
    &mut self,
) -> Result<[Self::Item; N], IntoIter<Self::Item, N>>where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_next_chunk #98326)
Advances the iterator and returns an array containing the next N values. Read more
1.0.0sourcefn size_hint(&self) -> (usize, Option<usize>)Returns the bounds on the remaining length of the iterator. Read more
1.0.0sourcefn count(self) -> usizewhere
    Self: Sized,Consumes the iterator, counting the number of iterations and returning it. Read more
1.0.0sourcefn last(self) -> Option<Self::Item>where
    Self: Sized,Consumes the iterator, returning the last element. Read more
sourcefn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator by n elements. Read more
1.0.0sourcefn nth(&mut self, n: usize) -> Option<Self::Item>Returns the nth element of the iterator. Read more
1.28.0sourcefn step_by(self, step: usize) -> StepBy<Self> â“˜where
    Self: Sized,Creates an iterator starting at the same point, but stepping by the given amount at each iteration. Read more
1.0.0sourcefn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator<Item = Self::Item>,Takes two iterators and creates a new iterator over both in sequence. Read more
1.0.0sourcefn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator,â€˜Zips upâ€™ two iterators into a single iterator of pairs. Read more
sourcefn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G> â“˜where
    Self: Sized,
    G: FnMut() -> Self::Item,
ðŸ”¬This is a nightly-only experimental API. (iter_intersperse #79524)
Creates a new iterator which places an item generated by separator between adjacent items of the original iterator. Read more
1.0.0sourcefn map<B, F>(self, f: F) -> Map<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> B,Takes a closure and creates an iterator which calls that closure on each element. Read more
1.21.0sourcefn for_each<F>(self, f: F)where
    Self: Sized,
    F: FnMut(Self::Item),Calls a closure on each element of an iterator. Read more
1.0.0sourcefn filter<P>(self, predicate: P) -> Filter<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator which uses a closure to determine if an element should be yielded. Read more
1.0.0sourcefn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Creates an iterator that both filters and maps. Read more
1.0.0sourcefn enumerate(self) -> Enumerate<Self> â“˜where
    Self: Sized,Creates an iterator which gives the current iteration count as well as the next value. Read more
1.0.0sourcefn peekable(self) -> Peekable<Self> â“˜where
    Self: Sized,Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information. Read more
1.0.0sourcefn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that skips elements based on a predicate. Read more
1.0.0sourcefn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that yields elements based on a predicate. Read more
1.57.0sourcefn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(Self::Item) -> Option<B>,Creates an iterator that both yields elements based on a predicate and maps. Read more
1.0.0sourcefn skip(self, n: usize) -> Skip<Self> â“˜where
    Self: Sized,Creates an iterator that skips the first n elements. Read more
1.0.0sourcefn take(self, n: usize) -> Take<Self> â“˜where
    Self: Sized,Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner. Read more
1.0.0sourcefn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> â“˜where
    Self: Sized,
    F: FnMut(&mut St, Self::Item) -> Option<B>,An iterator adapter which, like fold, holds internal state, but unlike fold, produces a new iterator. Read more
1.0.0sourcefn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F> â“˜where
    Self: Sized,
    U: IntoIterator,
    F: FnMut(Self::Item) -> U,Creates an iterator that works like map, but flattens nested structure. Read more
sourcefn map_windows<F, R, const N: usize>(self, f: F) -> MapWindows<Self, F, N> â“˜where
    Self: Sized,
    F: FnMut(&[Self::Item; N]) -> R,
ðŸ”¬This is a nightly-only experimental API. (iter_map_windows #87155)
Calls the given function f for each contiguous window of size N over self and returns an iterator over the outputs of f. Like slice::windows(), the windows during mapping overlap as well. Read more
1.0.0sourcefn fuse(self) -> Fuse<Self> â“˜where
    Self: Sized,Creates an iterator which ends after the first None. Read more
1.0.0sourcefn inspect<F>(self, f: F) -> Inspect<Self, F> â“˜where
    Self: Sized,
    F: FnMut(&Self::Item),Does something with each element of an iterator, passing the value on. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Borrows an iterator, rather than consuming it. Read more
1.0.0sourcefn collect<B>(self) -> Bwhere
    B: FromIterator<Self::Item>,
    Self: Sized,Transforms an iterator into a collection. Read more
sourcefn collect_into<E>(self, collection: &mut E) -> &mut Ewhere
    E: Extend<Self::Item>,
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_collect_into #94780)
Collects all the items from an iterator into a collection. Read more
1.0.0sourcefn partition<B, F>(self, f: F) -> (B, B)where
    Self: Sized,
    B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool,Consumes an iterator, creating two collections from it. Read more
sourcefn is_partitioned<P>(self, predicate: P) -> boolwhere
    Self: Sized,
    P: FnMut(Self::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_is_partitioned #62544)
Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false. Read more
1.27.0sourcefn try_fold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> R,
    R: Try<Output = B>,An iterator method that applies a function as long as it returns successfully, producing a single, final value. Read more
1.27.0sourcefn try_for_each<F, R>(&mut self, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(Self::Item) -> R,
    R: Try<Output = ()>,An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. Read more
1.0.0sourcefn fold<B, F>(self, init: B, f: F) -> Bwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> B,Folds every element into an accumulator by applying an operation, returning the final result. Read more
1.51.0sourcefn reduce<F>(self, f: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(Self::Item, Self::Item) -> Self::Item,Reduces the elements to a single one, by repeatedly applying a reducing operation. Read more
sourcefn try_reduce<R>(
    &mut self,
    f: impl FnMut(Self::Item, Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = Self::Item>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (iterator_try_reduce #87053)
Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. Read more
1.0.0sourcefn all<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if every element of the iterator matches a predicate. Read more
1.0.0sourcefn any<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if any element of the iterator matches a predicate. Read more
1.0.0sourcefn find<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator that satisfies a predicate. Read more
1.30.0sourcefn find_map<B, F>(&mut self, f: F) -> Option<B>where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Applies function to the elements of iterator and returns the first non-none result. Read more
sourcefn try_find<R>(
    &mut self,
    f: impl FnMut(&Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = bool>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (try_find #63178)
Applies function to the elements of iterator and returns the first true result or the first error. Read more
1.0.0sourcefn position<P>(&mut self, predicate: P) -> Option<usize>where
    Self: Sized,
    P: FnMut(Self::Item) -> bool,Searches for an element in an iterator, returning its index. Read more
1.6.0sourcefn max_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the maximum value from the specified function. Read more
1.15.0sourcefn max_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the maximum value with respect to the specified comparison function. Read more
1.6.0sourcefn min_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the minimum value from the specified function. Read more
1.15.0sourcefn min_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the minimum value with respect to the specified comparison function. Read more
1.0.0sourcefn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)where
    FromA: Default + Extend<A>,
    FromB: Default + Extend<B>,
    Self: Sized + Iterator<Item = (A, B)>,Converts an iterator of pairs into a pair of containers. Read more
1.36.0sourcefn copied<'a, T>(self) -> Copied<Self> â“˜where
    T: 'a + Copy,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which copies all of its elements. Read more
1.0.0sourcefn cloned<'a, T>(self) -> Cloned<Self> â“˜where
    T: 'a + Clone,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which clones all of its elements. Read more
1.0.0sourcefn cycle(self) -> Cycle<Self> â“˜where
    Self: Sized + Clone,Repeats an iterator endlessly. Read more
sourcefn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N> â“˜where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_array_chunks #100450)
Returns an iterator over N elements of the iterator at a time. Read more
1.11.0sourcefn sum<S>(self) -> Swhere
    Self: Sized,
    S: Sum<Self::Item>,Sums the elements of an iterator. Read more
1.11.0sourcefn product<P>(self) -> Pwhere
    Self: Sized,
    P: Product<Self::Item>,Iterates over the entire iterator, multiplying all the elements Read more
sourcefn cmp_by<I, F>(self, other: I, cmp: F) -> Orderingwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn partial_cmp<I>(self, other: I) -> Option<Ordering>where
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,
Lexicographically compares the PartialOrd elements of this Iterator with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. Read more
sourcefn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering>where
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Option<Ordering>,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn eq<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are equal to those of another. Read more
sourcefn eq_by<I, F>(self, other: I, eq: F) -> boolwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function. Read more
1.5.0sourcefn ne<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are not equal to those of another. Read more
1.5.0sourcefn lt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less than those of another. Read more
1.5.0sourcefn le<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less or equal to those of another. Read more
1.5.0sourcefn gt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than those of another. Read more
1.5.0sourcefn ge<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than or equal to those of another. Read more
1.82.0sourcefn is_sorted_by<F>(self, compare: F) -> boolwhere
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> bool,Checks if the elements of this iterator are sorted using the given comparator function. Read more
1.82.0sourcefn is_sorted_by_key<F, K>(self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> K,
    K: PartialOrd,Checks if the elements of this iterator are sorted using the given key extraction function. Read more

1.79.0sourceimpl FusedIterator for Utf8Chunks<'_>
Auto Trait Implementations
impl<'a> Freeze for Utf8Chunks<'a>impl<'a> RefUnwindSafe for Utf8Chunks<'a>impl<'a> Send for Utf8Chunks<'a>impl<'a> Sync for Utf8Chunks<'a>impl<'a> Unpin for Utf8Chunks<'a>impl<'a> UnwindSafe for Utf8Chunks<'a>
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<I> IntoIterator for Iwhere
    I: Iterator,
sourcetype Item = <I as Iterator>::ItemThe type of the elements being iterated over.
sourcetype IntoIter = IWhich kind of iterator are we turning this into?
sourcefn into_iter(self) -> ICreates an iterator from a value. Read more

sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/str/struct.Utf8Chunks.html


std/simd/type.u32x2
-----------------------------------------------------------
Type Alias u32x2
pub type u32x2 = Simd<u32, 2>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD vector with two elements of type u32. Aliased Type
struct u32x2(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/type.u32x2.html


std/iter/trait.trustedlen
-----------------------------------------------------------
Trait TrustedLen
pub unsafe trait TrustedLen: Iterator { }
ðŸ”¬This is a nightly-only experimental API. (trusted_len #37572)
An iterator that reports an accurate length using size_hint. The iterator reports a size hint where it is either exact (lower bound is equal to upper bound), or the upper bound is None. The upper bound must only be None if the actual iterator length is larger than usize::MAX. In that case, the lower bound must be usize::MAX, resulting in an Iterator::size_hint() of (usize::MAX, None). The iterator must produce exactly the number of elements it reported or diverge before reaching the end. When shouldnâ€™t an adapter be TrustedLen? If an adapter makes an iterator shorter by a given amount, then itâ€™s usually incorrect for that adapter to implement TrustedLen. The inner iterator might return more than usize::MAX items, but thereâ€™s no way to know what k elements less than that will be, since the size_hint from the inner iterator has already saturated and lost that information. This is why Skip<I> isnâ€™t TrustedLen, even when I implements TrustedLen. Safety This trait must only be implemented when the contract is upheld. Consumers of this trait must inspect Iterator::size_hint()â€™s upper bound. Implementors
sourceimpl TrustedLen for ToLowercasesourceimpl TrustedLen for ToUppercasesourceimpl TrustedLen for Bytes<'_>sourceimpl<'a, I, T> TrustedLen for Cloned<I>where
    T: 'a + Clone,
    I: TrustedLen<Item = &'a T>,1.36.0sourceimpl<'a, I, T> TrustedLen for Copied<I>where
    T: 'a + Copy,
    I: TrustedLen<Item = &'a T>,sourceimpl<A> TrustedLen for IterRange<A>where
    A: TrustedStep,sourceimpl<A> TrustedLen for IterRangeFrom<A>where
    A: TrustedStep,sourceimpl<A> TrustedLen for IterRangeInclusive<A>where
    A: TrustedStep,sourceimpl<A> TrustedLen for Range<A>where
    A: TrustedStep,sourceimpl<A> TrustedLen for RangeFrom<A>where
    A: TrustedStep,sourceimpl<A> TrustedLen for RangeInclusive<A>where
    A: TrustedStep,sourceimpl<A> TrustedLen for std::option::IntoIter<A>sourceimpl<A> TrustedLen for std::option::Iter<'_, A>sourceimpl<A> TrustedLen for std::option::IterMut<'_, A>sourceimpl<A> TrustedLen for std::result::IntoIter<A>sourceimpl<A> TrustedLen for std::result::Iter<'_, A>sourceimpl<A> TrustedLen for std::result::IterMut<'_, A>sourceimpl<A> TrustedLen for Repeat<A>where
    A: Clone,sourceimpl<A> TrustedLen for RepeatN<A>where
    A: Clone,sourceimpl<A, B> TrustedLen for Chain<A, B>where
    A: TrustedLen,
    B: TrustedLen<Item = <A as Iterator>::Item>,sourceimpl<A, B> TrustedLen for Zip<A, B>where
    A: TrustedLen,
    B: TrustedLen,1.43.0sourceimpl<A, F> TrustedLen for OnceWith<F>where
    F: FnOnce() -> A,sourceimpl<A, F> TrustedLen for RepeatWith<F>where
    F: FnMut() -> A,sourceimpl<B, I, F> TrustedLen for Map<I, F>where
    I: TrustedLen,
    F: FnMut(<I as Iterator>::Item) -> B,sourceimpl<I> TrustedLen for &mut Iwhere
    I: TrustedLen + ?Sized,sourceimpl<I> TrustedLen for Enumerate<I>where
    I: TrustedLen,sourceimpl<I> TrustedLen for Flatten<I>where
    I: Iterator,
    <I as Iterator>::Item: IntoIterator,
    FlattenCompat<I, <<I as Iterator>::Item as IntoIterator>::IntoIter>: TrustedLen,sourceimpl<I> TrustedLen for Fuse<I>where
    I: TrustedLen,sourceimpl<I> TrustedLen for Peekable<I>where
    I: TrustedLen,sourceimpl<I> TrustedLen for Rev<I>where
    I: TrustedLen + DoubleEndedIterator,sourceimpl<I> TrustedLen for Skip<I>where
    I: Iterator + TrustedRandomAccess,sourceimpl<I> TrustedLen for StepBy<I>where
    I: Iterator + TrustedRandomAccess,sourceimpl<I> TrustedLen for Take<I>where
    I: TrustedLen,sourceimpl<I, U, F> TrustedLen for FlatMap<I, U, F>where
    I: Iterator,
    U: IntoIterator,
    F: FnMut(<I as Iterator>::Item) -> U,
    FlattenCompat<Map<I, F>, <U as IntoIterator>::IntoIter>: TrustedLen,sourceimpl<T> TrustedLen for std::collections::vec_deque::Iter<'_, T>sourceimpl<T> TrustedLen for std::collections::vec_deque::IterMut<'_, T>sourceimpl<T> TrustedLen for Chunks<'_, T>sourceimpl<T> TrustedLen for ChunksExact<'_, T>sourceimpl<T> TrustedLen for ChunksExactMut<'_, T>sourceimpl<T> TrustedLen for ChunksMut<'_, T>sourceimpl<T> TrustedLen for std::slice::Iter<'_, T>sourceimpl<T> TrustedLen for std::slice::IterMut<'_, T>sourceimpl<T> TrustedLen for RChunks<'_, T>sourceimpl<T> TrustedLen for RChunksExact<'_, T>sourceimpl<T> TrustedLen for RChunksExactMut<'_, T>sourceimpl<T> TrustedLen for RChunksMut<'_, T>sourceimpl<T> TrustedLen for Windows<'_, T>sourceimpl<T> TrustedLen for Empty<T>sourceimpl<T> TrustedLen for Once<T>sourceimpl<T, A> TrustedLen for DrainSorted<'_, T, A>where
    T: Ord,
    A: Allocator,sourceimpl<T, A> TrustedLen for IntoIterSorted<T, A>where
    T: Ord,
    A: Allocator,sourceimpl<T, A> TrustedLen for std::collections::vec_deque::IntoIter<T, A>where
    A: Allocator,sourceimpl<T, A> TrustedLen for Drain<'_, T, A>where
    A: Allocator,sourceimpl<T, A> TrustedLen for std::vec::IntoIter<T, A>where
    A: Allocator,1.40.0sourceimpl<T, const N: usize> TrustedLen for std::array::IntoIter<T, N>sourceimpl<T, const N: usize> TrustedLen for ArrayChunks<'_, T, N>sourceimpl<T, const N: usize> TrustedLen for ArrayChunksMut<'_, T, N>

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/iter/trait.TrustedLen.html


std/os/raw/type.c_long
-----------------------------------------------------------
Type Alias c_long
pub type c_long = c_long;
Equivalent to Câ€™s signed long (long) type. This type will always be i32 or i64. Most notably, many Linux-based systems assume an i64, but Windows assumes i32. The C standard technically only requires that this type be a signed integer that is at least 32 bits and at least the size of an int, although in practice, no system would have a long that is neither an i32 nor i64.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/os/raw/type.c_long.html


std/cell/struct.refmut
-----------------------------------------------------------
Struct RefMut
pub struct RefMut<'b, T>where
    T: 'b + ?Sized,{ /* private fields */ }
A wrapper type for a mutably borrowed value from a RefCell<T>. See the module-level documentation for more. Implementations
sourceimpl<'b, T> RefMut<'b, T>where
    T: ?Sized,
1.8.0sourcepub fn map<U, F>(orig: RefMut<'b, T>, f: F) -> RefMut<'b, U>where
    F: FnOnce(&mut T) -> &mut U,
    U: ?Sized,
Makes a new RefMut for a component of the borrowed data, e.g., an enum variant. The RefCell is already mutably borrowed, so this cannot fail. This is an associated function that needs to be used as RefMut::map(...). A method would interfere with methods of the same name on the contents of a RefCell used through Deref. Examples use std::cell::{RefCell, RefMut};
let c = RefCell::new((5, 'b'));
{
    let b1: RefMut<'_, (u32, char)> = c.borrow_mut();
    let mut b2: RefMut<'_, u32> = RefMut::map(b1, |t| &mut t.0);
    assert_eq!(*b2, 5);
    *b2 = 42;
}
assert_eq!(*c.borrow(), (42, 'b')); 
1.63.0sourcepub fn filter_map<U, F>(
    orig: RefMut<'b, T>,
    f: F,
) -> Result<RefMut<'b, U>, RefMut<'b, T>>where
    F: FnOnce(&mut T) -> Option<&mut U>,
    U: ?Sized,
Makes a new RefMut for an optional component of the borrowed data. The original guard is returned as an Err(..) if the closure returns None. The RefCell is already mutably borrowed, so this cannot fail. This is an associated function that needs to be used as RefMut::filter_map(...). A method would interfere with methods of the same name on the contents of a RefCell used through Deref. Examples use std::cell::{RefCell, RefMut};
let c = RefCell::new(vec![1, 2, 3]);
{
    let b1: RefMut<'_, Vec<u32>> = c.borrow_mut();
    let mut b2: Result<RefMut<'_, u32>, _> = RefMut::filter_map(b1, |v| v.get_mut(1));
    if let Ok(mut b2) = b2 {
        *b2 += 2;
    }
}
assert_eq!(*c.borrow(), vec![1, 4, 3]); 
1.35.0sourcepub fn map_split<U, V, F>(
    orig: RefMut<'b, T>,
    f: F,
) -> (RefMut<'b, U>, RefMut<'b, V>)where
    F: FnOnce(&mut T) -> (&mut U, &mut V),
    U: ?Sized,
    V: ?Sized,
Splits a RefMut into multiple RefMuts for different components of the borrowed data. The underlying RefCell will remain mutably borrowed until both returned RefMuts go out of scope. The RefCell is already mutably borrowed, so this cannot fail. This is an associated function that needs to be used as RefMut::map_split(...). A method would interfere with methods of the same name on the contents of a RefCell used through Deref. Examples use std::cell::{RefCell, RefMut};
let cell = RefCell::new([1, 2, 3, 4]);
let borrow = cell.borrow_mut();
let (mut begin, mut end) = RefMut::map_split(borrow, |slice| slice.split_at_mut(2));
assert_eq!(*begin, [1, 2]);
assert_eq!(*end, [3, 4]);
begin.copy_from_slice(&[4, 3]);
end.copy_from_slice(&[2, 1]); 
sourcepub fn leak(orig: RefMut<'b, T>) -> &'b mut T
ðŸ”¬This is a nightly-only experimental API. (cell_leak #69099)
Converts into a mutable reference to the underlying data. The underlying RefCell can not be borrowed from again and will always appear already mutably borrowed, making the returned reference the only to the interior. This is an associated function that needs to be used as RefMut::leak(...). A method would interfere with methods of the same name on the contents of a RefCell used through Deref. Examples #![feature(cell_leak)]
use std::cell::{RefCell, RefMut};
let cell = RefCell::new(0);
let value = RefMut::leak(cell.borrow_mut());
assert_eq!(*value, 0);
*value = 1;
assert!(cell.try_borrow_mut().is_err()); 

Trait Implementations
1.0.0sourceimpl<T> Debug for RefMut<'_, T>where
    T: Debug + ?Sized,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.0.0sourceimpl<T> Deref for RefMut<'_, T>where
    T: ?Sized,
sourcetype Target = TThe resulting type after dereferencing.
sourcefn deref(&self) -> &TDereferences the value.
1.0.0sourceimpl<T> DerefMut for RefMut<'_, T>where
    T: ?Sized,
sourcefn deref_mut(&mut self) -> &mut TMutably dereferences the value.
1.20.0sourceimpl<T> Display for RefMut<'_, T>where
    T: Display + ?Sized,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

sourceimpl<'b, T, U> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T>where
    T: Unsize<U> + ?Sized,
    U: ?Sized,sourceimpl<T> DerefPure for RefMut<'_, T>where
    T: ?Sized,sourceimpl<'b, T> PinCoerceUnsized for RefMut<'b, T>where
    T: ?Sized,
Auto Trait Implementations
impl<'b, T> Freeze for RefMut<'b, T>where
    T: ?Sized,impl<'b, T> !RefUnwindSafe for RefMut<'b, T>impl<'b, T> !Send for RefMut<'b, T>impl<'b, T> !Sync for RefMut<'b, T>impl<'b, T> Unpin for RefMut<'b, T>where
    T: ?Sized,impl<'b, T> !UnwindSafe for RefMut<'b, T>
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToString for Twhere
    T: Display + ?Sized,
sourcedefault fn to_string(&self) -> StringConverts the given value to a String. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/cell/struct.RefMut.html


std/iter/trait.exactsizeiterator
-----------------------------------------------------------
Trait ExactSizeIterator
pub trait ExactSizeIterator: Iterator {
    // Provided methods
    fn len(&self) -> usize { ... }
    fn is_empty(&self) -> bool { ... }
}
An iterator that knows its exact length. Many Iterators donâ€™t know how many times they will iterate, but some do. If an iterator knows how many times it can iterate, providing access to that information can be useful. For example, if you want to iterate backwards, a good start is to know where the end is. When implementing an ExactSizeIterator, you must also implement Iterator. When doing so, the implementation of Iterator::size_hint must return the exact size of the iterator. The len method has a default implementation, so you usually shouldnâ€™t implement it. However, you may be able to provide a more performant implementation than the default, so overriding it in this case makes sense. Note that this trait is a safe trait and as such does not and cannot guarantee that the returned length is correct. This means that unsafe code must not rely on the correctness of Iterator::size_hint. The unstable and unsafe TrustedLen trait gives this additional guarantee. When shouldnâ€™t an adapter be ExactSizeIterator? If an adapter makes an iterator longer, then itâ€™s usually incorrect for that adapter to implement ExactSizeIterator. The inner exact-sized iterator might already be usize::MAX-long, and thus the length of the longer adapted iterator would no longer be exactly representable in usize. This is why Chain<A, B> isnâ€™t ExactSizeIterator, even when A and B are both ExactSizeIterator. Examples Basic usage: // a finite range knows exactly how many times it will iterate
let five = 0..5;
assert_eq!(5, five.len()); In the module-level docs, we implemented an Iterator, Counter. Letâ€™s implement ExactSizeIterator for it as well: impl ExactSizeIterator for Counter {
    // We can easily calculate the remaining number of iterations.
    fn len(&self) -> usize {
        5 - self.count
    }
}
// And now we can use it!
let mut counter = Counter::new();
assert_eq!(5, counter.len());
let _ = counter.next();
assert_eq!(4, counter.len()); Provided Methods
1.0.0sourcefn len(&self) -> usize
Returns the exact remaining length of the iterator. The implementation ensures that the iterator will return exactly len() more times a Some(T) value, before returning None. This method has a default implementation, so you usually should not implement it directly. However, if you can provide a more efficient implementation, you can do so. See the trait-level docs for an example. This function has the same safety guarantees as the Iterator::size_hint function. Examples Basic usage: // a finite range knows exactly how many times it will iterate
let mut range = 0..5;
assert_eq!(5, range.len());
let _ = range.next();
assert_eq!(4, range.len()); 
sourcefn is_empty(&self) -> bool
ðŸ”¬This is a nightly-only experimental API. (exact_size_is_empty #35428)
Returns true if the iterator is empty. This method has a default implementation using ExactSizeIterator::len(), so you donâ€™t need to implement it yourself. Examples Basic usage: #![feature(exact_size_is_empty)]
let mut one_element = std::iter::once(0);
assert!(!one_element.is_empty());
assert_eq!(one_element.next(), Some(0));
assert!(one_element.is_empty());
assert_eq!(one_element.next(), None); 
Implementors
sourceimpl ExactSizeIterator for IterRange<i8>sourceimpl ExactSizeIterator for IterRange<i16>sourceimpl ExactSizeIterator for IterRange<isize>sourceimpl ExactSizeIterator for IterRange<u8>sourceimpl ExactSizeIterator for IterRange<u16>sourceimpl ExactSizeIterator for IterRange<usize>sourceimpl ExactSizeIterator for IterRangeInclusive<i8>sourceimpl ExactSizeIterator for IterRangeInclusive<u8>1.0.0sourceimpl ExactSizeIterator for std::ascii::EscapeDefault1.20.0sourceimpl ExactSizeIterator for EscapeDebug1.11.0sourceimpl ExactSizeIterator for std::char::EscapeDefault1.11.0sourceimpl ExactSizeIterator for EscapeUnicode1.35.0sourceimpl ExactSizeIterator for ToLowercase1.35.0sourceimpl ExactSizeIterator for ToUppercase1.0.0sourceimpl ExactSizeIterator for Args1.0.0sourceimpl ExactSizeIterator for ArgsOs1.0.0sourceimpl ExactSizeIterator for Range<i8>1.0.0sourceimpl ExactSizeIterator for Range<i16>1.0.0sourceimpl ExactSizeIterator for Range<i32>1.0.0sourceimpl ExactSizeIterator for Range<isize>1.0.0sourceimpl ExactSizeIterator for Range<u8>1.0.0sourceimpl ExactSizeIterator for Range<u16>1.0.0sourceimpl ExactSizeIterator for Range<u32>1.0.0sourceimpl ExactSizeIterator for Range<usize>1.26.0sourceimpl ExactSizeIterator for RangeInclusive<i8>1.26.0sourceimpl ExactSizeIterator for RangeInclusive<i16>1.26.0sourceimpl ExactSizeIterator for RangeInclusive<u8>1.26.0sourceimpl ExactSizeIterator for RangeInclusive<u16>1.0.0sourceimpl ExactSizeIterator for Bytes<'_>1.57.0sourceimpl<'a> ExactSizeIterator for CommandArgs<'a>1.57.0sourceimpl<'a> ExactSizeIterator for CommandEnvs<'a>1.1.0sourceimpl<'a, I, T> ExactSizeIterator for Cloned<I>where
    T: 'a + Clone,
    I: ExactSizeIterator<Item = &'a T>,1.36.0sourceimpl<'a, I, T> ExactSizeIterator for Copied<I>where
    T: 'a + Copy,
    I: ExactSizeIterator<Item = &'a T>,1.31.0sourceimpl<'a, T> ExactSizeIterator for RChunksExact<'a, T>1.0.0sourceimpl<A> ExactSizeIterator for std::option::IntoIter<A>1.0.0sourceimpl<A> ExactSizeIterator for std::option::Iter<'_, A>1.0.0sourceimpl<A> ExactSizeIterator for std::option::IterMut<'_, A>1.82.0sourceimpl<A> ExactSizeIterator for RepeatN<A>where
    A: Clone,1.0.0sourceimpl<A, B> ExactSizeIterator for Zip<A, B>where
    A: ExactSizeIterator,
    B: ExactSizeIterator,1.43.0sourceimpl<A, F> ExactSizeIterator for OnceWith<F>where
    F: FnOnce() -> A,1.0.0sourceimpl<B, I, F> ExactSizeIterator for Map<I, F>where
    I: ExactSizeIterator,
    F: FnMut(<I as Iterator>::Item) -> B,1.82.0sourceimpl<F, A> ExactSizeIterator for Take<RepeatWith<F>>where
    F: FnMut() -> A,1.0.0sourceimpl<I> ExactSizeIterator for &mut Iwhere
    I: ExactSizeIterator + ?Sized,1.0.0sourceimpl<I> ExactSizeIterator for Enumerate<I>where
    I: ExactSizeIterator,1.0.0sourceimpl<I> ExactSizeIterator for Fuse<I>where
    I: ExactSizeIterator,1.0.0sourceimpl<I> ExactSizeIterator for Peekable<I>where
    I: ExactSizeIterator,1.0.0sourceimpl<I> ExactSizeIterator for Rev<I>where
    I: ExactSizeIterator + DoubleEndedIterator,1.0.0sourceimpl<I> ExactSizeIterator for Skip<I>where
    I: ExactSizeIterator,1.28.0sourceimpl<I> ExactSizeIterator for StepBy<I>where
    I: ExactSizeIterator,1.0.0sourceimpl<I> ExactSizeIterator for Take<I>where
    I: ExactSizeIterator,1.0.0sourceimpl<I, A> ExactSizeIterator for Box<I, A>where
    I: ExactSizeIterator + ?Sized,
    A: Allocator,1.21.0sourceimpl<I, A> ExactSizeIterator for Splice<'_, I, A>where
    I: Iterator,
    A: Allocator,1.0.0sourceimpl<I, F> ExactSizeIterator for Inspect<I, F>where
    I: ExactSizeIterator,
    F: FnMut(&<I as Iterator>::Item),sourceimpl<I, F, R, const N: usize> ExactSizeIterator for MapWindows<I, F, N>where
    I: ExactSizeIterator,
    F: FnMut(&[<I as Iterator>::Item; N]) -> R,sourceimpl<I, const N: usize> ExactSizeIterator for std::iter::ArrayChunks<I, N>where
    I: ExactSizeIterator,1.0.0sourceimpl<K> ExactSizeIterator for std::collections::hash_set::Drain<'_, K>1.0.0sourceimpl<K> ExactSizeIterator for std::collections::hash_set::IntoIter<K>1.0.0sourceimpl<K> ExactSizeIterator for std::collections::hash_set::Iter<'_, K>1.0.0sourceimpl<K, V> ExactSizeIterator for std::collections::btree_map::Iter<'_, K, V>1.0.0sourceimpl<K, V> ExactSizeIterator for std::collections::btree_map::IterMut<'_, K, V>1.0.0sourceimpl<K, V> ExactSizeIterator for std::collections::btree_map::Keys<'_, K, V>1.0.0sourceimpl<K, V> ExactSizeIterator for std::collections::btree_map::Values<'_, K, V>1.10.0sourceimpl<K, V> ExactSizeIterator for std::collections::btree_map::ValuesMut<'_, K, V>1.6.0sourceimpl<K, V> ExactSizeIterator for std::collections::hash_map::Drain<'_, K, V>1.0.0sourceimpl<K, V> ExactSizeIterator for std::collections::hash_map::IntoIter<K, V>1.54.0sourceimpl<K, V> ExactSizeIterator for std::collections::hash_map::IntoKeys<K, V>1.54.0sourceimpl<K, V> ExactSizeIterator for std::collections::hash_map::IntoValues<K, V>1.0.0sourceimpl<K, V> ExactSizeIterator for std::collections::hash_map::Iter<'_, K, V>1.0.0sourceimpl<K, V> ExactSizeIterator for std::collections::hash_map::IterMut<'_, K, V>1.0.0sourceimpl<K, V> ExactSizeIterator for std::collections::hash_map::Keys<'_, K, V>1.0.0sourceimpl<K, V> ExactSizeIterator for std::collections::hash_map::Values<'_, K, V>1.10.0sourceimpl<K, V> ExactSizeIterator for std::collections::hash_map::ValuesMut<'_, K, V>1.0.0sourceimpl<K, V, A> ExactSizeIterator for std::collections::btree_map::IntoIter<K, V, A>where
    A: Allocator + Clone,1.54.0sourceimpl<K, V, A> ExactSizeIterator for std::collections::btree_map::IntoKeys<K, V, A>where
    A: Allocator + Clone,1.54.0sourceimpl<K, V, A> ExactSizeIterator for std::collections::btree_map::IntoValues<K, V, A>where
    A: Allocator + Clone,1.0.0sourceimpl<T> ExactSizeIterator for std::collections::binary_heap::Iter<'_, T>1.0.0sourceimpl<T> ExactSizeIterator for std::collections::btree_set::Iter<'_, T>1.0.0sourceimpl<T> ExactSizeIterator for std::collections::linked_list::Iter<'_, T>1.0.0sourceimpl<T> ExactSizeIterator for std::collections::linked_list::IterMut<'_, T>1.0.0sourceimpl<T> ExactSizeIterator for std::collections::vec_deque::Iter<'_, T>1.0.0sourceimpl<T> ExactSizeIterator for std::collections::vec_deque::IterMut<'_, T>1.0.0sourceimpl<T> ExactSizeIterator for std::result::IntoIter<T>1.0.0sourceimpl<T> ExactSizeIterator for std::result::Iter<'_, T>1.0.0sourceimpl<T> ExactSizeIterator for std::result::IterMut<'_, T>1.0.0sourceimpl<T> ExactSizeIterator for Chunks<'_, T>1.31.0sourceimpl<T> ExactSizeIterator for ChunksExact<'_, T>1.31.0sourceimpl<T> ExactSizeIterator for ChunksExactMut<'_, T>1.0.0sourceimpl<T> ExactSizeIterator for ChunksMut<'_, T>1.0.0sourceimpl<T> ExactSizeIterator for std::slice::Iter<'_, T>1.0.0sourceimpl<T> ExactSizeIterator for std::slice::IterMut<'_, T>1.31.0sourceimpl<T> ExactSizeIterator for RChunks<'_, T>1.31.0sourceimpl<T> ExactSizeIterator for RChunksExactMut<'_, T>1.31.0sourceimpl<T> ExactSizeIterator for RChunksMut<'_, T>1.0.0sourceimpl<T> ExactSizeIterator for Windows<'_, T>1.2.0sourceimpl<T> ExactSizeIterator for Empty<T>1.2.0sourceimpl<T> ExactSizeIterator for Once<T>1.82.0sourceimpl<T> ExactSizeIterator for Take<Repeat<T>>where
    T: Clone,1.6.0sourceimpl<T, A> ExactSizeIterator for std::collections::binary_heap::Drain<'_, T, A>where
    A: Allocator,sourceimpl<T, A> ExactSizeIterator for DrainSorted<'_, T, A>where
    T: Ord,
    A: Allocator,1.0.0sourceimpl<T, A> ExactSizeIterator for std::collections::binary_heap::IntoIter<T, A>where
    A: Allocator,sourceimpl<T, A> ExactSizeIterator for IntoIterSorted<T, A>where
    T: Ord,
    A: Allocator,1.0.0sourceimpl<T, A> ExactSizeIterator for std::collections::btree_set::IntoIter<T, A>where
    A: Allocator + Clone,1.0.0sourceimpl<T, A> ExactSizeIterator for std::collections::linked_list::IntoIter<T, A>where
    A: Allocator,1.6.0sourceimpl<T, A> ExactSizeIterator for std::collections::vec_deque::Drain<'_, T, A>where
    A: Allocator,1.0.0sourceimpl<T, A> ExactSizeIterator for std::collections::vec_deque::IntoIter<T, A>where
    A: Allocator,1.6.0sourceimpl<T, A> ExactSizeIterator for std::vec::Drain<'_, T, A>where
    A: Allocator,1.0.0sourceimpl<T, A> ExactSizeIterator for std::vec::IntoIter<T, A>where
    A: Allocator,1.40.0sourceimpl<T, const N: usize> ExactSizeIterator for std::array::IntoIter<T, N>sourceimpl<T, const N: usize> ExactSizeIterator for std::slice::ArrayChunks<'_, T, N>sourceimpl<T, const N: usize> ExactSizeIterator for ArrayChunksMut<'_, T, N>sourceimpl<T, const N: usize> ExactSizeIterator for ArrayWindows<'_, T, N>

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/iter/trait.ExactSizeIterator.html


std/simd/prelude/type.mask16x8
-----------------------------------------------------------
Type Alias mask16x8
pub type mask16x8 = Mask<i16, 8>;
ðŸ”¬This is a nightly-only experimental API. (portable_simd #86656)
A SIMD mask with eight elements for vectors with 16-bit element types. The layout of this type is unspecified, and may change between platforms and/or Rust versions, and code should not assume that it is equivalent to [i16; 8]. Aliased Type
struct mask16x8(/* private fields */);
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/simd/prelude/type.mask16x8.html


std/sync/mpsc/struct.tryiter
-----------------------------------------------------------
Struct TryIter
pub struct TryIter<'a, T: 'a> { /* private fields */ }
An iterator that attempts to yield all pending values for a Receiver, created by try_iter. None will be returned when there are no pending values remaining or if the corresponding channel has hung up. This iterator will never block the caller in order to wait for data to become available. Instead, it will return None. Examples use std::sync::mpsc::channel;
use std::thread;
use std::time::Duration;
let (sender, receiver) = channel();
// Nothing is in the buffer yet
assert!(receiver.try_iter().next().is_none());
println!("Nothing in the buffer...");
thread::spawn(move || {
    sender.send(1).unwrap();
    sender.send(2).unwrap();
    sender.send(3).unwrap();
});
println!("Going to sleep...");
thread::sleep(Duration::from_secs(2)); // block for two seconds
for x in receiver.try_iter() {
    println!("Got: {x}");
} Trait Implementations
1.15.0sourceimpl<'a, T: Debug + 'a> Debug for TryIter<'a, T>
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

1.15.0sourceimpl<'a, T> Iterator for TryIter<'a, T>
sourcetype Item = TThe type of the elements being iterated over.
sourcefn next(&mut self) -> Option<T>Advances the iterator and returns the next value. Read more
sourcefn next_chunk<const N: usize>(
    &mut self,
) -> Result<[Self::Item; N], IntoIter<Self::Item, N>>where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_next_chunk #98326)
Advances the iterator and returns an array containing the next N values. Read more
1.0.0sourcefn size_hint(&self) -> (usize, Option<usize>)Returns the bounds on the remaining length of the iterator. Read more
1.0.0sourcefn count(self) -> usizewhere
    Self: Sized,Consumes the iterator, counting the number of iterations and returning it. Read more
1.0.0sourcefn last(self) -> Option<Self::Item>where
    Self: Sized,Consumes the iterator, returning the last element. Read more
sourcefn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator by n elements. Read more
1.0.0sourcefn nth(&mut self, n: usize) -> Option<Self::Item>Returns the nth element of the iterator. Read more
1.28.0sourcefn step_by(self, step: usize) -> StepBy<Self> â“˜where
    Self: Sized,Creates an iterator starting at the same point, but stepping by the given amount at each iteration. Read more
1.0.0sourcefn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator<Item = Self::Item>,Takes two iterators and creates a new iterator over both in sequence. Read more
1.0.0sourcefn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator,â€˜Zips upâ€™ two iterators into a single iterator of pairs. Read more
sourcefn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G> â“˜where
    Self: Sized,
    G: FnMut() -> Self::Item,
ðŸ”¬This is a nightly-only experimental API. (iter_intersperse #79524)
Creates a new iterator which places an item generated by separator between adjacent items of the original iterator. Read more
1.0.0sourcefn map<B, F>(self, f: F) -> Map<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> B,Takes a closure and creates an iterator which calls that closure on each element. Read more
1.21.0sourcefn for_each<F>(self, f: F)where
    Self: Sized,
    F: FnMut(Self::Item),Calls a closure on each element of an iterator. Read more
1.0.0sourcefn filter<P>(self, predicate: P) -> Filter<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator which uses a closure to determine if an element should be yielded. Read more
1.0.0sourcefn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Creates an iterator that both filters and maps. Read more
1.0.0sourcefn enumerate(self) -> Enumerate<Self> â“˜where
    Self: Sized,Creates an iterator which gives the current iteration count as well as the next value. Read more
1.0.0sourcefn peekable(self) -> Peekable<Self> â“˜where
    Self: Sized,Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information. Read more
1.0.0sourcefn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that skips elements based on a predicate. Read more
1.0.0sourcefn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that yields elements based on a predicate. Read more
1.57.0sourcefn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(Self::Item) -> Option<B>,Creates an iterator that both yields elements based on a predicate and maps. Read more
1.0.0sourcefn skip(self, n: usize) -> Skip<Self> â“˜where
    Self: Sized,Creates an iterator that skips the first n elements. Read more
1.0.0sourcefn take(self, n: usize) -> Take<Self> â“˜where
    Self: Sized,Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner. Read more
1.0.0sourcefn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> â“˜where
    Self: Sized,
    F: FnMut(&mut St, Self::Item) -> Option<B>,An iterator adapter which, like fold, holds internal state, but unlike fold, produces a new iterator. Read more
1.0.0sourcefn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F> â“˜where
    Self: Sized,
    U: IntoIterator,
    F: FnMut(Self::Item) -> U,Creates an iterator that works like map, but flattens nested structure. Read more
sourcefn map_windows<F, R, const N: usize>(self, f: F) -> MapWindows<Self, F, N> â“˜where
    Self: Sized,
    F: FnMut(&[Self::Item; N]) -> R,
ðŸ”¬This is a nightly-only experimental API. (iter_map_windows #87155)
Calls the given function f for each contiguous window of size N over self and returns an iterator over the outputs of f. Like slice::windows(), the windows during mapping overlap as well. Read more
1.0.0sourcefn fuse(self) -> Fuse<Self> â“˜where
    Self: Sized,Creates an iterator which ends after the first None. Read more
1.0.0sourcefn inspect<F>(self, f: F) -> Inspect<Self, F> â“˜where
    Self: Sized,
    F: FnMut(&Self::Item),Does something with each element of an iterator, passing the value on. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Borrows an iterator, rather than consuming it. Read more
1.0.0sourcefn collect<B>(self) -> Bwhere
    B: FromIterator<Self::Item>,
    Self: Sized,Transforms an iterator into a collection. Read more
sourcefn collect_into<E>(self, collection: &mut E) -> &mut Ewhere
    E: Extend<Self::Item>,
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_collect_into #94780)
Collects all the items from an iterator into a collection. Read more
1.0.0sourcefn partition<B, F>(self, f: F) -> (B, B)where
    Self: Sized,
    B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool,Consumes an iterator, creating two collections from it. Read more
sourcefn is_partitioned<P>(self, predicate: P) -> boolwhere
    Self: Sized,
    P: FnMut(Self::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_is_partitioned #62544)
Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false. Read more
1.27.0sourcefn try_fold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> R,
    R: Try<Output = B>,An iterator method that applies a function as long as it returns successfully, producing a single, final value. Read more
1.27.0sourcefn try_for_each<F, R>(&mut self, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(Self::Item) -> R,
    R: Try<Output = ()>,An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. Read more
1.0.0sourcefn fold<B, F>(self, init: B, f: F) -> Bwhere
    Self: Sized,
    F: FnMut(B, Self::Item) -> B,Folds every element into an accumulator by applying an operation, returning the final result. Read more
1.51.0sourcefn reduce<F>(self, f: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(Self::Item, Self::Item) -> Self::Item,Reduces the elements to a single one, by repeatedly applying a reducing operation. Read more
sourcefn try_reduce<R>(
    &mut self,
    f: impl FnMut(Self::Item, Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = Self::Item>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (iterator_try_reduce #87053)
Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. Read more
1.0.0sourcefn all<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if every element of the iterator matches a predicate. Read more
1.0.0sourcefn any<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if any element of the iterator matches a predicate. Read more
1.0.0sourcefn find<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator that satisfies a predicate. Read more
1.30.0sourcefn find_map<B, F>(&mut self, f: F) -> Option<B>where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Applies function to the elements of iterator and returns the first non-none result. Read more
sourcefn try_find<R>(
    &mut self,
    f: impl FnMut(&Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = bool>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (try_find #63178)
Applies function to the elements of iterator and returns the first true result or the first error. Read more
1.0.0sourcefn position<P>(&mut self, predicate: P) -> Option<usize>where
    Self: Sized,
    P: FnMut(Self::Item) -> bool,Searches for an element in an iterator, returning its index. Read more
1.6.0sourcefn max_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the maximum value from the specified function. Read more
1.15.0sourcefn max_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the maximum value with respect to the specified comparison function. Read more
1.6.0sourcefn min_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the minimum value from the specified function. Read more
1.15.0sourcefn min_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the minimum value with respect to the specified comparison function. Read more
1.0.0sourcefn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)where
    FromA: Default + Extend<A>,
    FromB: Default + Extend<B>,
    Self: Sized + Iterator<Item = (A, B)>,Converts an iterator of pairs into a pair of containers. Read more
1.36.0sourcefn copied<'a, T>(self) -> Copied<Self> â“˜where
    T: 'a + Copy,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which copies all of its elements. Read more
1.0.0sourcefn cloned<'a, T>(self) -> Cloned<Self> â“˜where
    T: 'a + Clone,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which clones all of its elements. Read more
sourcefn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N> â“˜where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_array_chunks #100450)
Returns an iterator over N elements of the iterator at a time. Read more
1.11.0sourcefn sum<S>(self) -> Swhere
    Self: Sized,
    S: Sum<Self::Item>,Sums the elements of an iterator. Read more
1.11.0sourcefn product<P>(self) -> Pwhere
    Self: Sized,
    P: Product<Self::Item>,Iterates over the entire iterator, multiplying all the elements Read more
sourcefn cmp_by<I, F>(self, other: I, cmp: F) -> Orderingwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn partial_cmp<I>(self, other: I) -> Option<Ordering>where
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,
Lexicographically compares the PartialOrd elements of this Iterator with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. Read more
sourcefn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering>where
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Option<Ordering>,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn eq<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are equal to those of another. Read more
sourcefn eq_by<I, F>(self, other: I, eq: F) -> boolwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function. Read more
1.5.0sourcefn ne<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are not equal to those of another. Read more
1.5.0sourcefn lt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less than those of another. Read more
1.5.0sourcefn le<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less or equal to those of another. Read more
1.5.0sourcefn gt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than those of another. Read more
1.5.0sourcefn ge<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than or equal to those of another. Read more
1.82.0sourcefn is_sorted_by<F>(self, compare: F) -> boolwhere
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> bool,Checks if the elements of this iterator are sorted using the given comparator function. Read more
1.82.0sourcefn is_sorted_by_key<F, K>(self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> K,
    K: PartialOrd,Checks if the elements of this iterator are sorted using the given key extraction function. Read more

Auto Trait Implementations
impl<'a, T> Freeze for TryIter<'a, T>impl<'a, T> RefUnwindSafe for TryIter<'a, T>impl<'a, T> !Send for TryIter<'a, T>impl<'a, T> !Sync for TryIter<'a, T>impl<'a, T> Unpin for TryIter<'a, T>impl<'a, T> UnwindSafe for TryIter<'a, T>
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<I> IntoIterator for Iwhere
    I: Iterator,
sourcetype Item = <I as Iterator>::ItemThe type of the elements being iterated over.
sourcetype IntoIter = IWhich kind of iterator are we turning this into?
sourcefn into_iter(self) -> ICreates an iterator from a value. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/sync/mpsc/struct.TryIter.html


std/collections/struct.hashset
-----------------------------------------------------------
Struct HashSet
pub struct HashSet<T, S = RandomState> { /* private fields */ }
A hash set implemented as a HashMap where the value is (). As with the HashMap type, a HashSet requires that the elements implement the Eq and Hash traits. This can frequently be achieved by using #[derive(PartialEq, Eq, Hash)]. If you implement these yourself, it is important that the following property holds: k1 == k2 -> hash(k1) == hash(k2) In other words, if two keys are equal, their hashes must be equal. Violating this property is a logic error. It is also a logic error for a key to be modified in such a way that the keyâ€™s hash, as determined by the Hash trait, or its equality, as determined by the Eq trait, changes while it is in the map. This is normally only possible through Cell, RefCell, global state, I/O, or unsafe code. The behavior resulting from either logic error is not specified, but will be encapsulated to the HashSet that observed the logic error and not result in undefined behavior. This could include panics, incorrect results, aborts, memory leaks, and non-termination. Examples use std::collections::HashSet;
// Type inference lets us omit an explicit type signature (which
// would be `HashSet<String>` in this example).
let mut books = HashSet::new();
// Add some books.
books.insert("A Dance With Dragons".to_string());
books.insert("To Kill a Mockingbird".to_string());
books.insert("The Odyssey".to_string());
books.insert("The Great Gatsby".to_string());
// Check for a specific one.
if !books.contains("The Winds of Winter") {
    println!("We have {} books, but The Winds of Winter ain't one.",
             books.len());
}
// Remove a book.
books.remove("The Odyssey");
// Iterate over everything.
for book in &books {
    println!("{book}");
} The easiest way to use HashSet with a custom type is to derive Eq and Hash. We must also derive PartialEq, which is required if Eq is derived. use std::collections::HashSet;
#[derive(Hash, Eq, PartialEq, Debug)]
struct Viking {
    name: String,
    power: usize,
}
let mut vikings = HashSet::new();
vikings.insert(Viking { name: "Einar".to_string(), power: 9 });
vikings.insert(Viking { name: "Einar".to_string(), power: 9 });
vikings.insert(Viking { name: "Olaf".to_string(), power: 4 });
vikings.insert(Viking { name: "Harald".to_string(), power: 8 });
// Use derived implementation to print the vikings.
for x in &vikings {
    println!("{x:?}");
} A HashSet with a known list of items can be initialized from an array: use std::collections::HashSet;
let viking_names = HashSet::from(["Einar", "Olaf", "Harald"]); Implementations
sourceimpl<T> HashSet<T, RandomState>
1.0.0sourcepub fn new() -> HashSet<T, RandomState>
Creates an empty HashSet. The hash set is initially created with a capacity of 0, so it will not allocate until it is first inserted into. Examples use std::collections::HashSet;
let set: HashSet<i32> = HashSet::new(); 
1.0.0sourcepub fn with_capacity(capacity: usize) -> HashSet<T, RandomState>
Creates an empty HashSet with at least the specified capacity. The hash set will be able to hold at least capacity elements without reallocating. This method is allowed to allocate for more elements than capacity. If capacity is 0, the hash set will not allocate. Examples use std::collections::HashSet;
let set: HashSet<i32> = HashSet::with_capacity(10);
assert!(set.capacity() >= 10); 
sourceimpl<T, S> HashSet<T, S>
1.0.0sourcepub fn capacity(&self) -> usize
Returns the number of elements the set can hold without reallocating. Examples use std::collections::HashSet;
let set: HashSet<i32> = HashSet::with_capacity(100);
assert!(set.capacity() >= 100); 
1.0.0sourcepub fn iter(&self) -> Iter<'_, T> â“˜
An iterator visiting all elements in arbitrary order. The iterator element type is &'a T. Examples use std::collections::HashSet;
let mut set = HashSet::new();
set.insert("a");
set.insert("b");
// Will print in an arbitrary order.
for x in set.iter() {
    println!("{x}");
} Performance In the current implementation, iterating over set takes O(capacity) time instead of O(len) because it internally visits empty buckets too. 
1.0.0sourcepub fn len(&self) -> usize
Returns the number of elements in the set. Examples use std::collections::HashSet;
let mut v = HashSet::new();
assert_eq!(v.len(), 0);
v.insert(1);
assert_eq!(v.len(), 1); 
1.0.0sourcepub fn is_empty(&self) -> bool
Returns true if the set contains no elements. Examples use std::collections::HashSet;
let mut v = HashSet::new();
assert!(v.is_empty());
v.insert(1);
assert!(!v.is_empty()); 
1.6.0sourcepub fn drain(&mut self) -> Drain<'_, T> â“˜
Clears the set, returning all elements as an iterator. Keeps the allocated memory for reuse. If the returned iterator is dropped before being fully consumed, it drops the remaining elements. The returned iterator keeps a mutable borrow on the set to optimize its implementation. Examples use std::collections::HashSet;
let mut set = HashSet::from([1, 2, 3]);
assert!(!set.is_empty());
// print 1, 2, 3 in an arbitrary order
for i in set.drain() {
    println!("{i}");
}
assert!(set.is_empty()); 
sourcepub fn extract_if<F>(&mut self, pred: F) -> ExtractIf<'_, T, F> â“˜where
    F: FnMut(&T) -> bool,
ðŸ”¬This is a nightly-only experimental API. (hash_extract_if #59618)
Creates an iterator which uses a closure to determine if a value should be removed. If the closure returns true, then the value is removed and yielded. If the closure returns false, the value will remain in the list and will not be yielded by the iterator. If the returned ExtractIf is not exhausted, e.g. because it is dropped without iterating or the iteration short-circuits, then the remaining elements will be retained. Use retain with a negated predicate if you do not need the returned iterator. Examples Splitting a set into even and odd values, reusing the original set: #![feature(hash_extract_if)]
use std::collections::HashSet;
let mut set: HashSet<i32> = (0..8).collect();
let extracted: HashSet<i32> = set.extract_if(|v| v % 2 == 0).collect();
let mut evens = extracted.into_iter().collect::<Vec<_>>();
let mut odds = set.into_iter().collect::<Vec<_>>();
evens.sort();
odds.sort();
assert_eq!(evens, vec![0, 2, 4, 6]);
assert_eq!(odds, vec![1, 3, 5, 7]); 
1.18.0sourcepub fn retain<F>(&mut self, f: F)where
    F: FnMut(&T) -> bool,
Retains only the elements specified by the predicate. In other words, remove all elements e for which f(&e) returns false. The elements are visited in unsorted (and unspecified) order. Examples use std::collections::HashSet;
let mut set = HashSet::from([1, 2, 3, 4, 5, 6]);
set.retain(|&k| k % 2 == 0);
assert_eq!(set, HashSet::from([2, 4, 6])); Performance In the current implementation, this operation takes O(capacity) time instead of O(len) because it internally visits empty buckets too. 
1.0.0sourcepub fn clear(&mut self)
Clears the set, removing all values. Examples use std::collections::HashSet;
let mut v = HashSet::new();
v.insert(1);
v.clear();
assert!(v.is_empty()); 
1.7.0 (const: unstable)sourcepub fn with_hasher(hasher: S) -> HashSet<T, S>
Creates a new empty hash set which will use the given hasher to hash keys. The hash set is also created with the default initial capacity. Warning: hasher is normally randomly generated, and is designed to allow HashSets to be resistant to attacks that cause many collisions and very poor performance. Setting it manually using this function can expose a DoS attack vector. The hash_builder passed should implement the BuildHasher trait for the HashMap to be useful, see its documentation for details. Examples use std::collections::HashSet;
use std::hash::RandomState;
let s = RandomState::new();
let mut set = HashSet::with_hasher(s);
set.insert(2); 
1.7.0sourcepub fn with_capacity_and_hasher(capacity: usize, hasher: S) -> HashSet<T, S>
Creates an empty HashSet with at least the specified capacity, using hasher to hash the keys. The hash set will be able to hold at least capacity elements without reallocating. This method is allowed to allocate for more elements than capacity. If capacity is 0, the hash set will not allocate. Warning: hasher is normally randomly generated, and is designed to allow HashSets to be resistant to attacks that cause many collisions and very poor performance. Setting it manually using this function can expose a DoS attack vector. The hash_builder passed should implement the BuildHasher trait for the HashMap to be useful, see its documentation for details. Examples use std::collections::HashSet;
use std::hash::RandomState;
let s = RandomState::new();
let mut set = HashSet::with_capacity_and_hasher(10, s);
set.insert(1); 
1.9.0sourcepub fn hasher(&self) -> &S
Returns a reference to the setâ€™s BuildHasher. Examples use std::collections::HashSet;
use std::hash::RandomState;
let hasher = RandomState::new();
let set: HashSet<i32> = HashSet::with_hasher(hasher);
let hasher: &RandomState = set.hasher(); 
sourceimpl<T, S> HashSet<T, S>where
    T: Eq + Hash,
    S: BuildHasher,
1.0.0sourcepub fn reserve(&mut self, additional: usize)
Reserves capacity for at least additional more elements to be inserted in the HashSet. The collection may reserve more space to speculatively avoid frequent reallocations. After calling reserve, capacity will be greater than or equal to self.len() + additional. Does nothing if capacity is already sufficient. Panics Panics if the new allocation size overflows usize. Examples use std::collections::HashSet;
let mut set: HashSet<i32> = HashSet::new();
set.reserve(10);
assert!(set.capacity() >= 10); 
1.57.0sourcepub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError>
Tries to reserve capacity for at least additional more elements to be inserted in the HashSet. The collection may reserve more space to speculatively avoid frequent reallocations. After calling try_reserve, capacity will be greater than or equal to self.len() + additional if it returns Ok(()). Does nothing if capacity is already sufficient. Errors If the capacity overflows, or the allocator reports a failure, then an error is returned. Examples use std::collections::HashSet;
let mut set: HashSet<i32> = HashSet::new();
set.try_reserve(10).expect("why is the test harness OOMing on a handful of bytes?"); 
1.0.0sourcepub fn shrink_to_fit(&mut self)
Shrinks the capacity of the set as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy. Examples use std::collections::HashSet;
let mut set = HashSet::with_capacity(100);
set.insert(1);
set.insert(2);
assert!(set.capacity() >= 100);
set.shrink_to_fit();
assert!(set.capacity() >= 2); 
1.56.0sourcepub fn shrink_to(&mut self, min_capacity: usize)
Shrinks the capacity of the set with a lower limit. It will drop down no lower than the supplied limit while maintaining the internal rules and possibly leaving some space in accordance with the resize policy. If the current capacity is less than the lower limit, this is a no-op. Examples use std::collections::HashSet;
let mut set = HashSet::with_capacity(100);
set.insert(1);
set.insert(2);
assert!(set.capacity() >= 100);
set.shrink_to(10);
assert!(set.capacity() >= 10);
set.shrink_to(0);
assert!(set.capacity() >= 2); 
1.0.0sourcepub fn difference<'a>(
    &'a self,
    other: &'a HashSet<T, S>,
) -> Difference<'a, T, S> â“˜
Visits the values representing the difference, i.e., the values that are in self but not in other. Examples use std::collections::HashSet;
let a = HashSet::from([1, 2, 3]);
let b = HashSet::from([4, 2, 3, 4]);
// Can be seen as `a - b`.
for x in a.difference(&b) {
    println!("{x}"); // Print 1
}
let diff: HashSet<_> = a.difference(&b).collect();
assert_eq!(diff, [1].iter().collect());
// Note that difference is not symmetric,
// and `b - a` means something else:
let diff: HashSet<_> = b.difference(&a).collect();
assert_eq!(diff, [4].iter().collect()); 
1.0.0sourcepub fn symmetric_difference<'a>(
    &'a self,
    other: &'a HashSet<T, S>,
) -> SymmetricDifference<'a, T, S> â“˜
Visits the values representing the symmetric difference, i.e., the values that are in self or in other but not in both. Examples use std::collections::HashSet;
let a = HashSet::from([1, 2, 3]);
let b = HashSet::from([4, 2, 3, 4]);
// Print 1, 4 in arbitrary order.
for x in a.symmetric_difference(&b) {
    println!("{x}");
}
let diff1: HashSet<_> = a.symmetric_difference(&b).collect();
let diff2: HashSet<_> = b.symmetric_difference(&a).collect();
assert_eq!(diff1, diff2);
assert_eq!(diff1, [1, 4].iter().collect()); 
1.0.0sourcepub fn intersection<'a>(
    &'a self,
    other: &'a HashSet<T, S>,
) -> Intersection<'a, T, S> â“˜
Visits the values representing the intersection, i.e., the values that are both in self and other. When an equal element is present in self and other then the resulting Intersection may yield references to one or the other. This can be relevant if T contains fields which are not compared by its Eq implementation, and may hold different value between the two equal copies of T in the two sets. Examples use std::collections::HashSet;
let a = HashSet::from([1, 2, 3]);
let b = HashSet::from([4, 2, 3, 4]);
// Print 2, 3 in arbitrary order.
for x in a.intersection(&b) {
    println!("{x}");
}
let intersection: HashSet<_> = a.intersection(&b).collect();
assert_eq!(intersection, [2, 3].iter().collect()); 
1.0.0sourcepub fn union<'a>(&'a self, other: &'a HashSet<T, S>) -> Union<'a, T, S> â“˜
Visits the values representing the union, i.e., all the values in self or other, without duplicates. Examples use std::collections::HashSet;
let a = HashSet::from([1, 2, 3]);
let b = HashSet::from([4, 2, 3, 4]);
// Print 1, 2, 3, 4 in arbitrary order.
for x in a.union(&b) {
    println!("{x}");
}
let union: HashSet<_> = a.union(&b).collect();
assert_eq!(union, [1, 2, 3, 4].iter().collect()); 
1.0.0sourcepub fn contains<Q>(&self, value: &Q) -> boolwhere
    T: Borrow<Q>,
    Q: Hash + Eq + ?Sized,
Returns true if the set contains a value. The value may be any borrowed form of the setâ€™s value type, but Hash and Eq on the borrowed form must match those for the value type. Examples use std::collections::HashSet;
let set = HashSet::from([1, 2, 3]);
assert_eq!(set.contains(&1), true);
assert_eq!(set.contains(&4), false); 
1.9.0sourcepub fn get<Q>(&self, value: &Q) -> Option<&T>where
    T: Borrow<Q>,
    Q: Hash + Eq + ?Sized,
Returns a reference to the value in the set, if any, that is equal to the given value. The value may be any borrowed form of the setâ€™s value type, but Hash and Eq on the borrowed form must match those for the value type. Examples use std::collections::HashSet;
let set = HashSet::from([1, 2, 3]);
assert_eq!(set.get(&2), Some(&2));
assert_eq!(set.get(&4), None); 
sourcepub fn get_or_insert(&mut self, value: T) -> &T
ðŸ”¬This is a nightly-only experimental API. (hash_set_entry #60896)
Inserts the given value into the set if it is not present, then returns a reference to the value in the set. Examples #![feature(hash_set_entry)]
use std::collections::HashSet;
let mut set = HashSet::from([1, 2, 3]);
assert_eq!(set.len(), 3);
assert_eq!(set.get_or_insert(2), &2);
assert_eq!(set.get_or_insert(100), &100);
assert_eq!(set.len(), 4); // 100 was inserted 
sourcepub fn get_or_insert_with<Q, F>(&mut self, value: &Q, f: F) -> &Twhere
    T: Borrow<Q>,
    Q: Hash + Eq + ?Sized,
    F: FnOnce(&Q) -> T,
ðŸ”¬This is a nightly-only experimental API. (hash_set_entry #60896)
Inserts a value computed from f into the set if the given value is not present, then returns a reference to the value in the set. Examples #![feature(hash_set_entry)]
use std::collections::HashSet;
let mut set: HashSet<String> = ["cat", "dog", "horse"]
    .iter().map(|&pet| pet.to_owned()).collect();
assert_eq!(set.len(), 3);
for &pet in &["cat", "dog", "fish"] {
    let value = set.get_or_insert_with(pet, str::to_owned);
    assert_eq!(value, pet);
}
assert_eq!(set.len(), 4); // a new "fish" was inserted 
1.0.0sourcepub fn is_disjoint(&self, other: &HashSet<T, S>) -> bool
Returns true if self has no elements in common with other. This is equivalent to checking for an empty intersection. Examples use std::collections::HashSet;
let a = HashSet::from([1, 2, 3]);
let mut b = HashSet::new();
assert_eq!(a.is_disjoint(&b), true);
b.insert(4);
assert_eq!(a.is_disjoint(&b), true);
b.insert(1);
assert_eq!(a.is_disjoint(&b), false); 
1.0.0sourcepub fn is_subset(&self, other: &HashSet<T, S>) -> bool
Returns true if the set is a subset of another, i.e., other contains at least all the values in self. Examples use std::collections::HashSet;
let sup = HashSet::from([1, 2, 3]);
let mut set = HashSet::new();
assert_eq!(set.is_subset(&sup), true);
set.insert(2);
assert_eq!(set.is_subset(&sup), true);
set.insert(4);
assert_eq!(set.is_subset(&sup), false); 
1.0.0sourcepub fn is_superset(&self, other: &HashSet<T, S>) -> bool
Returns true if the set is a superset of another, i.e., self contains at least all the values in other. Examples use std::collections::HashSet;
let sub = HashSet::from([1, 2]);
let mut set = HashSet::new();
assert_eq!(set.is_superset(&sub), false);
set.insert(0);
set.insert(1);
assert_eq!(set.is_superset(&sub), false);
set.insert(2);
assert_eq!(set.is_superset(&sub), true); 
1.0.0sourcepub fn insert(&mut self, value: T) -> bool
Adds a value to the set. Returns whether the value was newly inserted. That is:  If the set did not previously contain this value, true is returned. If the set already contained this value, false is returned, and the set is not modified: original value is not replaced, and the value passed as argument is dropped.  Examples use std::collections::HashSet;
let mut set = HashSet::new();
assert_eq!(set.insert(2), true);
assert_eq!(set.insert(2), false);
assert_eq!(set.len(), 1); 
1.9.0sourcepub fn replace(&mut self, value: T) -> Option<T>
Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value. Examples use std::collections::HashSet;
let mut set = HashSet::new();
set.insert(Vec::<i32>::new());
assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);
set.replace(Vec::with_capacity(10));
assert_eq!(set.get(&[][..]).unwrap().capacity(), 10); 
1.0.0sourcepub fn remove<Q>(&mut self, value: &Q) -> boolwhere
    T: Borrow<Q>,
    Q: Hash + Eq + ?Sized,
Removes a value from the set. Returns whether the value was present in the set. The value may be any borrowed form of the setâ€™s value type, but Hash and Eq on the borrowed form must match those for the value type. Examples use std::collections::HashSet;
let mut set = HashSet::new();
set.insert(2);
assert_eq!(set.remove(&2), true);
assert_eq!(set.remove(&2), false); 
1.9.0sourcepub fn take<Q>(&mut self, value: &Q) -> Option<T>where
    T: Borrow<Q>,
    Q: Hash + Eq + ?Sized,
Removes and returns the value in the set, if any, that is equal to the given one. The value may be any borrowed form of the setâ€™s value type, but Hash and Eq on the borrowed form must match those for the value type. Examples use std::collections::HashSet;
let mut set = HashSet::from([1, 2, 3]);
assert_eq!(set.take(&2), Some(2));
assert_eq!(set.take(&2), None); 

Trait Implementations
1.0.0sourceimpl<T, S> BitAnd<&HashSet<T, S>> for &HashSet<T, S>where
    T: Eq + Hash + Clone,
    S: BuildHasher + Default,
sourcefn bitand(self, rhs: &HashSet<T, S>) -> HashSet<T, S>
Returns the intersection of self and rhs as a new HashSet<T, S>. Examples use std::collections::HashSet;
let a = HashSet::from([1, 2, 3]);
let b = HashSet::from([2, 3, 4]);
let set = &a & &b;
let mut i = 0;
let expected = [2, 3];
for x in &set {
    assert!(expected.contains(x));
    i += 1;
}
assert_eq!(i, expected.len()); 
sourcetype Output = HashSet<T, S>The resulting type after applying the & operator.
1.0.0sourceimpl<T, S> BitOr<&HashSet<T, S>> for &HashSet<T, S>where
    T: Eq + Hash + Clone,
    S: BuildHasher + Default,
sourcefn bitor(self, rhs: &HashSet<T, S>) -> HashSet<T, S>
Returns the union of self and rhs as a new HashSet<T, S>. Examples use std::collections::HashSet;
let a = HashSet::from([1, 2, 3]);
let b = HashSet::from([3, 4, 5]);
let set = &a | &b;
let mut i = 0;
let expected = [1, 2, 3, 4, 5];
for x in &set {
    assert!(expected.contains(x));
    i += 1;
}
assert_eq!(i, expected.len()); 
sourcetype Output = HashSet<T, S>The resulting type after applying the | operator.
1.0.0sourceimpl<T, S> BitXor<&HashSet<T, S>> for &HashSet<T, S>where
    T: Eq + Hash + Clone,
    S: BuildHasher + Default,
sourcefn bitxor(self, rhs: &HashSet<T, S>) -> HashSet<T, S>
Returns the symmetric difference of self and rhs as a new HashSet<T, S>. Examples use std::collections::HashSet;
let a = HashSet::from([1, 2, 3]);
let b = HashSet::from([3, 4, 5]);
let set = &a ^ &b;
let mut i = 0;
let expected = [1, 2, 4, 5];
for x in &set {
    assert!(expected.contains(x));
    i += 1;
}
assert_eq!(i, expected.len()); 
sourcetype Output = HashSet<T, S>The resulting type after applying the ^ operator.
1.0.0sourceimpl<T, S> Clone for HashSet<T, S>where
    T: Clone,
    S: Clone,
sourcefn clone_from(&mut self, other: &Self)
Overwrites the contents of self with a clone of the contents of source. This method is preferred over simply assigning source.clone() to self, as it avoids reallocation if possible. 
sourcefn clone(&self) -> SelfReturns a copy of the value. Read more

1.0.0sourceimpl<T, S> Debug for HashSet<T, S>where
    T: Debug,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> ResultFormats the value using the given formatter. Read more

1.0.0sourceimpl<T, S> Default for HashSet<T, S>where
    S: Default,
sourcefn default() -> HashSet<T, S>
Creates an empty HashSet<T, S> with the Default value for the hasher. 
1.4.0sourceimpl<'a, T, S> Extend<&'a T> for HashSet<T, S>where
    T: 'a + Eq + Hash + Copy,
    S: BuildHasher,
sourcefn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I)Extends a collection with the contents of an iterator. Read more
sourcefn extend_one(&mut self, item: &'a T)
ðŸ”¬This is a nightly-only experimental API. (extend_one #72631)
Extends a collection with exactly one element.
sourcefn extend_reserve(&mut self, additional: usize)
ðŸ”¬This is a nightly-only experimental API. (extend_one #72631)
Reserves capacity in a collection for the given number of additional elements. Read more

1.0.0sourceimpl<T, S> Extend<T> for HashSet<T, S>where
    T: Eq + Hash,
    S: BuildHasher,
sourcefn extend<I: IntoIterator<Item = T>>(&mut self, iter: I)Extends a collection with the contents of an iterator. Read more
sourcefn extend_one(&mut self, item: T)
ðŸ”¬This is a nightly-only experimental API. (extend_one #72631)
Extends a collection with exactly one element.
sourcefn extend_reserve(&mut self, additional: usize)
ðŸ”¬This is a nightly-only experimental API. (extend_one #72631)
Reserves capacity in a collection for the given number of additional elements. Read more

1.56.0sourceimpl<T, const N: usize> From<[T; N]> for HashSet<T, RandomState>where
    T: Eq + Hash,
sourcefn from(arr: [T; N]) -> Self
Examples use std::collections::HashSet;
let set1 = HashSet::from([1, 2, 3, 4]);
let set2: HashSet<_> = [1, 2, 3, 4].into();
assert_eq!(set1, set2); 
1.0.0sourceimpl<T, S> FromIterator<T> for HashSet<T, S>where
    T: Eq + Hash,
    S: BuildHasher + Default,
sourcefn from_iter<I: IntoIterator<Item = T>>(iter: I) -> HashSet<T, S>Creates a value from an iterator. Read more

1.0.0sourceimpl<'a, T, S> IntoIterator for &'a HashSet<T, S>
sourcetype Item = &'a TThe type of the elements being iterated over.
sourcetype IntoIter = Iter<'a, T>Which kind of iterator are we turning this into?
sourcefn into_iter(self) -> Iter<'a, T> â“˜Creates an iterator from a value. Read more

1.0.0sourceimpl<T, S> IntoIterator for HashSet<T, S>
sourcefn into_iter(self) -> IntoIter<T> â“˜
Creates a consuming iterator, that is, one that moves each value out of the set in arbitrary order. The set cannot be used after calling this. Examples use std::collections::HashSet;
let mut set = HashSet::new();
set.insert("a".to_string());
set.insert("b".to_string());
// Not possible to collect to a Vec<String> with a regular `.iter()`.
let v: Vec<String> = set.into_iter().collect();
// Will print in an arbitrary order.
for x in &v {
    println!("{x}");
} 
sourcetype Item = TThe type of the elements being iterated over.
sourcetype IntoIter = IntoIter<T>Which kind of iterator are we turning this into?
1.0.0sourceimpl<T, S> PartialEq for HashSet<T, S>where
    T: Eq + Hash,
    S: BuildHasher,
sourcefn eq(&self, other: &HashSet<T, S>) -> boolTests for self and other values to be equal, and is used by ==.
1.0.0sourcefn ne(&self, other: &Rhs) -> boolTests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
1.0.0sourceimpl<T, S> Sub<&HashSet<T, S>> for &HashSet<T, S>where
    T: Eq + Hash + Clone,
    S: BuildHasher + Default,
sourcefn sub(self, rhs: &HashSet<T, S>) -> HashSet<T, S>
Returns the difference of self and rhs as a new HashSet<T, S>. Examples use std::collections::HashSet;
let a = HashSet::from([1, 2, 3]);
let b = HashSet::from([3, 4, 5]);
let set = &a - &b;
let mut i = 0;
let expected = [1, 2];
for x in &set {
    assert!(expected.contains(x));
    i += 1;
}
assert_eq!(i, expected.len()); 
sourcetype Output = HashSet<T, S>The resulting type after applying the - operator.
1.0.0sourceimpl<T, S> Eq for HashSet<T, S>where
    T: Eq + Hash,
    S: BuildHasher,
Auto Trait Implementations
impl<T, S> Freeze for HashSet<T, S>where
    S: Freeze,impl<T, S> RefUnwindSafe for HashSet<T, S>where
    S: RefUnwindSafe,
    T: RefUnwindSafe,impl<T, S> Send for HashSet<T, S>where
    S: Send,
    T: Send,impl<T, S> Sync for HashSet<T, S>where
    S: Sync,
    T: Sync,impl<T, S> Unpin for HashSet<T, S>where
    S: Unpin,
    T: Unpin,impl<T, S> UnwindSafe for HashSet<T, S>where
    S: UnwindSafe,
    T: UnwindSafe,
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/collections/struct.HashSet.html


std/intrinsics/simd/fn.simd_fsqrt
-----------------------------------------------------------
Function simd_fsqrt
pub unsafe extern "rust-intrinsic" fn simd_fsqrt<T>(x: T) -> T
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Takes the square root of each element. T must be a vector of floats.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/simd/fn.simd_fsqrt.html


std/fs/fn.write
-----------------------------------------------------------
Function write
pub fn write<P: AsRef<Path>, C: AsRef<[u8]>>(path: P, contents: C) -> Result<()>
Writes a slice as the entire contents of a file. This function will create a file if it does not exist, and will entirely replace its contents if it does. Depending on the platform, this function may fail if the full directory path does not exist. This is a convenience function for using File::create and write_all with fewer imports. Examples use std::fs;
fn main() -> std::io::Result<()> {
    fs::write("foo.txt", b"Lorem ipsum")?;
    fs::write("bar.txt", "dolor sit")?;
    Ok(())
}
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/fs/fn.write.html


std/intrinsics/simd/fn.simd_reduce_mul_unordered
-----------------------------------------------------------
Function simd_reduce_mul_unordered
pub unsafe extern "rust-intrinsic" fn simd_reduce_mul_unordered<T, U>(
    x: T,
) -> U
ðŸ”¬This is a nightly-only experimental API. (core_intrinsics)
Multiplies elements within a vector in arbitrary order. May also be re-associated with unordered additions on the inputs/outputs. T must be a vector of integer or floating-point primitive types. U must be the element type of T.
    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/intrinsics/simd/fn.simd_reduce_mul_unordered.html


std/iter/struct.skipwhile
-----------------------------------------------------------
Struct SkipWhile
pub struct SkipWhile<I, P> { /* private fields */ }
An iterator that rejects elements while predicate returns true. This struct is created by the skip_while method on Iterator. See its documentation for more. Trait Implementations
1.0.0sourceimpl<I, P> Clone for SkipWhile<I, P>where
    I: Clone,
    P: Clone,
sourcefn clone(&self) -> SkipWhile<I, P> â“˜Returns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

1.9.0sourceimpl<I, P> Debug for SkipWhile<I, P>where
    I: Debug,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

1.0.0sourceimpl<I, P> Iterator for SkipWhile<I, P>where
    I: Iterator,
    P: FnMut(&<I as Iterator>::Item) -> bool,
sourcetype Item = <I as Iterator>::ItemThe type of the elements being iterated over.
sourcefn next(&mut self) -> Option<<I as Iterator>::Item>Advances the iterator and returns the next value. Read more
sourcefn size_hint(&self) -> (usize, Option<usize>)Returns the bounds on the remaining length of the iterator. Read more
sourcefn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> Rwhere
    SkipWhile<I, P>: Sized,
    Fold: FnMut(Acc, <SkipWhile<I, P> as Iterator>::Item) -> R,
    R: Try<Output = Acc>,An iterator method that applies a function as long as it returns successfully, producing a single, final value. Read more
sourcefn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Accwhere
    Fold: FnMut(Acc, <SkipWhile<I, P> as Iterator>::Item) -> Acc,Folds every element into an accumulator by applying an operation, returning the final result. Read more
sourcefn next_chunk<const N: usize>(
    &mut self,
) -> Result<[Self::Item; N], IntoIter<Self::Item, N>>where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_next_chunk #98326)
Advances the iterator and returns an array containing the next N values. Read more
1.0.0sourcefn count(self) -> usizewhere
    Self: Sized,Consumes the iterator, counting the number of iterations and returning it. Read more
1.0.0sourcefn last(self) -> Option<Self::Item>where
    Self: Sized,Consumes the iterator, returning the last element. Read more
sourcefn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator by n elements. Read more
1.0.0sourcefn nth(&mut self, n: usize) -> Option<Self::Item>Returns the nth element of the iterator. Read more
1.28.0sourcefn step_by(self, step: usize) -> StepBy<Self> â“˜where
    Self: Sized,Creates an iterator starting at the same point, but stepping by the given amount at each iteration. Read more
1.0.0sourcefn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator<Item = Self::Item>,Takes two iterators and creates a new iterator over both in sequence. Read more
1.0.0sourcefn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator,â€˜Zips upâ€™ two iterators into a single iterator of pairs. Read more
sourcefn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G> â“˜where
    Self: Sized,
    G: FnMut() -> Self::Item,
ðŸ”¬This is a nightly-only experimental API. (iter_intersperse #79524)
Creates a new iterator which places an item generated by separator between adjacent items of the original iterator. Read more
1.0.0sourcefn map<B, F>(self, f: F) -> Map<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> B,Takes a closure and creates an iterator which calls that closure on each element. Read more
1.21.0sourcefn for_each<F>(self, f: F)where
    Self: Sized,
    F: FnMut(Self::Item),Calls a closure on each element of an iterator. Read more
1.0.0sourcefn filter<P>(self, predicate: P) -> Filter<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator which uses a closure to determine if an element should be yielded. Read more
1.0.0sourcefn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Creates an iterator that both filters and maps. Read more
1.0.0sourcefn enumerate(self) -> Enumerate<Self> â“˜where
    Self: Sized,Creates an iterator which gives the current iteration count as well as the next value. Read more
1.0.0sourcefn peekable(self) -> Peekable<Self> â“˜where
    Self: Sized,Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information. Read more
1.0.0sourcefn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that skips elements based on a predicate. Read more
1.0.0sourcefn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that yields elements based on a predicate. Read more
1.57.0sourcefn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(Self::Item) -> Option<B>,Creates an iterator that both yields elements based on a predicate and maps. Read more
1.0.0sourcefn skip(self, n: usize) -> Skip<Self> â“˜where
    Self: Sized,Creates an iterator that skips the first n elements. Read more
1.0.0sourcefn take(self, n: usize) -> Take<Self> â“˜where
    Self: Sized,Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner. Read more
1.0.0sourcefn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> â“˜where
    Self: Sized,
    F: FnMut(&mut St, Self::Item) -> Option<B>,An iterator adapter which, like fold, holds internal state, but unlike fold, produces a new iterator. Read more
1.0.0sourcefn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F> â“˜where
    Self: Sized,
    U: IntoIterator,
    F: FnMut(Self::Item) -> U,Creates an iterator that works like map, but flattens nested structure. Read more
sourcefn map_windows<F, R, const N: usize>(self, f: F) -> MapWindows<Self, F, N> â“˜where
    Self: Sized,
    F: FnMut(&[Self::Item; N]) -> R,
ðŸ”¬This is a nightly-only experimental API. (iter_map_windows #87155)
Calls the given function f for each contiguous window of size N over self and returns an iterator over the outputs of f. Like slice::windows(), the windows during mapping overlap as well. Read more
1.0.0sourcefn fuse(self) -> Fuse<Self> â“˜where
    Self: Sized,Creates an iterator which ends after the first None. Read more
1.0.0sourcefn inspect<F>(self, f: F) -> Inspect<Self, F> â“˜where
    Self: Sized,
    F: FnMut(&Self::Item),Does something with each element of an iterator, passing the value on. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Borrows an iterator, rather than consuming it. Read more
1.0.0sourcefn collect<B>(self) -> Bwhere
    B: FromIterator<Self::Item>,
    Self: Sized,Transforms an iterator into a collection. Read more
sourcefn collect_into<E>(self, collection: &mut E) -> &mut Ewhere
    E: Extend<Self::Item>,
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_collect_into #94780)
Collects all the items from an iterator into a collection. Read more
1.0.0sourcefn partition<B, F>(self, f: F) -> (B, B)where
    Self: Sized,
    B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool,Consumes an iterator, creating two collections from it. Read more
sourcefn is_partitioned<P>(self, predicate: P) -> boolwhere
    Self: Sized,
    P: FnMut(Self::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_is_partitioned #62544)
Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false. Read more
1.27.0sourcefn try_for_each<F, R>(&mut self, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(Self::Item) -> R,
    R: Try<Output = ()>,An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. Read more
1.51.0sourcefn reduce<F>(self, f: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(Self::Item, Self::Item) -> Self::Item,Reduces the elements to a single one, by repeatedly applying a reducing operation. Read more
sourcefn try_reduce<R>(
    &mut self,
    f: impl FnMut(Self::Item, Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = Self::Item>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (iterator_try_reduce #87053)
Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. Read more
1.0.0sourcefn all<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if every element of the iterator matches a predicate. Read more
1.0.0sourcefn any<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if any element of the iterator matches a predicate. Read more
1.0.0sourcefn find<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator that satisfies a predicate. Read more
1.30.0sourcefn find_map<B, F>(&mut self, f: F) -> Option<B>where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Applies function to the elements of iterator and returns the first non-none result. Read more
sourcefn try_find<R>(
    &mut self,
    f: impl FnMut(&Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = bool>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (try_find #63178)
Applies function to the elements of iterator and returns the first true result or the first error. Read more
1.0.0sourcefn position<P>(&mut self, predicate: P) -> Option<usize>where
    Self: Sized,
    P: FnMut(Self::Item) -> bool,Searches for an element in an iterator, returning its index. Read more
1.6.0sourcefn max_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the maximum value from the specified function. Read more
1.15.0sourcefn max_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the maximum value with respect to the specified comparison function. Read more
1.6.0sourcefn min_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the minimum value from the specified function. Read more
1.15.0sourcefn min_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the minimum value with respect to the specified comparison function. Read more
1.0.0sourcefn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)where
    FromA: Default + Extend<A>,
    FromB: Default + Extend<B>,
    Self: Sized + Iterator<Item = (A, B)>,Converts an iterator of pairs into a pair of containers. Read more
1.36.0sourcefn copied<'a, T>(self) -> Copied<Self> â“˜where
    T: 'a + Copy,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which copies all of its elements. Read more
1.0.0sourcefn cloned<'a, T>(self) -> Cloned<Self> â“˜where
    T: 'a + Clone,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which clones all of its elements. Read more
sourcefn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N> â“˜where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_array_chunks #100450)
Returns an iterator over N elements of the iterator at a time. Read more
1.11.0sourcefn sum<S>(self) -> Swhere
    Self: Sized,
    S: Sum<Self::Item>,Sums the elements of an iterator. Read more
1.11.0sourcefn product<P>(self) -> Pwhere
    Self: Sized,
    P: Product<Self::Item>,Iterates over the entire iterator, multiplying all the elements Read more
sourcefn cmp_by<I, F>(self, other: I, cmp: F) -> Orderingwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn partial_cmp<I>(self, other: I) -> Option<Ordering>where
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,
Lexicographically compares the PartialOrd elements of this Iterator with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. Read more
sourcefn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering>where
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Option<Ordering>,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn eq<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are equal to those of another. Read more
sourcefn eq_by<I, F>(self, other: I, eq: F) -> boolwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function. Read more
1.5.0sourcefn ne<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialEq<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are not equal to those of another. Read more
1.5.0sourcefn lt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less than those of another. Read more
1.5.0sourcefn le<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically less or equal to those of another. Read more
1.5.0sourcefn gt<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than those of another. Read more
1.5.0sourcefn ge<I>(self, other: I) -> boolwhere
    I: IntoIterator,
    Self::Item: PartialOrd<<I as IntoIterator>::Item>,
    Self: Sized,Determines if the elements of this Iterator are lexicographically greater than or equal to those of another. Read more
1.82.0sourcefn is_sorted_by<F>(self, compare: F) -> boolwhere
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> bool,Checks if the elements of this iterator are sorted using the given comparator function. Read more
1.82.0sourcefn is_sorted_by_key<F, K>(self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> K,
    K: PartialOrd,Checks if the elements of this iterator are sorted using the given key extraction function. Read more

1.26.0sourceimpl<I, P> FusedIterator for SkipWhile<I, P>where
    I: FusedIterator,
    P: FnMut(&<I as Iterator>::Item) -> bool,
Auto Trait Implementations
impl<I, P> Freeze for SkipWhile<I, P>where
    I: Freeze,
    P: Freeze,impl<I, P> RefUnwindSafe for SkipWhile<I, P>where
    I: RefUnwindSafe,
    P: RefUnwindSafe,impl<I, P> Send for SkipWhile<I, P>where
    I: Send,
    P: Send,impl<I, P> Sync for SkipWhile<I, P>where
    I: Sync,
    P: Sync,impl<I, P> Unpin for SkipWhile<I, P>where
    I: Unpin,
    P: Unpin,impl<I, P> UnwindSafe for SkipWhile<I, P>where
    I: UnwindSafe,
    P: UnwindSafe,
Blanket Implementations
sourceimpl<T> Any for Twhere
    T: 'static + ?Sized,
sourcefn type_id(&self) -> TypeIdGets the TypeId of self. Read more

sourceimpl<T> Borrow<T> for Twhere
    T: ?Sized,
sourcefn borrow(&self) -> &TImmutably borrows from an owned value. Read more

sourceimpl<T> BorrowMut<T> for Twhere
    T: ?Sized,
sourcefn borrow_mut(&mut self) -> &mut TMutably borrows from an owned value. Read more

sourceimpl<T> CloneToUninit for Twhere
    T: Clone,
sourceunsafe fn clone_to_uninit(&self, dst: *mut T)
ðŸ”¬This is a nightly-only experimental API. (clone_to_uninit #126799)
Performs copy-assignment from self to dst. Read more

sourceimpl<T> From<T> for T
sourcefn from(t: T) -> T
Returns the argument unchanged. 
sourceimpl<T, U> Into<U> for Twhere
    U: From<T>,
sourcefn into(self) -> U
Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do. 
sourceimpl<I> IntoIterator for Iwhere
    I: Iterator,
sourcetype Item = <I as Iterator>::ItemThe type of the elements being iterated over.
sourcetype IntoIter = IWhich kind of iterator are we turning this into?
sourcefn into_iter(self) -> ICreates an iterator from a value. Read more

sourceimpl<T> ToOwned for Twhere
    T: Clone,
sourcetype Owned = TThe resulting type after obtaining ownership.
sourcefn to_owned(&self) -> TCreates owned data from borrowed data, usually by cloning. Read more
sourcefn clone_into(&self, target: &mut T)Uses borrowed data to replace owned data, usually by cloning. Read more

sourceimpl<T, U> TryFrom<U> for Twhere
    U: Into<T>,
sourcetype Error = InfallibleThe type returned in the event of a conversion error.
sourcefn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>Performs the conversion.
sourceimpl<T, U> TryInto<U> for Twhere
    U: TryFrom<T>,
sourcetype Error = <U as TryFrom<T>>::ErrorThe type returned in the event of a conversion error.
sourcefn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>Performs the conversion.

    Â© 2010 The Rust Project DevelopersLicensed under the Apache License, Version 2.0 or the MIT license, at your option.
https://doc.rust-lang.org/std/iter/struct.SkipWhile.html


std/iter/struct.arraychunks
-----------------------------------------------------------
Struct ArrayChunks
pub struct ArrayChunks<I, const N: usize>where
    I: Iterator,{ /* private fields */ }
ðŸ”¬This is a nightly-only experimental API. (iter_array_chunks #100450)
An iterator over N elements of the iterator at a time. The chunks do not overlap. If N does not divide the length of the iterator, then the last up to N-1 elements will be omitted. This struct is created by the array_chunks method on Iterator. See its documentation for more. Implementations
sourceimpl<I, const N: usize> ArrayChunks<I, N>where
    I: Iterator,
sourcepub fn into_remainder(self) -> Option<IntoIter<<I as Iterator>::Item, N>>
ðŸ”¬This is a nightly-only experimental API. (iter_array_chunks #100450)
Returns an iterator over the remaining elements of the original iterator that are not going to be returned by this iterator. The returned iterator will yield at most N-1 elements. Example let x = [1,2,3,4,5].into_iter().array_chunks::<2>();
let mut rem = x.into_remainder().unwrap();
assert_eq!(rem.next(), Some(5));
assert_eq!(rem.next(), None); 

Trait Implementations
sourceimpl<I, const N: usize> Clone for ArrayChunks<I, N>where
    I: Clone + Iterator,
    <I as Iterator>::Item: Clone,
sourcefn clone(&self) -> ArrayChunks<I, N> â“˜Returns a copy of the value. Read more
1.0.0sourcefn clone_from(&mut self, source: &Self)Performs copy-assignment from source. Read more

sourceimpl<I, const N: usize> Debug for ArrayChunks<I, N>where
    I: Debug + Iterator,
    <I as Iterator>::Item: Debug,
sourcefn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>Formats the value using the given formatter. Read more

sourceimpl<I, const N: usize> DoubleEndedIterator for ArrayChunks<I, N>where
    I: DoubleEndedIterator + ExactSizeIterator,
sourcefn next_back(&mut self) -> Option<<ArrayChunks<I, N> as Iterator>::Item>Removes and returns an element from the end of the iterator. Read more
sourcefn try_rfold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    ArrayChunks<I, N>: Sized,
    F: FnMut(B, <ArrayChunks<I, N> as Iterator>::Item) -> R,
    R: Try<Output = B>,This is the reverse version of Iterator::try_fold(): it takes elements starting from the back of the iterator. Read more
sourcefn rfold<AAA, FFF>(self, init: AAA, fold: FFF) -> AAAwhere
    FFF: FnMut(AAA, <ArrayChunks<I, N> as Iterator>::Item) -> AAA,An iterator method that reduces the iteratorâ€™s elements to a single, final value, starting from the back. Read more
sourcefn advance_back_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator from the back by n elements. Read more
1.37.0sourcefn nth_back(&mut self, n: usize) -> Option<Self::Item>Returns the nth element from the end of the iterator. Read more
1.27.0sourcefn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator from the back that satisfies a predicate. Read more

sourceimpl<I, const N: usize> ExactSizeIterator for ArrayChunks<I, N>where
    I: ExactSizeIterator,
sourcefn len(&self) -> usizeReturns the exact remaining length of the iterator. Read more
sourcefn is_empty(&self) -> bool
ðŸ”¬This is a nightly-only experimental API. (exact_size_is_empty #35428)
Returns true if the iterator is empty. Read more

sourceimpl<I, const N: usize> Iterator for ArrayChunks<I, N>where
    I: Iterator,
sourcetype Item = [<I as Iterator>::Item; N]The type of the elements being iterated over.
sourcefn next(&mut self) -> Option<<ArrayChunks<I, N> as Iterator>::Item>Advances the iterator and returns the next value. Read more
sourcefn size_hint(&self) -> (usize, Option<usize>)Returns the bounds on the remaining length of the iterator. Read more
sourcefn count(self) -> usizeConsumes the iterator, counting the number of iterations and returning it. Read more
sourcefn try_fold<B, F, R>(&mut self, init: B, f: F) -> Rwhere
    ArrayChunks<I, N>: Sized,
    F: FnMut(B, <ArrayChunks<I, N> as Iterator>::Item) -> R,
    R: Try<Output = B>,An iterator method that applies a function as long as it returns successfully, producing a single, final value. Read more
sourcefn fold<B, F>(self, init: B, f: F) -> Bwhere
    ArrayChunks<I, N>: Sized,
    F: FnMut(B, <ArrayChunks<I, N> as Iterator>::Item) -> B,Folds every element into an accumulator by applying an operation, returning the final result. Read more
sourcefn next_chunk<const N: usize>(
    &mut self,
) -> Result<[Self::Item; N], IntoIter<Self::Item, N>>where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_next_chunk #98326)
Advances the iterator and returns an array containing the next N values. Read more
1.0.0sourcefn last(self) -> Option<Self::Item>where
    Self: Sized,Consumes the iterator, returning the last element. Read more
sourcefn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>>
ðŸ”¬This is a nightly-only experimental API. (iter_advance_by #77404)
Advances the iterator by n elements. Read more
1.0.0sourcefn nth(&mut self, n: usize) -> Option<Self::Item>Returns the nth element of the iterator. Read more
1.28.0sourcefn step_by(self, step: usize) -> StepBy<Self> â“˜where
    Self: Sized,Creates an iterator starting at the same point, but stepping by the given amount at each iteration. Read more
1.0.0sourcefn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator<Item = Self::Item>,Takes two iterators and creates a new iterator over both in sequence. Read more
1.0.0sourcefn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter> â“˜where
    Self: Sized,
    U: IntoIterator,â€˜Zips upâ€™ two iterators into a single iterator of pairs. Read more
sourcefn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G> â“˜where
    Self: Sized,
    G: FnMut() -> Self::Item,
ðŸ”¬This is a nightly-only experimental API. (iter_intersperse #79524)
Creates a new iterator which places an item generated by separator between adjacent items of the original iterator. Read more
1.0.0sourcefn map<B, F>(self, f: F) -> Map<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> B,Takes a closure and creates an iterator which calls that closure on each element. Read more
1.21.0sourcefn for_each<F>(self, f: F)where
    Self: Sized,
    F: FnMut(Self::Item),Calls a closure on each element of an iterator. Read more
1.0.0sourcefn filter<P>(self, predicate: P) -> Filter<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator which uses a closure to determine if an element should be yielded. Read more
1.0.0sourcefn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> â“˜where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Creates an iterator that both filters and maps. Read more
1.0.0sourcefn enumerate(self) -> Enumerate<Self> â“˜where
    Self: Sized,Creates an iterator which gives the current iteration count as well as the next value. Read more
1.0.0sourcefn peekable(self) -> Peekable<Self> â“˜where
    Self: Sized,Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information. Read more
1.0.0sourcefn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that skips elements based on a predicate. Read more
1.0.0sourcefn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Creates an iterator that yields elements based on a predicate. Read more
1.57.0sourcefn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P> â“˜where
    Self: Sized,
    P: FnMut(Self::Item) -> Option<B>,Creates an iterator that both yields elements based on a predicate and maps. Read more
1.0.0sourcefn skip(self, n: usize) -> Skip<Self> â“˜where
    Self: Sized,Creates an iterator that skips the first n elements. Read more
1.0.0sourcefn take(self, n: usize) -> Take<Self> â“˜where
    Self: Sized,Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner. Read more
1.0.0sourcefn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> â“˜where
    Self: Sized,
    F: FnMut(&mut St, Self::Item) -> Option<B>,An iterator adapter which, like fold, holds internal state, but unlike fold, produces a new iterator. Read more
1.0.0sourcefn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F> â“˜where
    Self: Sized,
    U: IntoIterator,
    F: FnMut(Self::Item) -> U,Creates an iterator that works like map, but flattens nested structure. Read more
sourcefn map_windows<F, R, const N: usize>(self, f: F) -> MapWindows<Self, F, N> â“˜where
    Self: Sized,
    F: FnMut(&[Self::Item; N]) -> R,
ðŸ”¬This is a nightly-only experimental API. (iter_map_windows #87155)
Calls the given function f for each contiguous window of size N over self and returns an iterator over the outputs of f. Like slice::windows(), the windows during mapping overlap as well. Read more
1.0.0sourcefn fuse(self) -> Fuse<Self> â“˜where
    Self: Sized,Creates an iterator which ends after the first None. Read more
1.0.0sourcefn inspect<F>(self, f: F) -> Inspect<Self, F> â“˜where
    Self: Sized,
    F: FnMut(&Self::Item),Does something with each element of an iterator, passing the value on. Read more
1.0.0sourcefn by_ref(&mut self) -> &mut Selfwhere
    Self: Sized,Borrows an iterator, rather than consuming it. Read more
1.0.0sourcefn collect<B>(self) -> Bwhere
    B: FromIterator<Self::Item>,
    Self: Sized,Transforms an iterator into a collection. Read more
sourcefn collect_into<E>(self, collection: &mut E) -> &mut Ewhere
    E: Extend<Self::Item>,
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_collect_into #94780)
Collects all the items from an iterator into a collection. Read more
1.0.0sourcefn partition<B, F>(self, f: F) -> (B, B)where
    Self: Sized,
    B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool,Consumes an iterator, creating two collections from it. Read more
sourcefn is_partitioned<P>(self, predicate: P) -> boolwhere
    Self: Sized,
    P: FnMut(Self::Item) -> bool,
ðŸ”¬This is a nightly-only experimental API. (iter_is_partitioned #62544)
Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false. Read more
1.27.0sourcefn try_for_each<F, R>(&mut self, f: F) -> Rwhere
    Self: Sized,
    F: FnMut(Self::Item) -> R,
    R: Try<Output = ()>,An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. Read more
1.51.0sourcefn reduce<F>(self, f: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(Self::Item, Self::Item) -> Self::Item,Reduces the elements to a single one, by repeatedly applying a reducing operation. Read more
sourcefn try_reduce<R>(
    &mut self,
    f: impl FnMut(Self::Item, Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = Self::Item>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (iterator_try_reduce #87053)
Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. Read more
1.0.0sourcefn all<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if every element of the iterator matches a predicate. Read more
1.0.0sourcefn any<F>(&mut self, f: F) -> boolwhere
    Self: Sized,
    F: FnMut(Self::Item) -> bool,Tests if any element of the iterator matches a predicate. Read more
1.0.0sourcefn find<P>(&mut self, predicate: P) -> Option<Self::Item>where
    Self: Sized,
    P: FnMut(&Self::Item) -> bool,Searches for an element of an iterator that satisfies a predicate. Read more
1.30.0sourcefn find_map<B, F>(&mut self, f: F) -> Option<B>where
    Self: Sized,
    F: FnMut(Self::Item) -> Option<B>,Applies function to the elements of iterator and returns the first non-none result. Read more
sourcefn try_find<R>(
    &mut self,
    f: impl FnMut(&Self::Item) -> R,
) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryTypewhere
    Self: Sized,
    R: Try<Output = bool>,
    <R as Try>::Residual: Residual<Option<Self::Item>>,
ðŸ”¬This is a nightly-only experimental API. (try_find #63178)
Applies function to the elements of iterator and returns the first true result or the first error. Read more
1.0.0sourcefn position<P>(&mut self, predicate: P) -> Option<usize>where
    Self: Sized,
    P: FnMut(Self::Item) -> bool,Searches for an element in an iterator, returning its index. Read more
1.6.0sourcefn max_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the maximum value from the specified function. Read more
1.15.0sourcefn max_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the maximum value with respect to the specified comparison function. Read more
1.6.0sourcefn min_by_key<B, F>(self, f: F) -> Option<Self::Item>where
    B: Ord,
    Self: Sized,
    F: FnMut(&Self::Item) -> B,Returns the element that gives the minimum value from the specified function. Read more
1.15.0sourcefn min_by<F>(self, compare: F) -> Option<Self::Item>where
    Self: Sized,
    F: FnMut(&Self::Item, &Self::Item) -> Ordering,Returns the element that gives the minimum value with respect to the specified comparison function. Read more
1.0.0sourcefn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)where
    FromA: Default + Extend<A>,
    FromB: Default + Extend<B>,
    Self: Sized + Iterator<Item = (A, B)>,Converts an iterator of pairs into a pair of containers. Read more
1.36.0sourcefn copied<'a, T>(self) -> Copied<Self> â“˜where
    T: 'a + Copy,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which copies all of its elements. Read more
1.0.0sourcefn cloned<'a, T>(self) -> Cloned<Self> â“˜where
    T: 'a + Clone,
    Self: Sized + Iterator<Item = &'a T>,Creates an iterator which clones all of its elements. Read more
sourcefn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N> â“˜where
    Self: Sized,
ðŸ”¬This is a nightly-only experimental API. (iter_array_chunks #100450)
Returns an iterator over N elements of the iterator at a time. Read more
1.11.0sourcefn sum<S>(self) -> Swhere
    Self: Sized,
    S: Sum<Self::Item>,Sums the elements of an iterator. Read more
1.11.0sourcefn product<P>(self) -> Pwhere
    Self: Sized,
    P: Product<Self::Item>,Iterates over the entire iterator, multiplying all the elements Read more
sourcefn cmp_by<I, F>(self, other: I, cmp: F) -> Orderingwhere
    Self: Sized,
    I: IntoIterator,
    F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,
ðŸ”¬This is a nightly-only experimental API. (iter_order_by #64295)
Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function. Read more
1.5.0sourcefn partial_cmp<I>(self, other: I) -> Option<Ordering>where
    I: IntoIterator,
    Self::I